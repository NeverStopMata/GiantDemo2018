// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		gateway.proto

	It has these top-level messages:
		UserBeBaned
		ReqNullMsg
		ReqServiceReg
		RetServiceReg
		RetServiceAdd
		RetServiceLeave
		ReqServiceNodeAdd
		ReqServiceNodeDel
		ReqServiceNodeAddBatch
		ReqUserLogin
		ReqUserLogout
		ReqServer2TypeServer
		ReqServer2CBatch
		RetServerRecallBatch
		ReqServiceWeight
		ReqS2CNoticeBatch
		ReqS2CSystemMail
		ReqUserBeTick
		ReqSendNotice
		ReqReadNotice
		ReqSendStopNotice
		ReqHttpArgData
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GatewayCmd int32

const (
	GatewayCmd_ServiceReg            GatewayCmd = 1
	GatewayCmd_ServiceReady          GatewayCmd = 2
	GatewayCmd_ServiceAdd            GatewayCmd = 3
	GatewayCmd_ServiceLeave          GatewayCmd = 4
	GatewayCmd_ServiceNodeAdd        GatewayCmd = 5
	GatewayCmd_ServiceNodeDel        GatewayCmd = 6
	GatewayCmd_Server2Client         GatewayCmd = 7
	GatewayCmd_Client2Server         GatewayCmd = 8
	GatewayCmd_Server2Server         GatewayCmd = 9
	GatewayCmd_Server2ServerWithUser GatewayCmd = 10
	GatewayCmd_Server2UserServer     GatewayCmd = 11
	GatewayCmd_Server2CBatch         GatewayCmd = 12
	GatewayCmd_ServerRecall          GatewayCmd = 13
	GatewayCmd_ServerRecallBatch     GatewayCmd = 14
	GatewayCmd_UserLogin             GatewayCmd = 15
	GatewayCmd_UserLogout            GatewayCmd = 16
	GatewayCmd_ServiceSyncMsg        GatewayCmd = 17
	GatewayCmd_ServiceWeight         GatewayCmd = 18
	GatewayCmd_ServiceNodeAddBatch   GatewayCmd = 19
	GatewayCmd_S2SBest               GatewayCmd = 20
	GatewayCmd_S2CNotice             GatewayCmd = 21
	GatewayCmd_SendNotice            GatewayCmd = 22
	GatewayCmd_S2CNoticeBatch        GatewayCmd = 23
	GatewayCmd_UserBeTick            GatewayCmd = 24
	GatewayCmd_SendStopNotice        GatewayCmd = 25
	GatewayCmd_AccBeBaned            GatewayCmd = 26
	GatewayCmd_ReadNotice            GatewayCmd = 27
	GatewayCmd_MaintainNotice        GatewayCmd = 28
	GatewayCmd_Server2AllClients     GatewayCmd = 29
	GatewayCmd_UpdateServerRoomid    GatewayCmd = 30
	GatewayCmd_Server2TeamClient     GatewayCmd = 31
	GatewayCmd_S2ServerUpdateInfo    GatewayCmd = 32
	GatewayCmd_S2CSystemMail         GatewayCmd = 33
)

var GatewayCmd_name = map[int32]string{
	1:  "ServiceReg",
	2:  "ServiceReady",
	3:  "ServiceAdd",
	4:  "ServiceLeave",
	5:  "ServiceNodeAdd",
	6:  "ServiceNodeDel",
	7:  "Server2Client",
	8:  "Client2Server",
	9:  "Server2Server",
	10: "Server2ServerWithUser",
	11: "Server2UserServer",
	12: "Server2CBatch",
	13: "ServerRecall",
	14: "ServerRecallBatch",
	15: "UserLogin",
	16: "UserLogout",
	17: "ServiceSyncMsg",
	18: "ServiceWeight",
	19: "ServiceNodeAddBatch",
	20: "S2SBest",
	21: "S2CNotice",
	22: "SendNotice",
	23: "S2CNoticeBatch",
	24: "UserBeTick",
	25: "SendStopNotice",
	26: "AccBeBaned",
	27: "ReadNotice",
	28: "MaintainNotice",
	29: "Server2AllClients",
	30: "UpdateServerRoomid",
	31: "Server2TeamClient",
	32: "S2ServerUpdateInfo",
	33: "S2CSystemMail",
}
var GatewayCmd_value = map[string]int32{
	"ServiceReg":            1,
	"ServiceReady":          2,
	"ServiceAdd":            3,
	"ServiceLeave":          4,
	"ServiceNodeAdd":        5,
	"ServiceNodeDel":        6,
	"Server2Client":         7,
	"Client2Server":         8,
	"Server2Server":         9,
	"Server2ServerWithUser": 10,
	"Server2UserServer":     11,
	"Server2CBatch":         12,
	"ServerRecall":          13,
	"ServerRecallBatch":     14,
	"UserLogin":             15,
	"UserLogout":            16,
	"ServiceSyncMsg":        17,
	"ServiceWeight":         18,
	"ServiceNodeAddBatch":   19,
	"S2SBest":               20,
	"S2CNotice":             21,
	"SendNotice":            22,
	"S2CNoticeBatch":        23,
	"UserBeTick":            24,
	"SendStopNotice":        25,
	"AccBeBaned":            26,
	"ReadNotice":            27,
	"MaintainNotice":        28,
	"Server2AllClients":     29,
	"UpdateServerRoomid":    30,
	"Server2TeamClient":     31,
	"S2ServerUpdateInfo":    32,
	"S2CSystemMail":         33,
}

func (x GatewayCmd) Enum() *GatewayCmd {
	p := new(GatewayCmd)
	*p = x
	return p
}
func (x GatewayCmd) String() string {
	return proto.EnumName(GatewayCmd_name, int32(x))
}
func (x *GatewayCmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GatewayCmd_value, data, "GatewayCmd")
	if err != nil {
		return err
	}
	*x = GatewayCmd(value)
	return nil
}
func (GatewayCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

type UserBeBaned struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
}

func (m *UserBeBaned) Reset()                    { *m = UserBeBaned{} }
func (m *UserBeBaned) String() string            { return proto.CompactTextString(m) }
func (*UserBeBaned) ProtoMessage()               {}
func (*UserBeBaned) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

func (m *UserBeBaned) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ReqNullMsg struct {
}

func (m *ReqNullMsg) Reset()                    { *m = ReqNullMsg{} }
func (m *ReqNullMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqNullMsg) ProtoMessage()               {}
func (*ReqNullMsg) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

// 服务器间连接验证
type ReqServiceReg struct {
	Key        string `protobuf:"bytes,1,req,name=Key,json=key" json:"Key"`
	ServerType uint32 `protobuf:"varint,2,req,name=ServerType,json=serverType" json:"ServerType"`
	ServerId   uint32 `protobuf:"varint,3,req,name=ServerId,json=serverId" json:"ServerId"`
	Address    string `protobuf:"bytes,4,opt,name=Address,json=address" json:"Address"`
	InAddress  string `protobuf:"bytes,5,opt,name=InAddress,json=inAddress" json:"InAddress"`
}

func (m *ReqServiceReg) Reset()                    { *m = ReqServiceReg{} }
func (m *ReqServiceReg) String() string            { return proto.CompactTextString(m) }
func (*ReqServiceReg) ProtoMessage()               {}
func (*ReqServiceReg) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{2} }

func (m *ReqServiceReg) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqServiceReg) GetServerType() uint32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *ReqServiceReg) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ReqServiceReg) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqServiceReg) GetInAddress() string {
	if m != nil {
		return m.InAddress
	}
	return ""
}

type RetServiceReg struct {
	Id      uint32   `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	NodeIds []uint32 `protobuf:"varint,2,rep,name=NodeIds,json=nodeIds" json:"NodeIds,omitempty"`
}

func (m *RetServiceReg) Reset()                    { *m = RetServiceReg{} }
func (m *RetServiceReg) String() string            { return proto.CompactTextString(m) }
func (*RetServiceReg) ProtoMessage()               {}
func (*RetServiceReg) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{3} }

func (m *RetServiceReg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetServiceReg) GetNodeIds() []uint32 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

// 添加服务节点
type RetServiceAdd struct {
	Id      uint32 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Address string `protobuf:"bytes,2,req,name=Address,json=address" json:"Address"`
	Type    uint32 `protobuf:"varint,3,req,name=Type,json=type" json:"Type"`
}

func (m *RetServiceAdd) Reset()                    { *m = RetServiceAdd{} }
func (m *RetServiceAdd) String() string            { return proto.CompactTextString(m) }
func (*RetServiceAdd) ProtoMessage()               {}
func (*RetServiceAdd) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{4} }

func (m *RetServiceAdd) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetServiceAdd) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RetServiceAdd) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 删除服务节点
type RetServiceLeave struct {
	Id   uint32 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Type uint32 `protobuf:"varint,2,req,name=Type,json=type" json:"Type"`
}

func (m *RetServiceLeave) Reset()                    { *m = RetServiceLeave{} }
func (m *RetServiceLeave) String() string            { return proto.CompactTextString(m) }
func (*RetServiceLeave) ProtoMessage()               {}
func (*RetServiceLeave) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{5} }

func (m *RetServiceLeave) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetServiceLeave) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 添加子服务
type ReqServiceNodeAdd struct {
	NodeId   uint64 `protobuf:"varint,1,req,name=NodeId,json=nodeId" json:"NodeId"`
	UserId   uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	ServerId uint32 `protobuf:"varint,3,req,name=ServerId,json=serverId" json:"ServerId"`
}

func (m *ReqServiceNodeAdd) Reset()                    { *m = ReqServiceNodeAdd{} }
func (m *ReqServiceNodeAdd) String() string            { return proto.CompactTextString(m) }
func (*ReqServiceNodeAdd) ProtoMessage()               {}
func (*ReqServiceNodeAdd) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{6} }

func (m *ReqServiceNodeAdd) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ReqServiceNodeAdd) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqServiceNodeAdd) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

// 删除子服务
type ReqServiceNodeDel struct {
	NodeId uint64 `protobuf:"varint,1,req,name=NodeId,json=nodeId" json:"NodeId"`
	UserId uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
}

func (m *ReqServiceNodeDel) Reset()                    { *m = ReqServiceNodeDel{} }
func (m *ReqServiceNodeDel) String() string            { return proto.CompactTextString(m) }
func (*ReqServiceNodeDel) ProtoMessage()               {}
func (*ReqServiceNodeDel) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{7} }

func (m *ReqServiceNodeDel) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ReqServiceNodeDel) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 批量添加子服务
type ReqServiceNodeAddBatch struct {
	NodeIds []*ReqServiceNodeAddBatch_ChatServerNode `protobuf:"bytes,1,rep,name=NodeIds,json=nodeIds" json:"NodeIds,omitempty"`
}

func (m *ReqServiceNodeAddBatch) Reset()                    { *m = ReqServiceNodeAddBatch{} }
func (m *ReqServiceNodeAddBatch) String() string            { return proto.CompactTextString(m) }
func (*ReqServiceNodeAddBatch) ProtoMessage()               {}
func (*ReqServiceNodeAddBatch) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8} }

func (m *ReqServiceNodeAddBatch) GetNodeIds() []*ReqServiceNodeAddBatch_ChatServerNode {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

type ReqServiceNodeAddBatch_ChatServerNode struct {
	ServerId uint32 `protobuf:"varint,1,req,name=ServerId,json=serverId" json:"ServerId"`
	NodeId   uint64 `protobuf:"varint,2,req,name=NodeId,json=nodeId" json:"NodeId"`
	UserId   uint64 `protobuf:"varint,3,req,name=UserId,json=userId" json:"UserId"`
}

func (m *ReqServiceNodeAddBatch_ChatServerNode) Reset()         { *m = ReqServiceNodeAddBatch_ChatServerNode{} }
func (m *ReqServiceNodeAddBatch_ChatServerNode) String() string { return proto.CompactTextString(m) }
func (*ReqServiceNodeAddBatch_ChatServerNode) ProtoMessage()    {}
func (*ReqServiceNodeAddBatch_ChatServerNode) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{8, 0}
}

func (m *ReqServiceNodeAddBatch_ChatServerNode) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ReqServiceNodeAddBatch_ChatServerNode) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ReqServiceNodeAddBatch_ChatServerNode) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 玩家登录上线
type ReqUserLogin struct {
	UserId    uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	Account   string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon      uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex       uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	Name      string `protobuf:"bytes,5,req,name=Name,json=name" json:"Name"`
	PassIcon  string `protobuf:"bytes,6,req,name=PassIcon,json=passIcon" json:"PassIcon"`
	Location  uint32 `protobuf:"varint,7,req,name=Location,json=location" json:"Location"`
	CNet      uint32 `protobuf:"varint,8,req,name=CNet,json=cNet" json:"CNet"`
	RegDev    string `protobuf:"bytes,9,req,name=RegDev,json=regDev" json:"RegDev"`
	ClientVer string `protobuf:"bytes,10,req,name=ClientVer,json=clientVer" json:"ClientVer"`
	Cnet      uint32 `protobuf:"varint,11,req,name=Cnet,json=cnet" json:"Cnet"`
}

func (m *ReqUserLogin) Reset()                    { *m = ReqUserLogin{} }
func (m *ReqUserLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqUserLogin) ProtoMessage()               {}
func (*ReqUserLogin) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{9} }

func (m *ReqUserLogin) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ReqUserLogin) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *ReqUserLogin) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *ReqUserLogin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqUserLogin) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *ReqUserLogin) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *ReqUserLogin) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

func (m *ReqUserLogin) GetRegDev() string {
	if m != nil {
		return m.RegDev
	}
	return ""
}

func (m *ReqUserLogin) GetClientVer() string {
	if m != nil {
		return m.ClientVer
	}
	return ""
}

func (m *ReqUserLogin) GetCnet() uint32 {
	if m != nil {
		return m.Cnet
	}
	return 0
}

// 玩家下线
type ReqUserLogout struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
}

func (m *ReqUserLogout) Reset()                    { *m = ReqUserLogout{} }
func (m *ReqUserLogout) String() string            { return proto.CompactTextString(m) }
func (*ReqUserLogout) ProtoMessage()               {}
func (*ReqUserLogout) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{10} }

func (m *ReqUserLogout) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 转向默认服务器转发消息
type ReqServer2TypeServer struct {
	ServeType uint32 `protobuf:"varint,1,req,name=ServeType,json=serveType" json:"ServeType"`
	ServerId  uint32 `protobuf:"varint,2,req,name=ServerId,json=serverId" json:"ServerId"`
	Data      []byte `protobuf:"bytes,3,req,name=Data,json=data" json:"Data"`
	Flag      uint32 `protobuf:"varint,4,req,name=Flag,json=flag" json:"Flag"`
}

func (m *ReqServer2TypeServer) Reset()                    { *m = ReqServer2TypeServer{} }
func (m *ReqServer2TypeServer) String() string            { return proto.CompactTextString(m) }
func (*ReqServer2TypeServer) ProtoMessage()               {}
func (*ReqServer2TypeServer) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{11} }

func (m *ReqServer2TypeServer) GetServeType() uint32 {
	if m != nil {
		return m.ServeType
	}
	return 0
}

func (m *ReqServer2TypeServer) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ReqServer2TypeServer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqServer2TypeServer) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type ReqServer2CBatch struct {
	Ids    []uint64 `protobuf:"varint,1,rep,name=Ids,json=ids" json:"Ids,omitempty"`
	Data   []byte   `protobuf:"bytes,2,req,name=Data,json=data" json:"Data"`
	Flag   uint32   `protobuf:"varint,3,req,name=Flag,json=flag" json:"Flag"`
	ReCall bool     `protobuf:"varint,4,req,name=ReCall,json=reCall" json:"ReCall"`
}

func (m *ReqServer2CBatch) Reset()                    { *m = ReqServer2CBatch{} }
func (m *ReqServer2CBatch) String() string            { return proto.CompactTextString(m) }
func (*ReqServer2CBatch) ProtoMessage()               {}
func (*ReqServer2CBatch) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{12} }

func (m *ReqServer2CBatch) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ReqServer2CBatch) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqServer2CBatch) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *ReqServer2CBatch) GetReCall() bool {
	if m != nil {
		return m.ReCall
	}
	return false
}

type RetServerRecallBatch struct {
	Ids  []uint64 `protobuf:"varint,1,rep,name=Ids,json=ids" json:"Ids,omitempty"`
	Data []byte   `protobuf:"bytes,2,req,name=Data,json=data" json:"Data"`
	Flag uint32   `protobuf:"varint,3,req,name=Flag,json=flag" json:"Flag"`
}

func (m *RetServerRecallBatch) Reset()                    { *m = RetServerRecallBatch{} }
func (m *RetServerRecallBatch) String() string            { return proto.CompactTextString(m) }
func (*RetServerRecallBatch) ProtoMessage()               {}
func (*RetServerRecallBatch) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{13} }

func (m *RetServerRecallBatch) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RetServerRecallBatch) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RetServerRecallBatch) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

// 更新服务器权重
type ReqServiceWeight struct {
	UserNum  uint32 `protobuf:"varint,1,req,name=UserNum,json=userNum" json:"UserNum"`
	TUserNum uint32 `protobuf:"varint,2,opt,name=TUserNum,json=tUserNum" json:"TUserNum"`
}

func (m *ReqServiceWeight) Reset()                    { *m = ReqServiceWeight{} }
func (m *ReqServiceWeight) String() string            { return proto.CompactTextString(m) }
func (*ReqServiceWeight) ProtoMessage()               {}
func (*ReqServiceWeight) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{14} }

func (m *ReqServiceWeight) GetUserNum() uint32 {
	if m != nil {
		return m.UserNum
	}
	return 0
}

func (m *ReqServiceWeight) GetTUserNum() uint32 {
	if m != nil {
		return m.TUserNum
	}
	return 0
}

// 批量转发消息
type ReqS2CNoticeBatch struct {
	UserIds []uint64 `protobuf:"varint,1,rep,name=UserIds,json=userIds" json:"UserIds,omitempty"`
	Data    []byte   `protobuf:"bytes,2,req,name=Data,json=data" json:"Data"`
	Flag    uint32   `protobuf:"varint,3,req,name=Flag,json=flag" json:"Flag"`
}

func (m *ReqS2CNoticeBatch) Reset()                    { *m = ReqS2CNoticeBatch{} }
func (m *ReqS2CNoticeBatch) String() string            { return proto.CompactTextString(m) }
func (*ReqS2CNoticeBatch) ProtoMessage()               {}
func (*ReqS2CNoticeBatch) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{15} }

func (m *ReqS2CNoticeBatch) GetUserIds() []uint64 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *ReqS2CNoticeBatch) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqS2CNoticeBatch) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

// 批量转发系统邮件
type ReqS2CSystemMail struct {
	Data []byte `protobuf:"bytes,2,req,name=Data,json=data" json:"Data"`
	Flag uint32 `protobuf:"varint,3,req,name=Flag,json=flag" json:"Flag"`
}

func (m *ReqS2CSystemMail) Reset()                    { *m = ReqS2CSystemMail{} }
func (m *ReqS2CSystemMail) String() string            { return proto.CompactTextString(m) }
func (*ReqS2CSystemMail) ProtoMessage()               {}
func (*ReqS2CSystemMail) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{16} }

func (m *ReqS2CSystemMail) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqS2CSystemMail) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

// 玩家被T出去
type ReqUserBeTick struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	GID    uint32 `protobuf:"varint,2,req,name=GID,json=gID" json:"GID"`
}

func (m *ReqUserBeTick) Reset()                    { *m = ReqUserBeTick{} }
func (m *ReqUserBeTick) String() string            { return proto.CompactTextString(m) }
func (*ReqUserBeTick) ProtoMessage()               {}
func (*ReqUserBeTick) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{17} }

func (m *ReqUserBeTick) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserBeTick) GetGID() uint32 {
	if m != nil {
		return m.GID
	}
	return 0
}

// 请求发送公告
// 公告 /notice?type=消息类型1系统公告&time=持续时间(秒)&params=&text=公告内容&systype=系统android和ios&version=版本
// 				&betuserid=玩家ID区间(1,1000包含1和1000)&userids=玩家ID列表&accounts=玩家账号列表(二取一多个逗号隔开)
// 				&award=奖励(道具ID1,数量1;道具2,数量2)
type ReqSendNotice struct {
	NoticeId uint64 `protobuf:"varint,1,req,name=NoticeId,json=noticeId" json:"NoticeId"`
}

func (m *ReqSendNotice) Reset()                    { *m = ReqSendNotice{} }
func (m *ReqSendNotice) String() string            { return proto.CompactTextString(m) }
func (*ReqSendNotice) ProtoMessage()               {}
func (*ReqSendNotice) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{18} }

func (m *ReqSendNotice) GetNoticeId() uint64 {
	if m != nil {
		return m.NoticeId
	}
	return 0
}

type ReqReadNotice struct {
	NoticeId uint64 `protobuf:"varint,1,req,name=NoticeId,json=noticeId" json:"NoticeId"`
}

func (m *ReqReadNotice) Reset()                    { *m = ReqReadNotice{} }
func (m *ReqReadNotice) String() string            { return proto.CompactTextString(m) }
func (*ReqReadNotice) ProtoMessage()               {}
func (*ReqReadNotice) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{19} }

func (m *ReqReadNotice) GetNoticeId() uint64 {
	if m != nil {
		return m.NoticeId
	}
	return 0
}

type ReqSendStopNotice struct {
	NoticeId uint64 `protobuf:"varint,1,req,name=NoticeId,json=noticeId" json:"NoticeId"`
}

func (m *ReqSendStopNotice) Reset()                    { *m = ReqSendStopNotice{} }
func (m *ReqSendStopNotice) String() string            { return proto.CompactTextString(m) }
func (*ReqSendStopNotice) ProtoMessage()               {}
func (*ReqSendStopNotice) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{20} }

func (m *ReqSendStopNotice) GetNoticeId() uint64 {
	if m != nil {
		return m.NoticeId
	}
	return 0
}

// http请求数据
type ReqHttpArgData struct {
	Args []*ReqHttpArgData_KeyVal `protobuf:"bytes,1,rep,name=Args,json=args" json:"Args,omitempty"`
	Cmd  uint32                   `protobuf:"varint,2,req,name=Cmd,json=cmd" json:"Cmd"`
}

func (m *ReqHttpArgData) Reset()                    { *m = ReqHttpArgData{} }
func (m *ReqHttpArgData) String() string            { return proto.CompactTextString(m) }
func (*ReqHttpArgData) ProtoMessage()               {}
func (*ReqHttpArgData) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{21} }

func (m *ReqHttpArgData) GetArgs() []*ReqHttpArgData_KeyVal {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ReqHttpArgData) GetCmd() uint32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

type ReqHttpArgData_KeyVal struct {
	Key string `protobuf:"bytes,1,req,name=Key,json=key" json:"Key"`
	Val string `protobuf:"bytes,2,req,name=Val,json=val" json:"Val"`
}

func (m *ReqHttpArgData_KeyVal) Reset()                    { *m = ReqHttpArgData_KeyVal{} }
func (m *ReqHttpArgData_KeyVal) String() string            { return proto.CompactTextString(m) }
func (*ReqHttpArgData_KeyVal) ProtoMessage()               {}
func (*ReqHttpArgData_KeyVal) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{21, 0} }

func (m *ReqHttpArgData_KeyVal) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqHttpArgData_KeyVal) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func init() {
	proto.RegisterType((*UserBeBaned)(nil), "usercmd.UserBeBaned")
	proto.RegisterType((*ReqNullMsg)(nil), "usercmd.ReqNullMsg")
	proto.RegisterType((*ReqServiceReg)(nil), "usercmd.ReqServiceReg")
	proto.RegisterType((*RetServiceReg)(nil), "usercmd.RetServiceReg")
	proto.RegisterType((*RetServiceAdd)(nil), "usercmd.RetServiceAdd")
	proto.RegisterType((*RetServiceLeave)(nil), "usercmd.RetServiceLeave")
	proto.RegisterType((*ReqServiceNodeAdd)(nil), "usercmd.ReqServiceNodeAdd")
	proto.RegisterType((*ReqServiceNodeDel)(nil), "usercmd.ReqServiceNodeDel")
	proto.RegisterType((*ReqServiceNodeAddBatch)(nil), "usercmd.ReqServiceNodeAddBatch")
	proto.RegisterType((*ReqServiceNodeAddBatch_ChatServerNode)(nil), "usercmd.ReqServiceNodeAddBatch.ChatServerNode")
	proto.RegisterType((*ReqUserLogin)(nil), "usercmd.ReqUserLogin")
	proto.RegisterType((*ReqUserLogout)(nil), "usercmd.ReqUserLogout")
	proto.RegisterType((*ReqServer2TypeServer)(nil), "usercmd.ReqServer2TypeServer")
	proto.RegisterType((*ReqServer2CBatch)(nil), "usercmd.ReqServer2CBatch")
	proto.RegisterType((*RetServerRecallBatch)(nil), "usercmd.RetServerRecallBatch")
	proto.RegisterType((*ReqServiceWeight)(nil), "usercmd.ReqServiceWeight")
	proto.RegisterType((*ReqS2CNoticeBatch)(nil), "usercmd.ReqS2CNoticeBatch")
	proto.RegisterType((*ReqS2CSystemMail)(nil), "usercmd.ReqS2CSystemMail")
	proto.RegisterType((*ReqUserBeTick)(nil), "usercmd.ReqUserBeTick")
	proto.RegisterType((*ReqSendNotice)(nil), "usercmd.ReqSendNotice")
	proto.RegisterType((*ReqReadNotice)(nil), "usercmd.ReqReadNotice")
	proto.RegisterType((*ReqSendStopNotice)(nil), "usercmd.ReqSendStopNotice")
	proto.RegisterType((*ReqHttpArgData)(nil), "usercmd.ReqHttpArgData")
	proto.RegisterType((*ReqHttpArgData_KeyVal)(nil), "usercmd.ReqHttpArgData.KeyVal")
	proto.RegisterEnum("usercmd.GatewayCmd", GatewayCmd_name, GatewayCmd_value)
}
func (m *UserBeBaned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBeBaned) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *ReqNullMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNullMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqServiceReg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServiceReg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.ServerType))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.ServerId))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.InAddress)))
	i += copy(dAtA[i:], m.InAddress)
	return i, nil
}

func (m *RetServiceReg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetServiceReg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Id))
	if len(m.NodeIds) > 0 {
		for _, num := range m.NodeIds {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGateway(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RetServiceAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetServiceAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Type))
	return i, nil
}

func (m *RetServiceLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetServiceLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Type))
	return i, nil
}

func (m *ReqServiceNodeAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServiceNodeAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.NodeId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.ServerId))
	return i, nil
}

func (m *ReqServiceNodeDel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServiceNodeDel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.NodeId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *ReqServiceNodeAddBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServiceNodeAddBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeIds) > 0 {
		for _, msg := range m.NodeIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqServiceNodeAddBatch_ChatServerNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServiceNodeAddBatch_ChatServerNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.ServerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.NodeId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *ReqUserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Location))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.CNet))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.RegDev)))
	i += copy(dAtA[i:], m.RegDev)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.ClientVer)))
	i += copy(dAtA[i:], m.ClientVer)
	dAtA[i] = 0x58
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Cnet))
	return i, nil
}

func (m *ReqUserLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *ReqServer2TypeServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServer2TypeServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.ServeType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.ServerId))
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Flag))
	return i, nil
}

func (m *ReqServer2CBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServer2CBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGateway(dAtA, i, uint64(num))
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Flag))
	dAtA[i] = 0x20
	i++
	if m.ReCall {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetServerRecallBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetServerRecallBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGateway(dAtA, i, uint64(num))
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Flag))
	return i, nil
}

func (m *ReqServiceWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServiceWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.TUserNum))
	return i, nil
}

func (m *ReqS2CNoticeBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqS2CNoticeBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		for _, num := range m.UserIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGateway(dAtA, i, uint64(num))
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Flag))
	return i, nil
}

func (m *ReqS2CSystemMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqS2CSystemMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Flag))
	return i, nil
}

func (m *ReqUserBeTick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserBeTick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.GID))
	return i, nil
}

func (m *ReqSendNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.NoticeId))
	return i, nil
}

func (m *ReqReadNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReadNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.NoticeId))
	return i, nil
}

func (m *ReqSendStopNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendStopNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.NoticeId))
	return i, nil
}

func (m *ReqHttpArgData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHttpArgData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, msg := range m.Args {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintGateway(dAtA, i, uint64(m.Cmd))
	return i, nil
}

func (m *ReqHttpArgData_KeyVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHttpArgData_KeyVal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Val)))
	i += copy(dAtA[i:], m.Val)
	return i, nil
}

func encodeFixed64Gateway(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gateway(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserBeBaned) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.UserId))
	return n
}

func (m *ReqNullMsg) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqServiceReg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovGateway(uint64(l))
	n += 1 + sovGateway(uint64(m.ServerType))
	n += 1 + sovGateway(uint64(m.ServerId))
	l = len(m.Address)
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.InAddress)
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *RetServiceReg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.Id))
	if len(m.NodeIds) > 0 {
		for _, e := range m.NodeIds {
			n += 1 + sovGateway(uint64(e))
		}
	}
	return n
}

func (m *RetServiceAdd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.Id))
	l = len(m.Address)
	n += 1 + l + sovGateway(uint64(l))
	n += 1 + sovGateway(uint64(m.Type))
	return n
}

func (m *RetServiceLeave) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.Id))
	n += 1 + sovGateway(uint64(m.Type))
	return n
}

func (m *ReqServiceNodeAdd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.NodeId))
	n += 1 + sovGateway(uint64(m.UserId))
	n += 1 + sovGateway(uint64(m.ServerId))
	return n
}

func (m *ReqServiceNodeDel) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.NodeId))
	n += 1 + sovGateway(uint64(m.UserId))
	return n
}

func (m *ReqServiceNodeAddBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.NodeIds) > 0 {
		for _, e := range m.NodeIds {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *ReqServiceNodeAddBatch_ChatServerNode) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.ServerId))
	n += 1 + sovGateway(uint64(m.NodeId))
	n += 1 + sovGateway(uint64(m.UserId))
	return n
}

func (m *ReqUserLogin) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.UserId))
	l = len(m.Account)
	n += 1 + l + sovGateway(uint64(l))
	n += 1 + sovGateway(uint64(m.Icon))
	n += 1 + sovGateway(uint64(m.Sex))
	l = len(m.Name)
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.PassIcon)
	n += 1 + l + sovGateway(uint64(l))
	n += 1 + sovGateway(uint64(m.Location))
	n += 1 + sovGateway(uint64(m.CNet))
	l = len(m.RegDev)
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.ClientVer)
	n += 1 + l + sovGateway(uint64(l))
	n += 1 + sovGateway(uint64(m.Cnet))
	return n
}

func (m *ReqUserLogout) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.UserId))
	return n
}

func (m *ReqServer2TypeServer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.ServeType))
	n += 1 + sovGateway(uint64(m.ServerId))
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovGateway(uint64(l))
	}
	n += 1 + sovGateway(uint64(m.Flag))
	return n
}

func (m *ReqServer2CBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovGateway(uint64(e))
		}
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovGateway(uint64(l))
	}
	n += 1 + sovGateway(uint64(m.Flag))
	n += 2
	return n
}

func (m *RetServerRecallBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovGateway(uint64(e))
		}
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovGateway(uint64(l))
	}
	n += 1 + sovGateway(uint64(m.Flag))
	return n
}

func (m *ReqServiceWeight) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.UserNum))
	n += 1 + sovGateway(uint64(m.TUserNum))
	return n
}

func (m *ReqS2CNoticeBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		for _, e := range m.UserIds {
			n += 1 + sovGateway(uint64(e))
		}
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovGateway(uint64(l))
	}
	n += 1 + sovGateway(uint64(m.Flag))
	return n
}

func (m *ReqS2CSystemMail) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovGateway(uint64(l))
	}
	n += 1 + sovGateway(uint64(m.Flag))
	return n
}

func (m *ReqUserBeTick) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.UserId))
	n += 1 + sovGateway(uint64(m.GID))
	return n
}

func (m *ReqSendNotice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.NoticeId))
	return n
}

func (m *ReqReadNotice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.NoticeId))
	return n
}

func (m *ReqSendStopNotice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGateway(uint64(m.NoticeId))
	return n
}

func (m *ReqHttpArgData) Size() (n int) {
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	n += 1 + sovGateway(uint64(m.Cmd))
	return n
}

func (m *ReqHttpArgData_KeyVal) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Val)
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserBeBaned) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBeBaned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBeBaned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNullMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNullMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNullMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServiceReg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServiceReg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServiceReg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			m.ServerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerType")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetServiceReg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetServiceReg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetServiceReg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NodeIds = append(m.NodeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NodeIds = append(m.NodeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetServiceAdd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetServiceAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetServiceAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetServiceLeave) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetServiceLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetServiceLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServiceNodeAdd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServiceNodeAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServiceNodeAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NodeId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServiceNodeDel) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServiceNodeDel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServiceNodeDel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NodeId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServiceNodeAddBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServiceNodeAddBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServiceNodeAddBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeIds = append(m.NodeIds, &ReqServiceNodeAddBatch_ChatServerNode{})
			if err := m.NodeIds[len(m.NodeIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServiceNodeAddBatch_ChatServerNode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatServerNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatServerNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NodeId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegDev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegDev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnet", wireType)
			}
			m.Cnet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000400)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PassIcon")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Location")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RegDev")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientVer")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Cnet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserLogout) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServer2TypeServer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServer2TypeServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServer2TypeServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServeType", wireType)
			}
			m.ServeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServeType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServeType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServer2CBatch) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServer2CBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServer2CBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReCall = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReCall")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetServerRecallBatch) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetServerRecallBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetServerRecallBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServiceWeight) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServiceWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServiceWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNum", wireType)
			}
			m.UserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TUserNum", wireType)
			}
			m.TUserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TUserNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqS2CNoticeBatch) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqS2CNoticeBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqS2CNoticeBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqS2CSystemMail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqS2CSystemMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqS2CSystemMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserBeTick) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserBeTick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserBeTick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GID", wireType)
			}
			m.GID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendNotice) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			m.NoticeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NoticeId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReadNotice) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReadNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReadNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			m.NoticeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NoticeId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendStopNotice) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendStopNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendStopNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			m.NoticeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NoticeId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHttpArgData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHttpArgData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHttpArgData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &ReqHttpArgData_KeyVal{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Cmd")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHttpArgData_KeyVal) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Val")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gateway.proto", fileDescriptorGateway) }

var fileDescriptorGateway = []byte{
	// 1125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x0d, 0x1f, 0xd6, 0x63, 0x6c, 0x39, 0xe3, 0x89, 0xad, 0x30, 0xae, 0xab, 0xa8, 0x44, 0x17,
	0x46, 0x8b, 0x0a, 0xa8, 0x80, 0x02, 0xdd, 0x15, 0x7a, 0x34, 0x89, 0x10, 0x5b, 0x2d, 0x28, 0xc7,
	0xd9, 0x14, 0x28, 0x06, 0x9c, 0x1b, 0x9a, 0x08, 0x45, 0xca, 0xe4, 0xc8, 0x8d, 0xbe, 0xa0, 0xdb,
	0xac, 0xfa, 0x23, 0xfd, 0x89, 0x2c, 0x8b, 0x7e, 0x40, 0x51, 0xb8, 0x3f, 0x52, 0x0c, 0x67, 0x28,
	0x0e, 0xfd, 0x88, 0x83, 0xb4, 0x3b, 0xf2, 0xcc, 0x7d, 0xdf, 0x73, 0xef, 0x0c, 0x6a, 0x05, 0x94,
	0xc3, 0x2f, 0x74, 0xd5, 0x5b, 0xa4, 0x09, 0x4f, 0x48, 0x7d, 0x99, 0x41, 0xea, 0xcf, 0x99, 0xfb,
	0x25, 0xda, 0x7c, 0x91, 0x41, 0x3a, 0x84, 0x21, 0x8d, 0x81, 0x91, 0x03, 0x54, 0x13, 0xbf, 0x13,
	0xe6, 0x18, 0x5d, 0xf3, 0xd0, 0x1e, 0xda, 0xef, 0xfe, 0x7a, 0x7c, 0xcf, 0xab, 0x2d, 0x73, 0xcc,
	0xdd, 0x42, 0xc8, 0x83, 0xf3, 0xe9, 0x32, 0x8a, 0x8e, 0xb3, 0xc0, 0xfd, 0xdd, 0x40, 0x2d, 0x0f,
	0xce, 0x67, 0x90, 0x5e, 0x84, 0x3e, 0x78, 0x10, 0x90, 0x36, 0xb2, 0x9e, 0xc3, 0x2a, 0x57, 0x6d,
	0x2a, 0x55, 0xeb, 0x35, 0xac, 0xc8, 0xe7, 0x08, 0x09, 0x29, 0x48, 0x4f, 0x56, 0x0b, 0x70, 0xcc,
	0xae, 0x79, 0xd8, 0x52, 0xc7, 0x28, 0x5b, 0xe3, 0xa4, 0x8b, 0x1a, 0x52, 0x6a, 0xc2, 0x1c, 0x4b,
	0x93, 0x69, 0x64, 0x0a, 0x25, 0x1d, 0x54, 0x1f, 0x30, 0x96, 0x42, 0x96, 0x39, 0x76, 0xd7, 0x58,
	0xfb, 0xa8, 0x53, 0x09, 0x12, 0x17, 0x35, 0x27, 0x71, 0x21, 0xb1, 0xa1, 0x49, 0x34, 0xc3, 0x02,
	0x76, 0xbf, 0x13, 0x41, 0x73, 0x2d, 0xe8, 0x5d, 0x64, 0xaa, 0x74, 0x0b, 0x87, 0x66, 0xc8, 0x88,
	0x83, 0xea, 0xd3, 0x84, 0xc1, 0x84, 0x65, 0x8e, 0xd9, 0xb5, 0x0e, 0x5b, 0x5e, 0x3d, 0x96, 0xbf,
	0xee, 0xcf, 0xba, 0x81, 0x01, 0x63, 0xb7, 0x18, 0xd0, 0x62, 0x35, 0xb5, 0x7a, 0xac, 0x63, 0x75,
	0x90, 0x9d, 0x57, 0x43, 0xcf, 0xd4, 0xe6, 0xab, 0x05, 0xb8, 0x03, 0x74, 0xbf, 0x74, 0x70, 0x04,
	0xf4, 0x02, 0x6e, 0x8d, 0xd1, 0xbe, 0x56, 0x50, 0x69, 0xe2, 0x1c, 0xed, 0x94, 0x9d, 0x11, 0x79,
	0x88, 0x38, 0x0f, 0x50, 0x4d, 0xa6, 0x54, 0xed, 0xad, 0xcc, 0x4b, 0xeb, 0xbc, 0x79, 0xbd, 0xf3,
	0x77, 0xf7, 0xc6, 0xfd, 0xe1, 0xaa, 0xcb, 0x31, 0x44, 0xff, 0xc5, 0xa5, 0xfb, 0xa7, 0x81, 0xda,
	0xd7, 0x92, 0x18, 0x52, 0xee, 0x9f, 0x91, 0x67, 0x65, 0x73, 0x8c, 0xae, 0x75, 0xb8, 0xd9, 0xef,
	0xf5, 0x14, 0x9f, 0x7b, 0x37, 0x6b, 0xf4, 0x46, 0x67, 0x94, 0xcb, 0x04, 0x04, 0xbc, 0x6e, 0xe6,
	0x7e, 0x8c, 0xb6, 0xab, 0x47, 0x95, 0x4c, 0x8d, 0x1b, 0x59, 0x58, 0x26, 0x65, 0xbe, 0x37, 0x29,
	0xeb, 0xa6, 0xa4, 0x4c, 0xb4, 0xe5, 0xc1, 0xb9, 0x90, 0x38, 0x4a, 0x82, 0x30, 0x7e, 0xff, 0xc0,
	0xe5, 0x24, 0xf2, 0xfd, 0x64, 0x19, 0xf3, 0x2b, 0x24, 0x92, 0xa0, 0x60, 0xc0, 0xc4, 0x4f, 0xe2,
	0x2a, 0x89, 0x42, 0x3f, 0x89, 0xc5, 0x28, 0xce, 0xe0, 0x8d, 0x63, 0x6b, 0x07, 0x56, 0x06, 0x6f,
	0x84, 0xc6, 0x94, 0xce, 0xc1, 0xd9, 0xd0, 0xcc, 0xd9, 0x31, 0x9d, 0xe7, 0x89, 0xff, 0x48, 0xb3,
	0x2c, 0xb7, 0x57, 0xd3, 0x4e, 0x1b, 0x0b, 0x85, 0x0a, 0x89, 0xa3, 0xc4, 0xa7, 0x3c, 0x4c, 0x62,
	0xa7, 0xae, 0x97, 0x26, 0x52, 0xa8, 0xb0, 0x3e, 0x9a, 0x02, 0x77, 0x1a, 0x7a, 0x3c, 0xfe, 0x14,
	0xb8, 0xc8, 0xd3, 0x83, 0x60, 0x0c, 0x17, 0x4e, 0x53, 0xb3, 0x5d, 0x4b, 0x73, 0x4c, 0x0c, 0xee,
	0x28, 0x0a, 0x21, 0xe6, 0xa7, 0x90, 0x3a, 0x48, 0x13, 0x68, 0xfa, 0x05, 0x9c, 0xdb, 0x8e, 0x81,
	0x3b, 0x9b, 0x15, 0xdb, 0x31, 0x70, 0xf7, 0xab, 0x7c, 0x0f, 0xa9, 0x9a, 0x26, 0x4b, 0x7e, 0xc7,
	0x16, 0x7b, 0x6b, 0xa0, 0x5d, 0x45, 0x13, 0x48, 0xfb, 0x62, 0x82, 0xe4, 0xa7, 0x88, 0x22, 0xff,
	0xca, 0x87, 0x4a, 0xef, 0x7d, 0x33, 0x2b, 0xe0, 0x0a, 0x3d, 0xcc, 0x1b, 0xe9, 0xe1, 0x20, 0x7b,
	0x4c, 0x39, 0xcd, 0x7b, 0xb2, 0x55, 0xc4, 0xc9, 0x28, 0xa7, 0xe2, 0xe4, 0x49, 0x44, 0x83, 0x4a,
	0x53, 0xec, 0x57, 0x11, 0x0d, 0xdc, 0x0b, 0x84, 0xcb, 0x88, 0x46, 0x92, 0xe4, 0x18, 0x59, 0x05,
	0xc1, 0x6d, 0xcf, 0x0a, 0x59, 0xb6, 0xb6, 0x6c, 0xde, 0x6a, 0xd9, 0xba, 0x6a, 0x59, 0xd6, 0x7d,
	0x44, 0xa3, 0x28, 0xf7, 0xda, 0x28, 0xeb, 0x2e, 0x30, 0xf7, 0x27, 0x51, 0x09, 0xc5, 0x7e, 0x0f,
	0x7c, 0x1a, 0x45, 0xff, 0xa3, 0x6f, 0xf7, 0x64, 0x9d, 0x55, 0xe8, 0xc3, 0x4b, 0x08, 0x83, 0x33,
	0x2e, 0x18, 0x2d, 0x5a, 0x33, 0x5d, 0xce, 0x2b, 0x15, 0xce, 0xef, 0xa3, 0xe9, 0x72, 0x2e, 0xea,
	0x7b, 0x52, 0x08, 0x98, 0x5d, 0xa3, 0xac, 0x2f, 0x57, 0xa8, 0x4b, 0xe5, 0xa2, 0xe9, 0x8f, 0xa6,
	0x09, 0x0f, 0x7d, 0x90, 0x01, 0x3b, 0xd2, 0x6c, 0x19, 0x74, 0x5d, 0x36, 0xfb, 0xe3, 0x02, 0x7f,
	0x22, 0x03, 0xef, 0x8f, 0x66, 0xab, 0x8c, 0xc3, 0xfc, 0x98, 0x86, 0xd1, 0x47, 0xd9, 0xf9, 0x7e,
	0x4d, 0xcc, 0x21, 0x9c, 0x84, 0xfe, 0xeb, 0x3b, 0xa6, 0xbd, 0x8d, 0xac, 0xa7, 0x93, 0x71, 0x85,
	0x56, 0x56, 0x30, 0x19, 0xbb, 0x5f, 0xab, 0x7b, 0x36, 0x66, 0x32, 0x65, 0x51, 0x24, 0xf9, 0x75,
	0xc5, 0x50, 0x23, 0x56, 0xa8, 0x52, 0xf1, 0x80, 0x7e, 0xb8, 0xca, 0x37, 0x6a, 0x81, 0xc7, 0x6c,
	0xc6, 0x93, 0xc5, 0x07, 0xab, 0xfd, 0x66, 0xa0, 0x6d, 0x0f, 0xce, 0x9f, 0x71, 0xbe, 0x18, 0xa4,
	0x81, 0x28, 0x11, 0xe9, 0x23, 0x7b, 0x90, 0x06, 0xc5, 0x6e, 0xee, 0xe8, 0xbb, 0x59, 0x13, 0xeb,
	0x3d, 0x87, 0xd5, 0x29, 0x8d, 0x3c, 0x9b, 0xa6, 0x41, 0x26, 0x72, 0x1f, 0xcd, 0xab, 0x23, 0x65,
	0xf9, 0x73, 0xb6, 0xff, 0x2d, 0xaa, 0x49, 0xb9, 0x5b, 0x1f, 0x17, 0x6d, 0x64, 0x9d, 0xd2, 0xa8,
	0xb2, 0x1f, 0xad, 0x0b, 0x1a, 0x7d, 0xf1, 0xeb, 0x06, 0x42, 0x4f, 0xe5, 0xa3, 0x67, 0x34, 0x67,
	0x64, 0x5b, 0xbe, 0x41, 0xe4, 0xa5, 0x8f, 0x0d, 0x82, 0xd1, 0xd6, 0xfa, 0x9f, 0xb2, 0x15, 0x36,
	0x35, 0x89, 0x01, 0x63, 0xd8, 0xd2, 0x24, 0xf2, 0x4b, 0x18, 0xdb, 0x84, 0xa0, 0xed, 0xea, 0xe5,
	0x82, 0x37, 0xae, 0x60, 0x63, 0x88, 0x70, 0x8d, 0xec, 0xa0, 0x56, 0x31, 0xcb, 0xf9, 0xfa, 0xc2,
	0x75, 0x01, 0xc9, 0xef, 0xbe, 0x3c, 0xc1, 0x0d, 0x4d, 0x4a, 0x41, 0x4d, 0xf2, 0x08, 0xed, 0x55,
	0xa0, 0x97, 0x21, 0x3f, 0x13, 0x84, 0xc1, 0x88, 0xec, 0xa1, 0x1d, 0x75, 0x24, 0x00, 0xa5, 0xb1,
	0xa9, 0xbb, 0xca, 0x27, 0x01, 0x6f, 0x15, 0x71, 0x17, 0x13, 0x8d, 0x5b, 0xa5, 0xae, 0x36, 0xe3,
	0x78, 0x9b, 0xb4, 0x50, 0x73, 0x7d, 0x11, 0xe1, 0xfb, 0x22, 0xff, 0x72, 0x87, 0x62, 0xac, 0x65,
	0x36, 0x5b, 0xc5, 0xfe, 0x71, 0x16, 0xe0, 0x9d, 0xc2, 0xdd, 0x7a, 0x9e, 0x31, 0x21, 0x0f, 0xd1,
	0x83, 0x1b, 0x6e, 0x5c, 0xfc, 0x80, 0x6c, 0xa2, 0xfa, 0xac, 0x3f, 0x1b, 0x42, 0xc6, 0xf1, 0xae,
	0xf0, 0xb5, 0x1e, 0x59, 0xbc, 0x27, 0x6b, 0x5d, 0xf0, 0x19, 0xb7, 0x73, 0x5f, 0x95, 0x89, 0xc6,
	0x0f, 0x8b, 0x78, 0xe4, 0xe8, 0x60, 0x47, 0xc6, 0xa3, 0xb3, 0x13, 0x3f, 0x12, 0x32, 0x03, 0xdf,
	0x57, 0xaf, 0x57, 0xbc, 0x2f, 0xfe, 0x4b, 0xd2, 0xe3, 0x4f, 0x84, 0xce, 0x31, 0x0d, 0x63, 0x4e,
	0xc3, 0x58, 0x61, 0x07, 0x5a, 0x25, 0x07, 0x51, 0x24, 0x9b, 0x92, 0xe1, 0x4f, 0x49, 0x1b, 0x91,
	0x17, 0x0b, 0x46, 0xb9, 0xba, 0x0d, 0xbc, 0x24, 0x99, 0x87, 0x0c, 0x77, 0x34, 0xf1, 0x13, 0xa0,
	0x73, 0xd5, 0xd0, 0xc7, 0x42, 0x7c, 0xa6, 0xba, 0x24, 0xd5, 0x26, 0xf1, 0xab, 0x04, 0x77, 0xf3,
	0x0a, 0xe9, 0x8b, 0x03, 0x7f, 0x36, 0xc4, 0xef, 0x2e, 0x3b, 0xc6, 0x1f, 0x97, 0x1d, 0xe3, 0xef,
	0xcb, 0x8e, 0xf1, 0xf6, 0x9f, 0xce, 0xbd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x14, 0x50, 0x8e,
	0x49, 0x8e, 0x0b, 0x00, 0x00,
}
