// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		server.proto

	It has these top-level messages:
		ReqUpdateBanLimit
		ReqServerLogin
		RetServerLogin
		ReqTSerUserNum
		ReqCheckRelogin
		S2SClientCmd
		S2SCmd
		S2STypeCmd
		ReqInviteList
		ReqDelTeamList
		ReqLeaderDoInv
		ReqLChangeName
		ReqLStartGame
		ReqLJoinTeam
		ReqLInviteGame
		ReqMemInvite
		ReqAddRoom
		ReqRemoveRoom
		ReqUpdateRoom
		ReqEndGame
		ReqUpdateServer
		ReqUpdateWathcerNum
		ReqLoadConfig
		ReqGetMLevel
		RetUpdateMLevel
		RetUpdateTMatchs
		ReqTRoomTeamList
		ReqTRoomInvite
		ReqTDoRoomInvite
		ReqTRChgName
		ReqTChangeTeam
		ReqTSetTeamName
		ReqTJoinTRoom
		ReqTDoDelUser
		ReqTJoinTTRoom
		GameRoomInfo
		WatcherServerInfo
		AddNewWatcherServerReq
		ReqMgrLogin
		RetMgrLogin
		ReqMgrAdd
		RetMgrAdd
		ReqMgrOtherLogin
		RetMgrOtherLogin
		ReqMaintainNotice
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CmdType int32

const (
	CmdType_Login               CmdType = 1
	CmdType_TSerUserNum         CmdType = 2
	CmdType_ChkReLogin          CmdType = 3
	CmdType_S2S                 CmdType = 6
	CmdType_InviteList          CmdType = 8
	CmdType_DelTeamList         CmdType = 9
	CmdType_DoTeamInv           CmdType = 10
	CmdType_LChangeName         CmdType = 11
	CmdType_LStartGame          CmdType = 12
	CmdType_LJoinTeam           CmdType = 13
	CmdType_LInviteGame         CmdType = 14
	CmdType_TSendNotice         CmdType = 15
	CmdType_MemInvite           CmdType = 16
	CmdType_AddRoom             CmdType = 17
	CmdType_RemoveRoom          CmdType = 18
	CmdType_UpdateRoom          CmdType = 19
	CmdType_EndGame             CmdType = 20
	CmdType_UpdateServer        CmdType = 21
	CmdType_LoadConfig          CmdType = 22
	CmdType_GetMLevel           CmdType = 23
	CmdType_UpdateMLevel        CmdType = 24
	CmdType_UpdateTMatchs       CmdType = 25
	CmdType_TRoomTeamList       CmdType = 26
	CmdType_TRoomInvite         CmdType = 27
	CmdType_TDoRoomInvite       CmdType = 28
	CmdType_TRChgName           CmdType = 29
	CmdType_TChangeTeam         CmdType = 30
	CmdType_TSetTeamName        CmdType = 31
	CmdType_TJoinTRoom          CmdType = 32
	CmdType_TDoDelUser          CmdType = 33
	CmdType_TJoinTTRoom         CmdType = 34
	CmdType_WatcherServerReg    CmdType = 100
	CmdType_AddWatcherServer    CmdType = 101
	CmdType_WatcherRoomEnd      CmdType = 102
	CmdType_UpdateBanLimit      CmdType = 103
	CmdType_UpdateBanBarrageTTL CmdType = 104
	CmdType_UpdateWathcerNum    CmdType = 105
	CmdType_MgrLogin            CmdType = 201
	CmdType_MgrAdd              CmdType = 202
	CmdType_MgrOtherLogin       CmdType = 203
)

var CmdType_name = map[int32]string{
	1:   "Login",
	2:   "TSerUserNum",
	3:   "ChkReLogin",
	6:   "S2S",
	8:   "InviteList",
	9:   "DelTeamList",
	10:  "DoTeamInv",
	11:  "LChangeName",
	12:  "LStartGame",
	13:  "LJoinTeam",
	14:  "LInviteGame",
	15:  "TSendNotice",
	16:  "MemInvite",
	17:  "AddRoom",
	18:  "RemoveRoom",
	19:  "UpdateRoom",
	20:  "EndGame",
	21:  "UpdateServer",
	22:  "LoadConfig",
	23:  "GetMLevel",
	24:  "UpdateMLevel",
	25:  "UpdateTMatchs",
	26:  "TRoomTeamList",
	27:  "TRoomInvite",
	28:  "TDoRoomInvite",
	29:  "TRChgName",
	30:  "TChangeTeam",
	31:  "TSetTeamName",
	32:  "TJoinTRoom",
	33:  "TDoDelUser",
	34:  "TJoinTTRoom",
	100: "WatcherServerReg",
	101: "AddWatcherServer",
	102: "WatcherRoomEnd",
	103: "UpdateBanLimit",
	104: "UpdateBanBarrageTTL",
	105: "UpdateWathcerNum",
	201: "MgrLogin",
	202: "MgrAdd",
	203: "MgrOtherLogin",
}
var CmdType_value = map[string]int32{
	"Login":               1,
	"TSerUserNum":         2,
	"ChkReLogin":          3,
	"S2S":                 6,
	"InviteList":          8,
	"DelTeamList":         9,
	"DoTeamInv":           10,
	"LChangeName":         11,
	"LStartGame":          12,
	"LJoinTeam":           13,
	"LInviteGame":         14,
	"TSendNotice":         15,
	"MemInvite":           16,
	"AddRoom":             17,
	"RemoveRoom":          18,
	"UpdateRoom":          19,
	"EndGame":             20,
	"UpdateServer":        21,
	"LoadConfig":          22,
	"GetMLevel":           23,
	"UpdateMLevel":        24,
	"UpdateTMatchs":       25,
	"TRoomTeamList":       26,
	"TRoomInvite":         27,
	"TDoRoomInvite":       28,
	"TRChgName":           29,
	"TChangeTeam":         30,
	"TSetTeamName":        31,
	"TJoinTRoom":          32,
	"TDoDelUser":          33,
	"TJoinTTRoom":         34,
	"WatcherServerReg":    100,
	"AddWatcherServer":    101,
	"WatcherRoomEnd":      102,
	"UpdateBanLimit":      103,
	"UpdateBanBarrageTTL": 104,
	"UpdateWathcerNum":    105,
	"MgrLogin":            201,
	"MgrAdd":              202,
	"MgrOtherLogin":       203,
}

func (x CmdType) Enum() *CmdType {
	p := new(CmdType)
	*p = x
	return p
}
func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}
func (x *CmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CmdType_value, data, "CmdType")
	if err != nil {
		return err
	}
	*x = CmdType(value)
	return nil
}
func (CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

type ReqUpdateBanLimit struct {
	BanLimit int32 `protobuf:"varint,1,req,name=BanLimit,json=banLimit" json:"BanLimit"`
}

func (m *ReqUpdateBanLimit) Reset()                    { *m = ReqUpdateBanLimit{} }
func (m *ReqUpdateBanLimit) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateBanLimit) ProtoMessage()               {}
func (*ReqUpdateBanLimit) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

func (m *ReqUpdateBanLimit) GetBanLimit() int32 {
	if m != nil {
		return m.BanLimit
	}
	return 0
}

// 服务器间连接验证
type ReqServerLogin struct {
	Address  string `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	Key      string `protobuf:"bytes,2,req,name=Key,json=key" json:"Key"`
	SerType  uint32 `protobuf:"varint,3,req,name=SerType,json=serType" json:"SerType"`
	WAddress string `protobuf:"bytes,4,opt,name=WAddress,json=wAddress" json:"WAddress"`
}

func (m *ReqServerLogin) Reset()                    { *m = ReqServerLogin{} }
func (m *ReqServerLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqServerLogin) ProtoMessage()               {}
func (*ReqServerLogin) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{1} }

func (m *ReqServerLogin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqServerLogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqServerLogin) GetSerType() uint32 {
	if m != nil {
		return m.SerType
	}
	return 0
}

func (m *ReqServerLogin) GetWAddress() string {
	if m != nil {
		return m.WAddress
	}
	return ""
}

// 返回验证结果和id
type RetServerLogin struct {
	Id uint32 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
}

func (m *RetServerLogin) Reset()                    { *m = RetServerLogin{} }
func (m *RetServerLogin) String() string            { return proto.CompactTextString(m) }
func (*RetServerLogin) ProtoMessage()               {}
func (*RetServerLogin) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{2} }

func (m *RetServerLogin) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 更新组队人数
type ReqTSerUserNum struct {
	UserNum  uint32 `protobuf:"varint,1,req,name=UserNum,json=userNum" json:"UserNum"`
	TUserNum uint32 `protobuf:"varint,2,req,name=TUserNum,json=tUserNum" json:"TUserNum"`
}

func (m *ReqTSerUserNum) Reset()                    { *m = ReqTSerUserNum{} }
func (m *ReqTSerUserNum) String() string            { return proto.CompactTextString(m) }
func (*ReqTSerUserNum) ProtoMessage()               {}
func (*ReqTSerUserNum) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{3} }

func (m *ReqTSerUserNum) GetUserNum() uint32 {
	if m != nil {
		return m.UserNum
	}
	return 0
}

func (m *ReqTSerUserNum) GetTUserNum() uint32 {
	if m != nil {
		return m.TUserNum
	}
	return 0
}

// 重复登录检查
type ReqCheckRelogin struct {
	Key string `protobuf:"bytes,1,req,name=Key,json=key" json:"Key"`
	Id  uint64 `protobuf:"varint,2,req,name=Id,json=id" json:"Id"`
}

func (m *ReqCheckRelogin) Reset()                    { *m = ReqCheckRelogin{} }
func (m *ReqCheckRelogin) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckRelogin) ProtoMessage()               {}
func (*ReqCheckRelogin) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{4} }

func (m *ReqCheckRelogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqCheckRelogin) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 转发给其它服的客户端
type S2SClientCmd struct {
	ServerId uint32 `protobuf:"varint,1,req,name=ServerId,json=serverId" json:"ServerId"`
	UserId   uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	Flag     uint32 `protobuf:"varint,3,req,name=Flag,json=flag" json:"Flag"`
	Data     []byte `protobuf:"bytes,4,req,name=Data,json=data" json:"Data"`
}

func (m *S2SClientCmd) Reset()                    { *m = S2SClientCmd{} }
func (m *S2SClientCmd) String() string            { return proto.CompactTextString(m) }
func (*S2SClientCmd) ProtoMessage()               {}
func (*S2SClientCmd) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{5} }

func (m *S2SClientCmd) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *S2SClientCmd) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *S2SClientCmd) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *S2SClientCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 转发给其它服
type S2SCmd struct {
	ServerId uint32 `protobuf:"varint,1,req,name=ServerId,json=serverId" json:"ServerId"`
	Flag     uint32 `protobuf:"varint,2,req,name=Flag,json=flag" json:"Flag"`
	Data     []byte `protobuf:"bytes,3,req,name=Data,json=data" json:"Data"`
}

func (m *S2SCmd) Reset()                    { *m = S2SCmd{} }
func (m *S2SCmd) String() string            { return proto.CompactTextString(m) }
func (*S2SCmd) ProtoMessage()               {}
func (*S2SCmd) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{6} }

func (m *S2SCmd) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *S2SCmd) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *S2SCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 转发给其它服
type S2STypeCmd struct {
	Type uint32 `protobuf:"varint,1,req,name=Type,json=type" json:"Type"`
	Flag uint32 `protobuf:"varint,2,req,name=Flag,json=flag" json:"Flag"`
	Data []byte `protobuf:"bytes,3,req,name=Data,json=data" json:"Data"`
}

func (m *S2STypeCmd) Reset()                    { *m = S2STypeCmd{} }
func (m *S2STypeCmd) String() string            { return proto.CompactTextString(m) }
func (*S2STypeCmd) ProtoMessage()               {}
func (*S2STypeCmd) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{7} }

func (m *S2STypeCmd) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *S2STypeCmd) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *S2STypeCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 队伍列表
type ReqInviteList struct {
	UserId   uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	LeaderId uint64 `protobuf:"varint,2,req,name=LeaderId,json=leaderId" json:"LeaderId"`
}

func (m *ReqInviteList) Reset()                    { *m = ReqInviteList{} }
func (m *ReqInviteList) String() string            { return proto.CompactTextString(m) }
func (*ReqInviteList) ProtoMessage()               {}
func (*ReqInviteList) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{8} }

func (m *ReqInviteList) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqInviteList) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

// 从队伍中删除
type ReqDelTeamList struct {
	UserId   uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	LeaderId uint64 `protobuf:"varint,2,req,name=LeaderId,json=leaderId" json:"LeaderId"`
}

func (m *ReqDelTeamList) Reset()                    { *m = ReqDelTeamList{} }
func (m *ReqDelTeamList) String() string            { return proto.CompactTextString(m) }
func (*ReqDelTeamList) ProtoMessage()               {}
func (*ReqDelTeamList) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{9} }

func (m *ReqDelTeamList) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDelTeamList) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

// 队长处理邀请
type ReqLeaderDoInv struct {
	UserId   uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	UserName string `protobuf:"bytes,2,req,name=UserName,json=userName" json:"UserName"`
	LeaderId uint64 `protobuf:"varint,3,req,name=LeaderId,json=leaderId" json:"LeaderId"`
	Options  uint32 `protobuf:"varint,4,req,name=Options,json=options" json:"Options"`
	IsNewbie bool   `protobuf:"varint,5,req,name=IsNewbie,json=isNewbie" json:"IsNewbie"`
	InvType  uint32 `protobuf:"varint,8,req,name=InvType,json=invType" json:"InvType"`
	QrCode   string `protobuf:"bytes,9,req,name=QrCode,json=qrCode" json:"QrCode"`
	CNet     uint32 `protobuf:"varint,10,req,name=CNet,json=cNet" json:"CNet"`
}

func (m *ReqLeaderDoInv) Reset()                    { *m = ReqLeaderDoInv{} }
func (m *ReqLeaderDoInv) String() string            { return proto.CompactTextString(m) }
func (*ReqLeaderDoInv) ProtoMessage()               {}
func (*ReqLeaderDoInv) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{10} }

func (m *ReqLeaderDoInv) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLeaderDoInv) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqLeaderDoInv) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *ReqLeaderDoInv) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

func (m *ReqLeaderDoInv) GetIsNewbie() bool {
	if m != nil {
		return m.IsNewbie
	}
	return false
}

func (m *ReqLeaderDoInv) GetInvType() uint32 {
	if m != nil {
		return m.InvType
	}
	return 0
}

func (m *ReqLeaderDoInv) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *ReqLeaderDoInv) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

// 玩家改名
type ReqLChangeName struct {
	UserId   uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	UserName string `protobuf:"bytes,2,req,name=UserName,json=userName" json:"UserName"`
	LeaderId uint64 `protobuf:"varint,3,req,name=LeaderId,json=leaderId" json:"LeaderId"`
}

func (m *ReqLChangeName) Reset()                    { *m = ReqLChangeName{} }
func (m *ReqLChangeName) String() string            { return proto.CompactTextString(m) }
func (*ReqLChangeName) ProtoMessage()               {}
func (*ReqLChangeName) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{11} }

func (m *ReqLChangeName) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLChangeName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqLChangeName) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

// 加入游戏
type ReqLStartGame struct {
	UserId   uint64                   `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	City     uint32                   `protobuf:"varint,2,req,name=City,json=city" json:"City"`
	CNet     uint32                   `protobuf:"varint,3,req,name=CNet,json=cNet" json:"CNet"`
	MemIds   []*ReqLStartGame_MemData `protobuf:"bytes,4,rep,name=MemIds,json=memIds" json:"MemIds,omitempty"`
	InvIds   []*ReqLStartGame_InvData `protobuf:"bytes,5,rep,name=InvIds,json=invIds" json:"InvIds,omitempty"`
	THScores uint32                   `protobuf:"varint,6,req,name=THScores,json=tHScores" json:"THScores"`
}

func (m *ReqLStartGame) Reset()                    { *m = ReqLStartGame{} }
func (m *ReqLStartGame) String() string            { return proto.CompactTextString(m) }
func (*ReqLStartGame) ProtoMessage()               {}
func (*ReqLStartGame) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{12} }

func (m *ReqLStartGame) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLStartGame) GetCity() uint32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *ReqLStartGame) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

func (m *ReqLStartGame) GetMemIds() []*ReqLStartGame_MemData {
	if m != nil {
		return m.MemIds
	}
	return nil
}

func (m *ReqLStartGame) GetInvIds() []*ReqLStartGame_InvData {
	if m != nil {
		return m.InvIds
	}
	return nil
}

func (m *ReqLStartGame) GetTHScores() uint32 {
	if m != nil {
		return m.THScores
	}
	return 0
}

type ReqLStartGame_MemData struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	IsNewbie bool   `protobuf:"varint,2,req,name=IsNewbie,json=isNewbie" json:"IsNewbie"`
	CNet     uint32 `protobuf:"varint,3,req,name=CNet,json=cNet" json:"CNet"`
}

func (m *ReqLStartGame_MemData) Reset()                    { *m = ReqLStartGame_MemData{} }
func (m *ReqLStartGame_MemData) String() string            { return proto.CompactTextString(m) }
func (*ReqLStartGame_MemData) ProtoMessage()               {}
func (*ReqLStartGame_MemData) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{12, 0} }

func (m *ReqLStartGame_MemData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqLStartGame_MemData) GetIsNewbie() bool {
	if m != nil {
		return m.IsNewbie
	}
	return false
}

func (m *ReqLStartGame_MemData) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

type ReqLStartGame_InvData struct {
	Id   uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Time uint32 `protobuf:"varint,2,req,name=Time,json=time" json:"Time"`
}

func (m *ReqLStartGame_InvData) Reset()                    { *m = ReqLStartGame_InvData{} }
func (m *ReqLStartGame_InvData) String() string            { return proto.CompactTextString(m) }
func (*ReqLStartGame_InvData) ProtoMessage()               {}
func (*ReqLStartGame_InvData) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{12, 1} }

func (m *ReqLStartGame_InvData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqLStartGame_InvData) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 加入队伍
type ReqLJoinTeam struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	RoomId uint32 `protobuf:"varint,2,req,name=RoomId,json=roomId" json:"RoomId"`
	CNet   uint32 `protobuf:"varint,3,req,name=CNet,json=cNet" json:"CNet"`
}

func (m *ReqLJoinTeam) Reset()                    { *m = ReqLJoinTeam{} }
func (m *ReqLJoinTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqLJoinTeam) ProtoMessage()               {}
func (*ReqLJoinTeam) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{13} }

func (m *ReqLJoinTeam) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLJoinTeam) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ReqLJoinTeam) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

// 邀请加入游戏
type ReqLInviteGame struct {
	UserId   uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	CNet     uint32 `protobuf:"varint,2,req,name=CNet,json=cNet" json:"CNet"`
	RoomId   uint32 `protobuf:"varint,3,req,name=RoomId,json=roomId" json:"RoomId"`
	TeamId   uint32 `protobuf:"varint,4,req,name=TeamId,json=teamId" json:"TeamId"`
	IsNewbie bool   `protobuf:"varint,5,req,name=IsNewbie,json=isNewbie" json:"IsNewbie"`
}

func (m *ReqLInviteGame) Reset()                    { *m = ReqLInviteGame{} }
func (m *ReqLInviteGame) String() string            { return proto.CompactTextString(m) }
func (*ReqLInviteGame) ProtoMessage()               {}
func (*ReqLInviteGame) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{14} }

func (m *ReqLInviteGame) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLInviteGame) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

func (m *ReqLInviteGame) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ReqLInviteGame) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *ReqLInviteGame) GetIsNewbie() bool {
	if m != nil {
		return m.IsNewbie
	}
	return false
}

// 成员发送邀请
type ReqMemInvite struct {
	LeaderId uint64   `protobuf:"varint,1,req,name=LeaderId,json=leaderId" json:"LeaderId"`
	InvId    uint64   `protobuf:"varint,2,req,name=InvId,json=invId" json:"InvId"`
	InvType  uint32   `protobuf:"varint,8,req,name=InvType,json=invType" json:"InvType"`
	FIds     []uint64 `protobuf:"varint,9,rep,name=FIds,json=fIds" json:"FIds,omitempty"`
}

func (m *ReqMemInvite) Reset()                    { *m = ReqMemInvite{} }
func (m *ReqMemInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqMemInvite) ProtoMessage()               {}
func (*ReqMemInvite) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{15} }

func (m *ReqMemInvite) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *ReqMemInvite) GetInvId() uint64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *ReqMemInvite) GetInvType() uint32 {
	if m != nil {
		return m.InvType
	}
	return 0
}

func (m *ReqMemInvite) GetFIds() []uint64 {
	if m != nil {
		return m.FIds
	}
	return nil
}

// 添加房间
type ReqAddRoom struct {
	RoomType uint32 `protobuf:"varint,1,req,name=RoomType,json=roomType" json:"RoomType"`
	RoomId   uint32 `protobuf:"varint,2,req,name=RoomId,json=roomId" json:"RoomId"`
	EndTime  uint32 `protobuf:"varint,3,req,name=EndTime,json=endTime" json:"EndTime"`
	IsCoop   bool   `protobuf:"varint,4,req,name=IsCoop,json=isCoop" json:"IsCoop"`
	HScores  uint32 `protobuf:"varint,5,req,name=HScores,json=hScores" json:"HScores"`
	UnCoop   uint32 `protobuf:"varint,6,req,name=UnCoop,json=unCoop" json:"UnCoop"`
	Robot    uint32 `protobuf:"varint,7,opt,name=Robot,json=robot" json:"Robot"`
	IsNew    bool   `protobuf:"varint,8,opt,name=isNew" json:"isNew"`
	SceneId  uint32 `protobuf:"varint,9,opt,name=SceneId,json=sceneId" json:"SceneId"`
	Level    uint32 `protobuf:"varint,10,opt,name=Level,json=level" json:"Level"`
}

func (m *ReqAddRoom) Reset()                    { *m = ReqAddRoom{} }
func (m *ReqAddRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqAddRoom) ProtoMessage()               {}
func (*ReqAddRoom) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{16} }

func (m *ReqAddRoom) GetRoomType() uint32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *ReqAddRoom) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ReqAddRoom) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ReqAddRoom) GetIsCoop() bool {
	if m != nil {
		return m.IsCoop
	}
	return false
}

func (m *ReqAddRoom) GetHScores() uint32 {
	if m != nil {
		return m.HScores
	}
	return 0
}

func (m *ReqAddRoom) GetUnCoop() uint32 {
	if m != nil {
		return m.UnCoop
	}
	return 0
}

func (m *ReqAddRoom) GetRobot() uint32 {
	if m != nil {
		return m.Robot
	}
	return 0
}

func (m *ReqAddRoom) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

func (m *ReqAddRoom) GetSceneId() uint32 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

func (m *ReqAddRoom) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

// 删除房间
type ReqRemoveRoom struct {
	RoomType uint32 `protobuf:"varint,1,req,name=RoomType,json=roomType" json:"RoomType"`
	RoomId   uint32 `protobuf:"varint,2,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *ReqRemoveRoom) Reset()                    { *m = ReqRemoveRoom{} }
func (m *ReqRemoveRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqRemoveRoom) ProtoMessage()               {}
func (*ReqRemoveRoom) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{17} }

func (m *ReqRemoveRoom) GetRoomType() uint32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *ReqRemoveRoom) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 更新房间
type ReqUpdateRoom struct {
	RoomType uint32 `protobuf:"varint,1,req,name=RoomType,json=roomType" json:"RoomType"`
	RoomId   uint32 `protobuf:"varint,2,req,name=RoomId,json=roomId" json:"RoomId"`
	UserNum  int32  `protobuf:"varint,3,req,name=UserNum,json=userNum" json:"UserNum"`
	UState   int32  `protobuf:"varint,4,req,name=UState,json=uState" json:"UState"`
	IsCoop   bool   `protobuf:"varint,5,req,name=IsCoop,json=isCoop" json:"IsCoop"`
	HScores  uint32 `protobuf:"varint,6,req,name=HScores,json=hScores" json:"HScores"`
	Robot    uint32 `protobuf:"varint,7,opt,name=Robot,json=robot" json:"Robot"`
}

func (m *ReqUpdateRoom) Reset()                    { *m = ReqUpdateRoom{} }
func (m *ReqUpdateRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateRoom) ProtoMessage()               {}
func (*ReqUpdateRoom) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{18} }

func (m *ReqUpdateRoom) GetRoomType() uint32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *ReqUpdateRoom) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ReqUpdateRoom) GetUserNum() int32 {
	if m != nil {
		return m.UserNum
	}
	return 0
}

func (m *ReqUpdateRoom) GetUState() int32 {
	if m != nil {
		return m.UState
	}
	return 0
}

func (m *ReqUpdateRoom) GetIsCoop() bool {
	if m != nil {
		return m.IsCoop
	}
	return false
}

func (m *ReqUpdateRoom) GetHScores() uint32 {
	if m != nil {
		return m.HScores
	}
	return 0
}

func (m *ReqUpdateRoom) GetRobot() uint32 {
	if m != nil {
		return m.Robot
	}
	return 0
}

// 结束闪电战
type ReqEndGame struct {
	RoomId uint32 `protobuf:"varint,1,req,name=RoomId,json=roomId" json:"RoomId"`
	UserId uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
}

func (m *ReqEndGame) Reset()                    { *m = ReqEndGame{} }
func (m *ReqEndGame) String() string            { return proto.CompactTextString(m) }
func (*ReqEndGame) ProtoMessage()               {}
func (*ReqEndGame) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{19} }

func (m *ReqEndGame) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ReqEndGame) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 更新人数
type ReqUpdateServer struct {
	RoomNum    uint32 `protobuf:"varint,1,req,name=RoomNum,json=roomNum" json:"RoomNum"`
	UserNum    uint32 `protobuf:"varint,2,req,name=UserNum,json=userNum" json:"UserNum"`
	WatchedId  uint64 `protobuf:"varint,3,opt,name=WatchedId,json=watchedId" json:"WatchedId"`
	WatcherNum uint32 `protobuf:"varint,4,opt,name=WatcherNum,json=watcherNum" json:"WatcherNum"`
	RoomId     uint32 `protobuf:"varint,5,opt,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *ReqUpdateServer) Reset()                    { *m = ReqUpdateServer{} }
func (m *ReqUpdateServer) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateServer) ProtoMessage()               {}
func (*ReqUpdateServer) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{20} }

func (m *ReqUpdateServer) GetRoomNum() uint32 {
	if m != nil {
		return m.RoomNum
	}
	return 0
}

func (m *ReqUpdateServer) GetUserNum() uint32 {
	if m != nil {
		return m.UserNum
	}
	return 0
}

func (m *ReqUpdateServer) GetWatchedId() uint64 {
	if m != nil {
		return m.WatchedId
	}
	return 0
}

func (m *ReqUpdateServer) GetWatcherNum() uint32 {
	if m != nil {
		return m.WatcherNum
	}
	return 0
}

func (m *ReqUpdateServer) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 更新观战人数限制
type ReqUpdateWathcerNum struct {
	Num int32 `protobuf:"varint,1,req,name=Num,json=num" json:"Num"`
}

func (m *ReqUpdateWathcerNum) Reset()                    { *m = ReqUpdateWathcerNum{} }
func (m *ReqUpdateWathcerNum) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateWathcerNum) ProtoMessage()               {}
func (*ReqUpdateWathcerNum) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{21} }

func (m *ReqUpdateWathcerNum) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 加载配置
type ReqLoadConfig struct {
}

func (m *ReqLoadConfig) Reset()                    { *m = ReqLoadConfig{} }
func (m *ReqLoadConfig) String() string            { return proto.CompactTextString(m) }
func (*ReqLoadConfig) ProtoMessage()               {}
func (*ReqLoadConfig) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{22} }

// 请求更新匹配规则
type ReqGetMLevel struct {
	ServerId uint32 `protobuf:"varint,1,req,name=ServerId,json=serverId" json:"ServerId"`
}

func (m *ReqGetMLevel) Reset()                    { *m = ReqGetMLevel{} }
func (m *ReqGetMLevel) String() string            { return proto.CompactTextString(m) }
func (*ReqGetMLevel) ProtoMessage()               {}
func (*ReqGetMLevel) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{23} }

func (m *ReqGetMLevel) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

// 返回更新匹配规则
type RetUpdateMLevel struct {
	ServerId uint32                       `protobuf:"varint,1,req,name=ServerId,json=serverId" json:"ServerId"`
	Datas    []*RetUpdateMLevel_LeveLData `protobuf:"bytes,2,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *RetUpdateMLevel) Reset()                    { *m = RetUpdateMLevel{} }
func (m *RetUpdateMLevel) String() string            { return proto.CompactTextString(m) }
func (*RetUpdateMLevel) ProtoMessage()               {}
func (*RetUpdateMLevel) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{24} }

func (m *RetUpdateMLevel) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *RetUpdateMLevel) GetDatas() []*RetUpdateMLevel_LeveLData {
	if m != nil {
		return m.Datas
	}
	return nil
}

type RetUpdateMLevel_LeveLData struct {
	Level   uint32 `protobuf:"varint,1,req,name=Level,json=level" json:"Level"`
	UserNum uint32 `protobuf:"varint,2,req,name=UserNum,json=userNum" json:"UserNum"`
}

func (m *RetUpdateMLevel_LeveLData) Reset()         { *m = RetUpdateMLevel_LeveLData{} }
func (m *RetUpdateMLevel_LeveLData) String() string { return proto.CompactTextString(m) }
func (*RetUpdateMLevel_LeveLData) ProtoMessage()    {}
func (*RetUpdateMLevel_LeveLData) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{24, 0}
}

func (m *RetUpdateMLevel_LeveLData) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetUpdateMLevel_LeveLData) GetUserNum() uint32 {
	if m != nil {
		return m.UserNum
	}
	return 0
}

// 更新配置表
type RetUpdateTMatchs struct {
	TotalNum uint32                         `protobuf:"varint,1,req,name=TotalNum,json=totalNum" json:"TotalNum"`
	Datas    []*RetUpdateTMatchs_TMatchData `protobuf:"bytes,2,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *RetUpdateTMatchs) Reset()                    { *m = RetUpdateTMatchs{} }
func (m *RetUpdateTMatchs) String() string            { return proto.CompactTextString(m) }
func (*RetUpdateTMatchs) ProtoMessage()               {}
func (*RetUpdateTMatchs) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{25} }

func (m *RetUpdateTMatchs) GetTotalNum() uint32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *RetUpdateTMatchs) GetDatas() []*RetUpdateTMatchs_TMatchData {
	if m != nil {
		return m.Datas
	}
	return nil
}

type RetUpdateTMatchs_TMatchData struct {
	MinLevel uint32 `protobuf:"varint,1,req,name=MinLevel,json=minLevel" json:"MinLevel"`
	MaxLevel uint32 `protobuf:"varint,2,req,name=MaxLevel,json=maxLevel" json:"MaxLevel"`
}

func (m *RetUpdateTMatchs_TMatchData) Reset()         { *m = RetUpdateTMatchs_TMatchData{} }
func (m *RetUpdateTMatchs_TMatchData) String() string { return proto.CompactTextString(m) }
func (*RetUpdateTMatchs_TMatchData) ProtoMessage()    {}
func (*RetUpdateTMatchs_TMatchData) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{25, 0}
}

func (m *RetUpdateTMatchs_TMatchData) GetMinLevel() uint32 {
	if m != nil {
		return m.MinLevel
	}
	return 0
}

func (m *RetUpdateTMatchs_TMatchData) GetMaxLevel() uint32 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

// 房间队伍列表
type ReqTRoomTeamList struct {
	OwnerId uint64 `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId  uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
}

func (m *ReqTRoomTeamList) Reset()                    { *m = ReqTRoomTeamList{} }
func (m *ReqTRoomTeamList) String() string            { return proto.CompactTextString(m) }
func (*ReqTRoomTeamList) ProtoMessage()               {}
func (*ReqTRoomTeamList) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{26} }

func (m *ReqTRoomTeamList) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTRoomTeamList) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 房间邀请
type ReqTRoomInvite struct {
	OwnerId uint64   `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId  uint64   `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	UIds    []uint64 `protobuf:"varint,3,rep,name=UIds,json=uIds" json:"UIds,omitempty"`
	InvType uint32   `protobuf:"varint,4,req,name=InvType,json=invType" json:"InvType"`
}

func (m *ReqTRoomInvite) Reset()                    { *m = ReqTRoomInvite{} }
func (m *ReqTRoomInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqTRoomInvite) ProtoMessage()               {}
func (*ReqTRoomInvite) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{27} }

func (m *ReqTRoomInvite) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTRoomInvite) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqTRoomInvite) GetUIds() []uint64 {
	if m != nil {
		return m.UIds
	}
	return nil
}

func (m *ReqTRoomInvite) GetInvType() uint32 {
	if m != nil {
		return m.InvType
	}
	return 0
}

// 处理房间邀请
type ReqTDoRoomInvite struct {
	OwnerId  uint64 `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId   uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	UserName string `protobuf:"bytes,3,req,name=UserName,json=userName" json:"UserName"`
	Options  uint32 `protobuf:"varint,4,req,name=Options,json=options" json:"Options"`
	CNet     uint32 `protobuf:"varint,5,req,name=CNet,json=cNet" json:"CNet"`
}

func (m *ReqTDoRoomInvite) Reset()                    { *m = ReqTDoRoomInvite{} }
func (m *ReqTDoRoomInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqTDoRoomInvite) ProtoMessage()               {}
func (*ReqTDoRoomInvite) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{28} }

func (m *ReqTDoRoomInvite) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTDoRoomInvite) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqTDoRoomInvite) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqTDoRoomInvite) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

func (m *ReqTDoRoomInvite) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

// 房间中修改昵称
type ReqTRChgName struct {
	OwnerId  uint64 `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId   uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	UserName string `protobuf:"bytes,3,req,name=UserName,json=userName" json:"UserName"`
}

func (m *ReqTRChgName) Reset()                    { *m = ReqTRChgName{} }
func (m *ReqTRChgName) String() string            { return proto.CompactTextString(m) }
func (*ReqTRChgName) ProtoMessage()               {}
func (*ReqTRChgName) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{29} }

func (m *ReqTRChgName) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTRChgName) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqTRChgName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

// 修改队伍
type ReqTChangeTeam struct {
	OwnerId uint64 `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId  uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	NewTId  uint32 `protobuf:"varint,3,req,name=NewTId,json=newTId" json:"NewTId"`
}

func (m *ReqTChangeTeam) Reset()                    { *m = ReqTChangeTeam{} }
func (m *ReqTChangeTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqTChangeTeam) ProtoMessage()               {}
func (*ReqTChangeTeam) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{30} }

func (m *ReqTChangeTeam) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTChangeTeam) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqTChangeTeam) GetNewTId() uint32 {
	if m != nil {
		return m.NewTId
	}
	return 0
}

// 修改队伍名
type ReqTSetTeamName struct {
	OwnerId uint64 `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId  uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	TeamId  uint32 `protobuf:"varint,3,req,name=TeamId,json=teamId" json:"TeamId"`
	TName   string `protobuf:"bytes,4,req,name=TName,json=tName" json:"TName"`
}

func (m *ReqTSetTeamName) Reset()                    { *m = ReqTSetTeamName{} }
func (m *ReqTSetTeamName) String() string            { return proto.CompactTextString(m) }
func (*ReqTSetTeamName) ProtoMessage()               {}
func (*ReqTSetTeamName) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{31} }

func (m *ReqTSetTeamName) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTSetTeamName) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqTSetTeamName) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *ReqTSetTeamName) GetTName() string {
	if m != nil {
		return m.TName
	}
	return ""
}

// 加入房间
type ReqTJoinTRoom struct {
	OwnerId  uint64 `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId   uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	UserName string `protobuf:"bytes,3,req,name=UserName,json=userName" json:"UserName"`
	FriendId uint64 `protobuf:"varint,4,req,name=FriendId,json=friendId" json:"FriendId"`
	Passwd   string `protobuf:"bytes,5,req,name=Passwd,json=passwd" json:"Passwd"`
	QrCode   string `protobuf:"bytes,6,req,name=QrCode,json=qrCode" json:"QrCode"`
	CNet     uint32 `protobuf:"varint,7,req,name=CNet,json=cNet" json:"CNet"`
}

func (m *ReqTJoinTRoom) Reset()                    { *m = ReqTJoinTRoom{} }
func (m *ReqTJoinTRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqTJoinTRoom) ProtoMessage()               {}
func (*ReqTJoinTRoom) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{32} }

func (m *ReqTJoinTRoom) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTJoinTRoom) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqTJoinTRoom) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqTJoinTRoom) GetFriendId() uint64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *ReqTJoinTRoom) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *ReqTJoinTRoom) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *ReqTJoinTRoom) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

// 删除玩家
type ReqTDoDelUser struct {
	OwnerId uint64 `protobuf:"varint,1,req,name=OwnerId,json=ownerId" json:"OwnerId"`
	UserId  uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
}

func (m *ReqTDoDelUser) Reset()                    { *m = ReqTDoDelUser{} }
func (m *ReqTDoDelUser) String() string            { return proto.CompactTextString(m) }
func (*ReqTDoDelUser) ProtoMessage()               {}
func (*ReqTDoDelUser) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{33} }

func (m *ReqTDoDelUser) GetOwnerId() uint64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *ReqTDoDelUser) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 中途加入
type ReqTJoinTTRoom struct {
	RoomId   uint32 `protobuf:"varint,1,req,name=RoomId,json=roomId" json:"RoomId"`
	UserId   uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	UserName string `protobuf:"bytes,3,req,name=UserName,json=userName" json:"UserName"`
	FUserId  uint64 `protobuf:"varint,4,req,name=FUserId,json=fUserId" json:"FUserId"`
	Priv     uint32 `protobuf:"varint,5,req,name=Priv,json=priv" json:"Priv"`
	CNet     uint32 `protobuf:"varint,6,req,name=CNet,json=cNet" json:"CNet"`
}

func (m *ReqTJoinTTRoom) Reset()                    { *m = ReqTJoinTTRoom{} }
func (m *ReqTJoinTTRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqTJoinTTRoom) ProtoMessage()               {}
func (*ReqTJoinTTRoom) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{34} }

func (m *ReqTJoinTTRoom) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ReqTJoinTTRoom) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqTJoinTTRoom) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqTJoinTTRoom) GetFUserId() uint64 {
	if m != nil {
		return m.FUserId
	}
	return 0
}

func (m *ReqTJoinTTRoom) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

func (m *ReqTJoinTTRoom) GetCNet() uint32 {
	if m != nil {
		return m.CNet
	}
	return 0
}

// 房间服务器标示符
type GameRoomInfo struct {
	Addr   string `protobuf:"bytes,1,req,name=Addr,json=addr" json:"Addr"`
	RoomId uint32 `protobuf:"varint,2,req,name=RoomId,json=roomId" json:"RoomId"`
	UID    uint64 `protobuf:"varint,3,opt,name=UID,json=uID" json:"UID"`
}

func (m *GameRoomInfo) Reset()                    { *m = GameRoomInfo{} }
func (m *GameRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*GameRoomInfo) ProtoMessage()               {}
func (*GameRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{35} }

func (m *GameRoomInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *GameRoomInfo) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GameRoomInfo) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

// 观看服务器地址
type WatcherServerInfo struct {
	Address      string `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	BanLimit     int32  `protobuf:"varint,2,opt,name=BanLimit,json=banLimit" json:"BanLimit"`
	BanLimitTTL  int32  `protobuf:"varint,3,opt,name=BanLimitTTL,json=banLimitTTL" json:"BanLimitTTL"`
	WatcherLimit int32  `protobuf:"varint,4,opt,name=WatcherLimit,json=watcherLimit" json:"WatcherLimit"`
}

func (m *WatcherServerInfo) Reset()                    { *m = WatcherServerInfo{} }
func (m *WatcherServerInfo) String() string            { return proto.CompactTextString(m) }
func (*WatcherServerInfo) ProtoMessage()               {}
func (*WatcherServerInfo) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{36} }

func (m *WatcherServerInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatcherServerInfo) GetBanLimit() int32 {
	if m != nil {
		return m.BanLimit
	}
	return 0
}

func (m *WatcherServerInfo) GetBanLimitTTL() int32 {
	if m != nil {
		return m.BanLimitTTL
	}
	return 0
}

func (m *WatcherServerInfo) GetWatcherLimit() int32 {
	if m != nil {
		return m.WatcherLimit
	}
	return 0
}

type AddNewWatcherServerReq struct {
	RoomAddress string `protobuf:"bytes,1,req,name=RoomAddress,json=roomAddress" json:"RoomAddress"`
	Seq         uint64 `protobuf:"varint,2,req,name=Seq,json=seq" json:"Seq"`
}

func (m *AddNewWatcherServerReq) Reset()                    { *m = AddNewWatcherServerReq{} }
func (m *AddNewWatcherServerReq) String() string            { return proto.CompactTextString(m) }
func (*AddNewWatcherServerReq) ProtoMessage()               {}
func (*AddNewWatcherServerReq) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{37} }

func (m *AddNewWatcherServerReq) GetRoomAddress() string {
	if m != nil {
		return m.RoomAddress
	}
	return ""
}

func (m *AddNewWatcherServerReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

// --------------------配置管理服务器---------------------------
// 配置管理服务器服务器间连接验证
type ReqMgrLogin struct {
	Address     string `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	Key         string `protobuf:"bytes,2,req,name=Key,json=key" json:"Key"`
	SerType     int32  `protobuf:"varint,3,req,name=SerType,json=serType" json:"SerType"`
	NeedRetAddr bool   `protobuf:"varint,4,req,name=NeedRetAddr,json=needRetAddr" json:"NeedRetAddr"`
}

func (m *ReqMgrLogin) Reset()                    { *m = ReqMgrLogin{} }
func (m *ReqMgrLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqMgrLogin) ProtoMessage()               {}
func (*ReqMgrLogin) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{38} }

func (m *ReqMgrLogin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqMgrLogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqMgrLogin) GetSerType() int32 {
	if m != nil {
		return m.SerType
	}
	return 0
}

func (m *ReqMgrLogin) GetNeedRetAddr() bool {
	if m != nil {
		return m.NeedRetAddr
	}
	return false
}

type RetMgrLogin struct {
	AddressList []string `protobuf:"bytes,1,rep,name=AddressList,json=addressList" json:"AddressList,omitempty"`
}

func (m *RetMgrLogin) Reset()                    { *m = RetMgrLogin{} }
func (m *RetMgrLogin) String() string            { return proto.CompactTextString(m) }
func (*RetMgrLogin) ProtoMessage()               {}
func (*RetMgrLogin) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{39} }

func (m *RetMgrLogin) GetAddressList() []string {
	if m != nil {
		return m.AddressList
	}
	return nil
}

// 配置管理服务器服务器间连接验证
type ReqMgrAdd struct {
	Address string `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	SerType int32  `protobuf:"varint,2,req,name=SerType,json=serType" json:"SerType"`
}

func (m *ReqMgrAdd) Reset()                    { *m = ReqMgrAdd{} }
func (m *ReqMgrAdd) String() string            { return proto.CompactTextString(m) }
func (*ReqMgrAdd) ProtoMessage()               {}
func (*ReqMgrAdd) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{40} }

func (m *ReqMgrAdd) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqMgrAdd) GetSerType() int32 {
	if m != nil {
		return m.SerType
	}
	return 0
}

type RetMgrAdd struct {
}

func (m *RetMgrAdd) Reset()                    { *m = RetMgrAdd{} }
func (m *RetMgrAdd) String() string            { return proto.CompactTextString(m) }
func (*RetMgrAdd) ProtoMessage()               {}
func (*RetMgrAdd) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{41} }

// 其他节点连接验证
type ReqMgrOtherLogin struct {
	Address     string   `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	Key         string   `protobuf:"bytes,2,req,name=Key,json=key" json:"Key"`
	SerType     int32    `protobuf:"varint,3,req,name=SerType,json=serType" json:"SerType"`
	ReqTypeList []uint32 `protobuf:"varint,4,rep,name=ReqTypeList,json=reqTypeList" json:"ReqTypeList,omitempty"`
}

func (m *ReqMgrOtherLogin) Reset()                    { *m = ReqMgrOtherLogin{} }
func (m *ReqMgrOtherLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqMgrOtherLogin) ProtoMessage()               {}
func (*ReqMgrOtherLogin) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{42} }

func (m *ReqMgrOtherLogin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqMgrOtherLogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqMgrOtherLogin) GetSerType() int32 {
	if m != nil {
		return m.SerType
	}
	return 0
}

func (m *ReqMgrOtherLogin) GetReqTypeList() []uint32 {
	if m != nil {
		return m.ReqTypeList
	}
	return nil
}

type RetMgrOtherLogin struct {
	AddList []*RetMgrOtherLogin_AddrData `protobuf:"bytes,1,rep,name=AddList,json=addList" json:"AddList,omitempty"`
}

func (m *RetMgrOtherLogin) Reset()                    { *m = RetMgrOtherLogin{} }
func (m *RetMgrOtherLogin) String() string            { return proto.CompactTextString(m) }
func (*RetMgrOtherLogin) ProtoMessage()               {}
func (*RetMgrOtherLogin) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{43} }

func (m *RetMgrOtherLogin) GetAddList() []*RetMgrOtherLogin_AddrData {
	if m != nil {
		return m.AddList
	}
	return nil
}

type RetMgrOtherLogin_AddrData struct {
	SerType int32  `protobuf:"varint,1,req,name=SerType,json=serType" json:"SerType"`
	Addr    uint32 `protobuf:"varint,2,req,name=Addr,json=addr" json:"Addr"`
}

func (m *RetMgrOtherLogin_AddrData) Reset()         { *m = RetMgrOtherLogin_AddrData{} }
func (m *RetMgrOtherLogin_AddrData) String() string { return proto.CompactTextString(m) }
func (*RetMgrOtherLogin_AddrData) ProtoMessage()    {}
func (*RetMgrOtherLogin_AddrData) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{43, 0}
}

func (m *RetMgrOtherLogin_AddrData) GetSerType() int32 {
	if m != nil {
		return m.SerType
	}
	return 0
}

func (m *RetMgrOtherLogin_AddrData) GetAddr() uint32 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type ReqMaintainNotice struct {
	Year        uint32 `protobuf:"varint,1,opt,name=year" json:"year"`
	Month       uint32 `protobuf:"varint,2,opt,name=month" json:"month"`
	Day         uint32 `protobuf:"varint,3,opt,name=day" json:"day"`
	Starthour   uint32 `protobuf:"varint,4,opt,name=starthour" json:"starthour"`
	Startminute uint32 `protobuf:"varint,5,opt,name=startminute" json:"startminute"`
	Endhour     uint32 `protobuf:"varint,6,opt,name=endhour" json:"endhour"`
	Endminute   uint32 `protobuf:"varint,7,opt,name=endminute" json:"endminute"`
	Flag        bool   `protobuf:"varint,8,opt,name=flag" json:"flag"`
}

func (m *ReqMaintainNotice) Reset()                    { *m = ReqMaintainNotice{} }
func (m *ReqMaintainNotice) String() string            { return proto.CompactTextString(m) }
func (*ReqMaintainNotice) ProtoMessage()               {}
func (*ReqMaintainNotice) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{44} }

func (m *ReqMaintainNotice) GetYear() uint32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *ReqMaintainNotice) GetMonth() uint32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *ReqMaintainNotice) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *ReqMaintainNotice) GetStarthour() uint32 {
	if m != nil {
		return m.Starthour
	}
	return 0
}

func (m *ReqMaintainNotice) GetStartminute() uint32 {
	if m != nil {
		return m.Startminute
	}
	return 0
}

func (m *ReqMaintainNotice) GetEndhour() uint32 {
	if m != nil {
		return m.Endhour
	}
	return 0
}

func (m *ReqMaintainNotice) GetEndminute() uint32 {
	if m != nil {
		return m.Endminute
	}
	return 0
}

func (m *ReqMaintainNotice) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func init() {
	proto.RegisterType((*ReqUpdateBanLimit)(nil), "usercmd.ReqUpdateBanLimit")
	proto.RegisterType((*ReqServerLogin)(nil), "usercmd.ReqServerLogin")
	proto.RegisterType((*RetServerLogin)(nil), "usercmd.RetServerLogin")
	proto.RegisterType((*ReqTSerUserNum)(nil), "usercmd.ReqTSerUserNum")
	proto.RegisterType((*ReqCheckRelogin)(nil), "usercmd.ReqCheckRelogin")
	proto.RegisterType((*S2SClientCmd)(nil), "usercmd.S2SClientCmd")
	proto.RegisterType((*S2SCmd)(nil), "usercmd.S2SCmd")
	proto.RegisterType((*S2STypeCmd)(nil), "usercmd.S2STypeCmd")
	proto.RegisterType((*ReqInviteList)(nil), "usercmd.ReqInviteList")
	proto.RegisterType((*ReqDelTeamList)(nil), "usercmd.ReqDelTeamList")
	proto.RegisterType((*ReqLeaderDoInv)(nil), "usercmd.ReqLeaderDoInv")
	proto.RegisterType((*ReqLChangeName)(nil), "usercmd.ReqLChangeName")
	proto.RegisterType((*ReqLStartGame)(nil), "usercmd.ReqLStartGame")
	proto.RegisterType((*ReqLStartGame_MemData)(nil), "usercmd.ReqLStartGame.MemData")
	proto.RegisterType((*ReqLStartGame_InvData)(nil), "usercmd.ReqLStartGame.InvData")
	proto.RegisterType((*ReqLJoinTeam)(nil), "usercmd.ReqLJoinTeam")
	proto.RegisterType((*ReqLInviteGame)(nil), "usercmd.ReqLInviteGame")
	proto.RegisterType((*ReqMemInvite)(nil), "usercmd.ReqMemInvite")
	proto.RegisterType((*ReqAddRoom)(nil), "usercmd.ReqAddRoom")
	proto.RegisterType((*ReqRemoveRoom)(nil), "usercmd.ReqRemoveRoom")
	proto.RegisterType((*ReqUpdateRoom)(nil), "usercmd.ReqUpdateRoom")
	proto.RegisterType((*ReqEndGame)(nil), "usercmd.ReqEndGame")
	proto.RegisterType((*ReqUpdateServer)(nil), "usercmd.ReqUpdateServer")
	proto.RegisterType((*ReqUpdateWathcerNum)(nil), "usercmd.ReqUpdateWathcerNum")
	proto.RegisterType((*ReqLoadConfig)(nil), "usercmd.ReqLoadConfig")
	proto.RegisterType((*ReqGetMLevel)(nil), "usercmd.ReqGetMLevel")
	proto.RegisterType((*RetUpdateMLevel)(nil), "usercmd.RetUpdateMLevel")
	proto.RegisterType((*RetUpdateMLevel_LeveLData)(nil), "usercmd.RetUpdateMLevel.LeveLData")
	proto.RegisterType((*RetUpdateTMatchs)(nil), "usercmd.RetUpdateTMatchs")
	proto.RegisterType((*RetUpdateTMatchs_TMatchData)(nil), "usercmd.RetUpdateTMatchs.TMatchData")
	proto.RegisterType((*ReqTRoomTeamList)(nil), "usercmd.ReqTRoomTeamList")
	proto.RegisterType((*ReqTRoomInvite)(nil), "usercmd.ReqTRoomInvite")
	proto.RegisterType((*ReqTDoRoomInvite)(nil), "usercmd.ReqTDoRoomInvite")
	proto.RegisterType((*ReqTRChgName)(nil), "usercmd.ReqTRChgName")
	proto.RegisterType((*ReqTChangeTeam)(nil), "usercmd.ReqTChangeTeam")
	proto.RegisterType((*ReqTSetTeamName)(nil), "usercmd.ReqTSetTeamName")
	proto.RegisterType((*ReqTJoinTRoom)(nil), "usercmd.ReqTJoinTRoom")
	proto.RegisterType((*ReqTDoDelUser)(nil), "usercmd.ReqTDoDelUser")
	proto.RegisterType((*ReqTJoinTTRoom)(nil), "usercmd.ReqTJoinTTRoom")
	proto.RegisterType((*GameRoomInfo)(nil), "usercmd.GameRoomInfo")
	proto.RegisterType((*WatcherServerInfo)(nil), "usercmd.WatcherServerInfo")
	proto.RegisterType((*AddNewWatcherServerReq)(nil), "usercmd.AddNewWatcherServerReq")
	proto.RegisterType((*ReqMgrLogin)(nil), "usercmd.ReqMgrLogin")
	proto.RegisterType((*RetMgrLogin)(nil), "usercmd.RetMgrLogin")
	proto.RegisterType((*ReqMgrAdd)(nil), "usercmd.ReqMgrAdd")
	proto.RegisterType((*RetMgrAdd)(nil), "usercmd.RetMgrAdd")
	proto.RegisterType((*ReqMgrOtherLogin)(nil), "usercmd.ReqMgrOtherLogin")
	proto.RegisterType((*RetMgrOtherLogin)(nil), "usercmd.RetMgrOtherLogin")
	proto.RegisterType((*RetMgrOtherLogin_AddrData)(nil), "usercmd.RetMgrOtherLogin.AddrData")
	proto.RegisterType((*ReqMaintainNotice)(nil), "usercmd.ReqMaintainNotice")
	proto.RegisterEnum("usercmd.CmdType", CmdType_name, CmdType_value)
}
func (m *ReqUpdateBanLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateBanLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.BanLimit))
	return i, nil
}

func (m *ReqServerLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqServerLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x12
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.SerType))
	dAtA[i] = 0x22
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.WAddress)))
	i += copy(dAtA[i:], m.WAddress)
	return i, nil
}

func (m *RetServerLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetServerLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *ReqTSerUserNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTSerUserNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.TUserNum))
	return i, nil
}

func (m *ReqCheckRelogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCheckRelogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *S2SClientCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2SClientCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.ServerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Flag))
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2SCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2SCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.ServerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Flag))
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2STypeCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2STypeCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Flag))
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ReqInviteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInviteList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.LeaderId))
	return i, nil
}

func (m *ReqDelTeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDelTeamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.LeaderId))
	return i, nil
}

func (m *ReqLeaderDoInv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLeaderDoInv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Options))
	dAtA[i] = 0x28
	i++
	if m.IsNewbie {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x40
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.InvType))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.QrCode)))
	i += copy(dAtA[i:], m.QrCode)
	dAtA[i] = 0x50
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	return i, nil
}

func (m *ReqLChangeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLChangeName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.LeaderId))
	return i, nil
}

func (m *ReqLStartGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLStartGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.City))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	if len(m.MemIds) > 0 {
		for _, msg := range m.MemIds {
			dAtA[i] = 0x22
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InvIds) > 0 {
		for _, msg := range m.InvIds {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.THScores))
	return i, nil
}

func (m *ReqLStartGame_MemData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLStartGame_MemData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	if m.IsNewbie {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	return i, nil
}

func (m *ReqLStartGame_InvData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLStartGame_InvData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Time))
	return i, nil
}

func (m *ReqLJoinTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLJoinTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	return i, nil
}

func (m *ReqLInviteGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLInviteGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x28
	i++
	if m.IsNewbie {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqMemInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMemInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.InvId))
	dAtA[i] = 0x40
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.InvType))
	if len(m.FIds) > 0 {
		for _, num := range m.FIds {
			dAtA[i] = 0x48
			i++
			i = encodeVarintServer(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ReqAddRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqAddRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x20
	i++
	if m.IsCoop {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x28
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.HScores))
	dAtA[i] = 0x30
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UnCoop))
	dAtA[i] = 0x38
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Robot))
	dAtA[i] = 0x40
	i++
	if m.IsNew {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x48
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.SceneId))
	dAtA[i] = 0x50
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Level))
	return i, nil
}

func (m *ReqRemoveRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRemoveRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	return i, nil
}

func (m *ReqUpdateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserNum))
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UState))
	dAtA[i] = 0x28
	i++
	if m.IsCoop {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.HScores))
	dAtA[i] = 0x38
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Robot))
	return i, nil
}

func (m *ReqEndGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEndGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *ReqUpdateServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.WatchedId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.WatcherNum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	return i, nil
}

func (m *ReqUpdateWathcerNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateWathcerNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *ReqLoadConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLoadConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqGetMLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMLevel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.ServerId))
	return i, nil
}

func (m *RetUpdateMLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUpdateMLevel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.ServerId))
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0x12
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetUpdateMLevel_LeveLData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUpdateMLevel_LeveLData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserNum))
	return i, nil
}

func (m *RetUpdateTMatchs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUpdateTMatchs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.TotalNum))
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0x12
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetUpdateTMatchs_TMatchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUpdateTMatchs_TMatchData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.MinLevel))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.MaxLevel))
	return i, nil
}

func (m *ReqTRoomTeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTRoomTeamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *ReqTRoomInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTRoomInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	if len(m.UIds) > 0 {
		for _, num := range m.UIds {
			dAtA[i] = 0x18
			i++
			i = encodeVarintServer(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.InvType))
	return i, nil
}

func (m *ReqTDoRoomInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTDoRoomInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Options))
	dAtA[i] = 0x28
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	return i, nil
}

func (m *ReqTRChgName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTRChgName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	return i, nil
}

func (m *ReqTChangeTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTChangeTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.NewTId))
	return i, nil
}

func (m *ReqTSetTeamName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTSetTeamName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x22
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.TName)))
	i += copy(dAtA[i:], m.TName)
	return i, nil
}

func (m *ReqTJoinTRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTJoinTRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.FriendId))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Passwd)))
	i += copy(dAtA[i:], m.Passwd)
	dAtA[i] = 0x32
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.QrCode)))
	i += copy(dAtA[i:], m.QrCode)
	dAtA[i] = 0x38
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	return i, nil
}

func (m *ReqTDoDelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTDoDelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.OwnerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *ReqTJoinTTRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTJoinTTRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.FUserId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Priv))
	dAtA[i] = 0x30
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.CNet))
	return i, nil
}

func (m *GameRoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Addr)))
	i += copy(dAtA[i:], m.Addr)
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.UID))
	return i, nil
}

func (m *WatcherServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatcherServerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.BanLimit))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.BanLimitTTL))
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.WatcherLimit))
	return i, nil
}

func (m *AddNewWatcherServerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNewWatcherServerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.RoomAddress)))
	i += copy(dAtA[i:], m.RoomAddress)
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Seq))
	return i, nil
}

func (m *ReqMgrLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMgrLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x12
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.SerType))
	dAtA[i] = 0x20
	i++
	if m.NeedRetAddr {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetMgrLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMgrLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AddressList) > 0 {
		for _, s := range m.AddressList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ReqMgrAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMgrAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.SerType))
	return i, nil
}

func (m *RetMgrAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMgrAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqMgrOtherLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMgrOtherLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x12
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.SerType))
	if len(m.ReqTypeList) > 0 {
		for _, num := range m.ReqTypeList {
			dAtA[i] = 0x20
			i++
			i = encodeVarintServer(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RetMgrOtherLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMgrOtherLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AddList) > 0 {
		for _, msg := range m.AddList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetMgrOtherLogin_AddrData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMgrOtherLogin_AddrData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.SerType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Addr))
	return i, nil
}

func (m *ReqMaintainNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMaintainNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Year))
	dAtA[i] = 0x10
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Month))
	dAtA[i] = 0x18
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Day))
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Starthour))
	dAtA[i] = 0x28
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Startminute))
	dAtA[i] = 0x30
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Endhour))
	dAtA[i] = 0x38
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Endminute))
	dAtA[i] = 0x40
	i++
	if m.Flag {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func encodeFixed64Server(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Server(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqUpdateBanLimit) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.BanLimit))
	return n
}

func (m *ReqServerLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovServer(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.SerType))
	l = len(m.WAddress)
	n += 1 + l + sovServer(uint64(l))
	return n
}

func (m *RetServerLogin) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Id))
	return n
}

func (m *ReqTSerUserNum) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserNum))
	n += 1 + sovServer(uint64(m.TUserNum))
	return n
}

func (m *ReqCheckRelogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.Id))
	return n
}

func (m *S2SClientCmd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.ServerId))
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.Flag))
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *S2SCmd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.ServerId))
	n += 1 + sovServer(uint64(m.Flag))
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *S2STypeCmd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Type))
	n += 1 + sovServer(uint64(m.Flag))
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *ReqInviteList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.LeaderId))
	return n
}

func (m *ReqDelTeamList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.LeaderId))
	return n
}

func (m *ReqLeaderDoInv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserId))
	l = len(m.UserName)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.LeaderId))
	n += 1 + sovServer(uint64(m.Options))
	n += 2
	n += 1 + sovServer(uint64(m.InvType))
	l = len(m.QrCode)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.CNet))
	return n
}

func (m *ReqLChangeName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserId))
	l = len(m.UserName)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.LeaderId))
	return n
}

func (m *ReqLStartGame) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.City))
	n += 1 + sovServer(uint64(m.CNet))
	if len(m.MemIds) > 0 {
		for _, e := range m.MemIds {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	if len(m.InvIds) > 0 {
		for _, e := range m.InvIds {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	n += 1 + sovServer(uint64(m.THScores))
	return n
}

func (m *ReqLStartGame_MemData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Id))
	n += 2
	n += 1 + sovServer(uint64(m.CNet))
	return n
}

func (m *ReqLStartGame_InvData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Id))
	n += 1 + sovServer(uint64(m.Time))
	return n
}

func (m *ReqLJoinTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.RoomId))
	n += 1 + sovServer(uint64(m.CNet))
	return n
}

func (m *ReqLInviteGame) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.CNet))
	n += 1 + sovServer(uint64(m.RoomId))
	n += 1 + sovServer(uint64(m.TeamId))
	n += 2
	return n
}

func (m *ReqMemInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.LeaderId))
	n += 1 + sovServer(uint64(m.InvId))
	n += 1 + sovServer(uint64(m.InvType))
	if len(m.FIds) > 0 {
		for _, e := range m.FIds {
			n += 1 + sovServer(uint64(e))
		}
	}
	return n
}

func (m *ReqAddRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.RoomType))
	n += 1 + sovServer(uint64(m.RoomId))
	n += 1 + sovServer(uint64(m.EndTime))
	n += 2
	n += 1 + sovServer(uint64(m.HScores))
	n += 1 + sovServer(uint64(m.UnCoop))
	n += 1 + sovServer(uint64(m.Robot))
	n += 2
	n += 1 + sovServer(uint64(m.SceneId))
	n += 1 + sovServer(uint64(m.Level))
	return n
}

func (m *ReqRemoveRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.RoomType))
	n += 1 + sovServer(uint64(m.RoomId))
	return n
}

func (m *ReqUpdateRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.RoomType))
	n += 1 + sovServer(uint64(m.RoomId))
	n += 1 + sovServer(uint64(m.UserNum))
	n += 1 + sovServer(uint64(m.UState))
	n += 2
	n += 1 + sovServer(uint64(m.HScores))
	n += 1 + sovServer(uint64(m.Robot))
	return n
}

func (m *ReqEndGame) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.RoomId))
	n += 1 + sovServer(uint64(m.UserId))
	return n
}

func (m *ReqUpdateServer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.RoomNum))
	n += 1 + sovServer(uint64(m.UserNum))
	n += 1 + sovServer(uint64(m.WatchedId))
	n += 1 + sovServer(uint64(m.WatcherNum))
	n += 1 + sovServer(uint64(m.RoomId))
	return n
}

func (m *ReqUpdateWathcerNum) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Num))
	return n
}

func (m *ReqLoadConfig) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqGetMLevel) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.ServerId))
	return n
}

func (m *RetUpdateMLevel) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.ServerId))
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *RetUpdateMLevel_LeveLData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Level))
	n += 1 + sovServer(uint64(m.UserNum))
	return n
}

func (m *RetUpdateTMatchs) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.TotalNum))
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *RetUpdateTMatchs_TMatchData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.MinLevel))
	n += 1 + sovServer(uint64(m.MaxLevel))
	return n
}

func (m *ReqTRoomTeamList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	return n
}

func (m *ReqTRoomInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	if len(m.UIds) > 0 {
		for _, e := range m.UIds {
			n += 1 + sovServer(uint64(e))
		}
	}
	n += 1 + sovServer(uint64(m.InvType))
	return n
}

func (m *ReqTDoRoomInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	l = len(m.UserName)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.Options))
	n += 1 + sovServer(uint64(m.CNet))
	return n
}

func (m *ReqTRChgName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	l = len(m.UserName)
	n += 1 + l + sovServer(uint64(l))
	return n
}

func (m *ReqTChangeTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.NewTId))
	return n
}

func (m *ReqTSetTeamName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	n += 1 + sovServer(uint64(m.TeamId))
	l = len(m.TName)
	n += 1 + l + sovServer(uint64(l))
	return n
}

func (m *ReqTJoinTRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	l = len(m.UserName)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.FriendId))
	l = len(m.Passwd)
	n += 1 + l + sovServer(uint64(l))
	l = len(m.QrCode)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.CNet))
	return n
}

func (m *ReqTDoDelUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.OwnerId))
	n += 1 + sovServer(uint64(m.UserId))
	return n
}

func (m *ReqTJoinTTRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.RoomId))
	n += 1 + sovServer(uint64(m.UserId))
	l = len(m.UserName)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.FUserId))
	n += 1 + sovServer(uint64(m.Priv))
	n += 1 + sovServer(uint64(m.CNet))
	return n
}

func (m *GameRoomInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Addr)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.RoomId))
	n += 1 + sovServer(uint64(m.UID))
	return n
}

func (m *WatcherServerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.BanLimit))
	n += 1 + sovServer(uint64(m.BanLimitTTL))
	n += 1 + sovServer(uint64(m.WatcherLimit))
	return n
}

func (m *AddNewWatcherServerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomAddress)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.Seq))
	return n
}

func (m *ReqMgrLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovServer(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.SerType))
	n += 2
	return n
}

func (m *RetMgrLogin) Size() (n int) {
	var l int
	_ = l
	if len(m.AddressList) > 0 {
		for _, s := range m.AddressList {
			l = len(s)
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *ReqMgrAdd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.SerType))
	return n
}

func (m *RetMgrAdd) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqMgrOtherLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovServer(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovServer(uint64(l))
	n += 1 + sovServer(uint64(m.SerType))
	if len(m.ReqTypeList) > 0 {
		for _, e := range m.ReqTypeList {
			n += 1 + sovServer(uint64(e))
		}
	}
	return n
}

func (m *RetMgrOtherLogin) Size() (n int) {
	var l int
	_ = l
	if len(m.AddList) > 0 {
		for _, e := range m.AddList {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *RetMgrOtherLogin_AddrData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.SerType))
	n += 1 + sovServer(uint64(m.Addr))
	return n
}

func (m *ReqMaintainNotice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Year))
	n += 1 + sovServer(uint64(m.Month))
	n += 1 + sovServer(uint64(m.Day))
	n += 1 + sovServer(uint64(m.Starthour))
	n += 1 + sovServer(uint64(m.Startminute))
	n += 1 + sovServer(uint64(m.Endhour))
	n += 1 + sovServer(uint64(m.Endminute))
	n += 2
	return n
}

func sovServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqUpdateBanLimit) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateBanLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateBanLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanLimit", wireType)
			}
			m.BanLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("BanLimit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqServerLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqServerLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqServerLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerType", wireType)
			}
			m.SerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SerType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetServerLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetServerLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetServerLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTSerUserNum) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTSerUserNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTSerUserNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNum", wireType)
			}
			m.UserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TUserNum", wireType)
			}
			m.TUserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TUserNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserNum")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TUserNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCheckRelogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCheckRelogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCheckRelogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2SClientCmd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2SClientCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2SClientCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2SCmd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2SCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2SCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2STypeCmd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2STypeCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2STypeCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flag")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInviteList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInviteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInviteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDelTeamList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDelTeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDelTeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLeaderDoInv) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLeaderDoInv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLeaderDoInv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewbie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewbie = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvType", wireType)
			}
			m.InvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Options")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsNewbie")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InvType")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("QrCode")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLChangeName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLChangeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLChangeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLStartGame) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLStartGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLStartGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			m.City = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.City |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemIds = append(m.MemIds, &ReqLStartGame_MemData{})
			if err := m.MemIds[len(m.MemIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvIds = append(m.InvIds, &ReqLStartGame_InvData{})
			if err := m.InvIds[len(m.InvIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field THScores", wireType)
			}
			m.THScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.THScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("City")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("THScores")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLStartGame_MemData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewbie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewbie = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsNewbie")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLStartGame_InvData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLJoinTeam) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLJoinTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLJoinTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLInviteGame) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLInviteGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLInviteGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewbie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewbie = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamId")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsNewbie")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMemInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMemInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMemInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvId", wireType)
			}
			m.InvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvType", wireType)
			}
			m.InvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FIds = append(m.FIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FIds = append(m.FIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InvId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InvType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqAddRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqAddRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqAddRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			m.RoomType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCoop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCoop = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HScores", wireType)
			}
			m.HScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnCoop", wireType)
			}
			m.UnCoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnCoop |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			m.Robot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Robot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNew = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			m.SceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EndTime")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsCoop")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("HScores")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UnCoop")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRemoveRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRemoveRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRemoveRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			m.RoomType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			m.RoomType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNum", wireType)
			}
			m.UserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UState", wireType)
			}
			m.UState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCoop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCoop = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HScores", wireType)
			}
			m.HScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			m.Robot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Robot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserNum")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UState")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsCoop")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("HScores")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEndGame) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEndGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEndGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateServer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomNum", wireType)
			}
			m.RoomNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNum", wireType)
			}
			m.UserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchedId", wireType)
			}
			m.WatchedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchedId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatcherNum", wireType)
			}
			m.WatcherNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatcherNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomNum")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateWathcerNum) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateWathcerNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateWathcerNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLoadConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLoadConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLoadConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMLevel) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUpdateMLevel) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetUpdateMLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetUpdateMLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &RetUpdateMLevel_LeveLData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUpdateMLevel_LeveLData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeveLData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeveLData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNum", wireType)
			}
			m.UserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Level")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUpdateTMatchs) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetUpdateTMatchs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetUpdateTMatchs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &RetUpdateTMatchs_TMatchData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TotalNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUpdateTMatchs_TMatchData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TMatchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TMatchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLevel", wireType)
			}
			m.MinLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MinLevel")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxLevel")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTRoomTeamList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTRoomTeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTRoomTeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTRoomInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTRoomInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTRoomInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UIds = append(m.UIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UIds = append(m.UIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvType", wireType)
			}
			m.InvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InvType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTDoRoomInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTDoRoomInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTDoRoomInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Options")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTRChgName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTRChgName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTRChgName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTChangeTeam) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTChangeTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTChangeTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTId", wireType)
			}
			m.NewTId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NewTId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTSetTeamName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTSetTeamName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTSetTeamName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTJoinTRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTJoinTRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTJoinTRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FriendId")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Passwd")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("QrCode")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTDoDelUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTDoDelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTDoDelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OwnerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTJoinTTRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTJoinTTRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTJoinTTRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FUserId", wireType)
			}
			m.FUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FUserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNet", wireType)
			}
			m.CNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FUserId")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Priv")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CNet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoomInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Addr")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatcherServerInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatcherServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatcherServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanLimit", wireType)
			}
			m.BanLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanLimitTTL", wireType)
			}
			m.BanLimitTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanLimitTTL |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatcherLimit", wireType)
			}
			m.WatcherLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatcherLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNewWatcherServerReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddNewWatcherServerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddNewWatcherServerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomAddress")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Seq")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMgrLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMgrLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMgrLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerType", wireType)
			}
			m.SerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedRetAddr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedRetAddr = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SerType")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NeedRetAddr")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMgrLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMgrLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMgrLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressList = append(m.AddressList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMgrAdd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMgrAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMgrAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerType", wireType)
			}
			m.SerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SerType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMgrAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMgrAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMgrAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMgrOtherLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMgrOtherLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMgrOtherLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerType", wireType)
			}
			m.SerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReqTypeList = append(m.ReqTypeList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReqTypeList = append(m.ReqTypeList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqTypeList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SerType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMgrOtherLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMgrOtherLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMgrOtherLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddList = append(m.AddList, &RetMgrOtherLogin_AddrData{})
			if err := m.AddList[len(m.AddList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMgrOtherLogin_AddrData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerType", wireType)
			}
			m.SerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SerType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Addr")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMaintainNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMaintainNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMaintainNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Starthour", wireType)
			}
			m.Starthour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Starthour |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Startminute", wireType)
			}
			m.Startminute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Startminute |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endhour", wireType)
			}
			m.Endhour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endhour |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endminute", wireType)
			}
			m.Endminute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endminute |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server.proto", fileDescriptorServer) }

var fileDescriptorServer = []byte{
	// 2076 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4f, 0x8f, 0x1b, 0x49,
	0x15, 0xdf, 0xee, 0xb6, 0xdb, 0xed, 0xf2, 0x4c, 0x52, 0xe9, 0x84, 0x59, 0x33, 0x0c, 0xb3, 0xa6,
	0xb5, 0x8a, 0x46, 0x48, 0x0c, 0x28, 0x12, 0x08, 0x10, 0x12, 0x9a, 0xd8, 0x49, 0xd6, 0xac, 0x67,
	0x32, 0xb4, 0x3d, 0x0a, 0x02, 0x69, 0xa5, 0xce, 0x54, 0x8d, 0xdd, 0x8a, 0xdd, 0x3d, 0xee, 0x2e,
	0xdb, 0xcc, 0x0d, 0xed, 0x0d, 0x76, 0x91, 0x38, 0xf1, 0x11, 0xe0, 0xb2, 0x67, 0x24, 0x24, 0x4e,
	0x7b, 0x0a, 0x70, 0xe1, 0x13, 0x20, 0x14, 0x0e, 0x7c, 0x0d, 0xf4, 0x5e, 0x55, 0x77, 0x57, 0xdb,
	0xce, 0x38, 0xda, 0x4c, 0x2e, 0x63, 0xfb, 0x57, 0xf5, 0xfe, 0xbf, 0x57, 0xef, 0x55, 0x0d, 0xd9,
	0x4a, 0x79, 0x32, 0xe7, 0xc9, 0xe1, 0x65, 0x12, 0x8b, 0xd8, 0xad, 0xcd, 0x52, 0x9e, 0x9c, 0x4f,
	0x98, 0xf7, 0x7d, 0x72, 0xc7, 0xe7, 0xd3, 0xb3, 0x4b, 0x16, 0x08, 0xfe, 0x30, 0x88, 0x7a, 0xe1,
	0x24, 0x14, 0x6e, 0x8b, 0x38, 0xd9, 0xf7, 0xa6, 0xd1, 0x32, 0x0f, 0xaa, 0x0f, 0x2b, 0x2f, 0xff,
	0xfd, 0xc1, 0x7b, 0xbe, 0xf3, 0x5c, 0xa1, 0xde, 0xef, 0x0c, 0x72, 0xcb, 0xe7, 0xd3, 0x3e, 0xf2,
	0xec, 0xc5, 0xc3, 0x30, 0x72, 0xf7, 0x49, 0xed, 0x88, 0xb1, 0x84, 0xa7, 0x29, 0xd2, 0xd4, 0x15,
	0x4d, 0x2d, 0x90, 0xa0, 0xbb, 0x43, 0xac, 0x8f, 0xf9, 0x55, 0xd3, 0xd4, 0xd6, 0xac, 0x17, 0xfc,
	0x0a, 0xe8, 0xfa, 0x3c, 0x19, 0x5c, 0x5d, 0xf2, 0xa6, 0xd5, 0x32, 0x0f, 0xb6, 0x33, 0xba, 0x54,
	0x82, 0xa0, 0xcc, 0xb3, 0x8c, 0x71, 0xa5, 0x65, 0xe4, 0xc4, 0xce, 0x42, 0xa1, 0xde, 0x7d, 0xd0,
	0x45, 0xe8, 0xba, 0xdc, 0x23, 0x66, 0x97, 0xa1, 0x1a, 0x19, 0x3b, 0x33, 0x64, 0x9e, 0x8f, 0x3a,
	0x0f, 0xfa, 0x3c, 0x39, 0x4b, 0x79, 0x72, 0x32, 0x9b, 0x80, 0x6c, 0xf5, 0xb5, 0xb4, 0x19, 0xbd,
	0x03, 0xeb, 0x2d, 0xe2, 0x0c, 0xb2, 0x0d, 0xa6, 0xb6, 0xc1, 0x11, 0x0a, 0xf5, 0x7e, 0x4a, 0x6e,
	0xfb, 0x7c, 0xda, 0x1e, 0xf1, 0xf3, 0x17, 0x3e, 0x1f, 0xa3, 0x70, 0x65, 0xa8, 0xb1, 0x6c, 0xa8,
	0x54, 0x0a, 0xd8, 0x54, 0x34, 0xa5, 0x3e, 0x35, 0xc8, 0x56, 0xff, 0x41, 0xbf, 0x3d, 0x0e, 0x79,
	0x24, 0xda, 0x13, 0x06, 0x32, 0xa5, 0x29, 0x4b, 0x16, 0x38, 0xa9, 0x42, 0xdd, 0x3d, 0x62, 0x83,
	0xf8, 0x25, 0x66, 0xf6, 0x0c, 0x31, 0xb7, 0x49, 0x2a, 0x8f, 0xc7, 0xc1, 0xb0, 0xe4, 0xcc, 0xca,
	0xc5, 0x38, 0x18, 0xc2, 0x4a, 0x27, 0x10, 0x41, 0xb3, 0xd2, 0x32, 0x0f, 0xb6, 0xb2, 0x15, 0x16,
	0x88, 0xc0, 0xfb, 0x84, 0xd8, 0xa0, 0xc3, 0x1b, 0x49, 0xcf, 0xf8, 0x9b, 0xaf, 0xe5, 0x6f, 0xad,
	0xf0, 0xff, 0x25, 0x21, 0xfd, 0x07, 0x7d, 0x08, 0x27, 0xc8, 0x68, 0x92, 0x0a, 0x86, 0x5b, 0xe7,
	0x5f, 0x11, 0x10, 0xeb, 0xaf, 0xc2, 0xfb, 0x29, 0xd9, 0xf6, 0xf9, 0xb4, 0x1b, 0xcd, 0x43, 0xc1,
	0x7b, 0x61, 0x2a, 0x34, 0xf7, 0x18, 0x6b, 0xdc, 0xd3, 0x22, 0x4e, 0x8f, 0x07, 0x6c, 0xc5, 0x7d,
	0xce, 0x58, 0xa1, 0xde, 0x29, 0xa6, 0x49, 0x87, 0x8f, 0x07, 0x3c, 0x98, 0xdc, 0x08, 0xc7, 0xcf,
	0x4d, 0x64, 0x29, 0x77, 0x75, 0xe2, 0x6e, 0x34, 0xdf, 0xcc, 0x12, 0x13, 0x2c, 0x98, 0xf0, 0x52,
	0xc1, 0x38, 0x33, 0x85, 0x96, 0x84, 0x5a, 0xeb, 0x84, 0x42, 0x6e, 0x3f, 0xbd, 0x14, 0x61, 0x1c,
	0xa5, 0x18, 0xf0, 0x3c, 0xb7, 0x63, 0x09, 0x02, 0x87, 0x6e, 0x7a, 0xc2, 0x17, 0xcf, 0x43, 0xde,
	0xac, 0xb6, 0xcc, 0x03, 0x27, 0xe3, 0x10, 0x2a, 0x14, 0x38, 0x74, 0xa3, 0x39, 0x86, 0xca, 0xd1,
	0x39, 0x84, 0x12, 0x04, 0x1b, 0x7e, 0x9e, 0xb4, 0x63, 0xc6, 0x9b, 0x75, 0x4d, 0x47, 0x7b, 0x8a,
	0x18, 0x44, 0xac, 0x7d, 0xc2, 0x45, 0x93, 0xe8, 0xb1, 0x3c, 0x3f, 0xe1, 0xc2, 0x4b, 0xa4, 0x37,
	0xda, 0xa3, 0x20, 0x1a, 0x72, 0xb4, 0xe6, 0x9d, 0x7b, 0xc3, 0xfb, 0xcc, 0xc2, 0x34, 0xe9, 0xf5,
	0x45, 0x90, 0x88, 0x27, 0x9b, 0x65, 0x82, 0xf6, 0xa1, 0xb8, 0x2a, 0x67, 0xe2, 0x79, 0x28, 0xae,
	0x72, 0xbb, 0xac, 0x65, 0xbb, 0xdc, 0x1f, 0x10, 0xfb, 0x98, 0x4f, 0xba, 0x0c, 0x1c, 0x6e, 0x1d,
	0x34, 0x1e, 0xec, 0x1f, 0xaa, 0x53, 0xf6, 0xb0, 0x24, 0xf9, 0xf0, 0x98, 0x4f, 0x20, 0x97, 0x7d,
	0x7b, 0x82, 0xbb, 0x81, 0xae, 0x1b, 0xcd, 0x81, 0xae, 0x7a, 0x2d, 0x5d, 0x37, 0x9a, 0x4b, 0xba,
	0x10, 0x77, 0xe3, 0xe9, 0xf4, 0x51, 0xff, 0x3c, 0x4e, 0x78, 0xda, 0xb4, 0x4b, 0xa7, 0x93, 0x42,
	0x77, 0x7f, 0x45, 0x6a, 0x4a, 0x98, 0x76, 0x24, 0x6a, 0xa7, 0x4f, 0x29, 0x09, 0xcc, 0xb5, 0x49,
	0xf0, 0x5a, 0x73, 0x77, 0x7f, 0x84, 0xe9, 0x71, 0x0d, 0x73, 0xa8, 0xf3, 0x50, 0xc5, 0xac, 0xa8,
	0xf3, 0x70, 0xc2, 0x3d, 0x46, 0xb6, 0xc0, 0xb4, 0x9f, 0xc5, 0x61, 0x04, 0x45, 0xb6, 0x21, 0x16,
	0x7b, 0xc4, 0xf6, 0xe3, 0x78, 0xa2, 0xca, 0x2b, 0xe3, 0x64, 0x27, 0x88, 0xbd, 0x5e, 0x41, 0xef,
	0x4f, 0xb2, 0x49, 0xf5, 0xe4, 0xd9, 0xf0, 0x86, 0x41, 0x07, 0x56, 0xe6, 0x4a, 0x68, 0x0b, 0x15,
	0xac, 0x35, 0x2a, 0xec, 0x11, 0x1b, 0xcc, 0xe8, 0xb2, 0x52, 0xa5, 0xd9, 0x02, 0xb1, 0xcd, 0x85,
	0xe6, 0xfd, 0xc6, 0x40, 0x7f, 0x40, 0xf2, 0xa0, 0xaa, 0xa5, 0x7c, 0x36, 0xd6, 0x56, 0xf7, 0x2e,
	0xa9, 0x62, 0xce, 0x94, 0x4e, 0x9c, 0x2a, 0x26, 0xc6, 0xc6, 0xba, 0x75, 0x49, 0xe5, 0x31, 0x64,
	0x5b, 0xbd, 0x65, 0x1d, 0x54, 0xfc, 0xca, 0x45, 0x97, 0xa5, 0xde, 0xdf, 0x4c, 0x42, 0x7c, 0x3e,
	0x3d, 0x62, 0x0c, 0xec, 0x04, 0x05, 0xe0, 0x73, 0xe5, 0x98, 0x76, 0x12, 0x85, 0x6e, 0x08, 0xca,
	0x3e, 0xa9, 0x3d, 0x8a, 0x18, 0x46, 0xbf, 0xd4, 0xd4, 0xb9, 0x04, 0x81, 0xba, 0x9b, 0xb6, 0xe3,
	0xf8, 0x12, 0x3d, 0x96, 0x79, 0xc4, 0x0e, 0x11, 0x03, 0xea, 0x2c, 0xaf, 0xab, 0x3a, 0xf5, 0x48,
	0x82, 0x18, 0xc5, 0x08, 0xa9, 0xf5, 0xb4, 0xb7, 0x67, 0x88, 0x81, 0x6b, 0xfc, 0xf8, 0x79, 0x2c,
	0x9a, 0xb5, 0x96, 0x91, 0x2f, 0x56, 0x13, 0x80, 0x60, 0x0d, 0xbd, 0xde, 0x74, 0x5a, 0x46, 0x2e,
	0x56, 0x42, 0x38, 0x88, 0x9c, 0xf3, 0x88, 0x77, 0x59, 0xb3, 0xae, 0x51, 0xd6, 0x52, 0x09, 0x02,
	0x6d, 0x8f, 0xcf, 0xf9, 0xb8, 0x49, 0x74, 0xbe, 0x63, 0x80, 0x54, 0x13, 0xf2, 0xf9, 0x24, 0x9e,
	0xf3, 0x9b, 0x70, 0xa0, 0xf7, 0x3f, 0x03, 0x39, 0xca, 0xc1, 0xec, 0xa6, 0x42, 0x92, 0x8d, 0x32,
	0x96, 0x36, 0xd3, 0xe5, 0xb3, 0x0e, 0x38, 0xb5, 0x2f, 0x02, 0xc1, 0x31, 0x24, 0xd5, 0xdc, 0xa9,
	0x88, 0x69, 0x01, 0xab, 0x5e, 0x1f, 0x30, 0x7b, 0x5d, 0xc0, 0xae, 0x09, 0x89, 0xf7, 0x11, 0x26,
	0xde, 0xa3, 0x88, 0x65, 0x05, 0xaa, 0x6c, 0x30, 0xd6, 0x17, 0xda, 0xeb, 0x27, 0x1f, 0xef, 0xaf,
	0x06, 0x0e, 0x63, 0xd2, 0x67, 0x72, 0x8a, 0x01, 0xcd, 0x80, 0xdf, 0xca, 0x84, 0x97, 0x48, 0x50,
	0xf7, 0x8a, 0xb9, 0x6e, 0x02, 0xf4, 0x48, 0xfd, 0x59, 0x20, 0xce, 0x47, 0x9c, 0x61, 0xed, 0x1b,
	0xb9, 0xd0, 0xfa, 0x22, 0x83, 0xdd, 0x0f, 0x09, 0x91, 0x7b, 0x90, 0x4d, 0x45, 0x33, 0x91, 0x2c,
	0x72, 0x5c, 0xb3, 0xac, 0xaa, 0xed, 0xc8, 0xe2, 0xfd, 0x1d, 0x72, 0x37, 0x57, 0xfd, 0x59, 0x20,
	0x46, 0xe7, 0x92, 0x68, 0x87, 0x58, 0x99, 0xea, 0x59, 0x44, 0xac, 0x68, 0x36, 0xf1, 0x6e, 0xcb,
	0x6e, 0x16, 0x07, 0xac, 0x1d, 0x47, 0x17, 0xe1, 0xd0, 0xfb, 0x1e, 0x9e, 0x20, 0x4f, 0xb8, 0x38,
	0xc6, 0x1c, 0xdd, 0x3c, 0xc7, 0x79, 0x7f, 0x41, 0x6f, 0x09, 0x29, 0xf2, 0x4d, 0xa9, 0xdc, 0x1f,
	0x92, 0x2a, 0x9c, 0xf8, 0x69, 0xd3, 0xc4, 0x56, 0xe5, 0x69, 0xad, 0xaa, 0xc4, 0xea, 0x10, 0xfe,
	0xf6, 0xb0, 0x5d, 0x55, 0x61, 0x4c, 0x4b, 0x77, 0x9f, 0x90, 0x7a, 0x8e, 0x15, 0xb5, 0xa4, 0x4b,
	0x91, 0xb5, 0xb4, 0x29, 0x24, 0xde, 0x97, 0x06, 0xa1, 0xb9, 0xb4, 0xc1, 0x31, 0x78, 0x58, 0xf6,
	0xc2, 0x58, 0x04, 0xe3, 0xe5, 0x40, 0x3b, 0x42, 0xa1, 0xee, 0x8f, 0xcb, 0x9a, 0x7f, 0xb8, 0xaa,
	0xb9, 0xe2, 0x75, 0x28, 0x3f, 0x75, 0xdd, 0x4f, 0x09, 0x29, 0x40, 0x90, 0x75, 0x1c, 0x46, 0xab,
	0xfa, 0x3b, 0x13, 0x85, 0xe2, 0x8e, 0xe0, 0xd7, 0x72, 0x47, 0xe9, 0xde, 0x30, 0x51, 0xa8, 0x77,
	0x0a, 0x36, 0x4c, 0x07, 0x58, 0xd1, 0xd9, 0x98, 0x09, 0x13, 0xdb, 0x22, 0x5a, 0x39, 0xf4, 0x6b,
	0xb1, 0x04, 0x37, 0x64, 0xff, 0xa7, 0xb2, 0xdb, 0x21, 0x4b, 0xd5, 0x46, 0xde, 0x8a, 0x21, 0xb4,
	0x89, 0x33, 0x68, 0x13, 0x96, 0x6c, 0x13, 0x33, 0x18, 0x39, 0xb4, 0xd6, 0x52, 0x59, 0xd3, 0x5a,
	0xbc, 0x2f, 0x0c, 0x69, 0x57, 0x27, 0xbe, 0x31, 0x35, 0xf4, 0xe9, 0xcf, 0x5a, 0x3b, 0xfd, 0x6d,
	0x9a, 0x74, 0xb3, 0xb6, 0x5e, 0x5d, 0x99, 0x10, 0x22, 0xac, 0x9a, 0x81, 0xdf, 0x1e, 0x0d, 0x73,
	0x4e, 0xef, 0x50, 0x53, 0x6f, 0x2c, 0x43, 0x24, 0x27, 0x5f, 0x9c, 0x7c, 0xde, 0x4e, 0xe2, 0x1e,
	0xb1, 0x4f, 0xf8, 0x62, 0xb0, 0x3c, 0x96, 0x44, 0x88, 0x79, 0xbf, 0x95, 0xe7, 0xe1, 0xa0, 0xcf,
	0x05, 0xc8, 0xba, 0x01, 0x0b, 0x8b, 0x41, 0xc7, 0x5a, 0x33, 0xe8, 0xec, 0x92, 0xea, 0x00, 0x8d,
	0xaf, 0x68, 0xc6, 0x57, 0x05, 0x5a, 0xae, 0xfa, 0xd9, 0x00, 0x47, 0x3e, 0xec, 0x67, 0xef, 0x3a,
	0x2b, 0x5a, 0xc4, 0x79, 0x9c, 0x84, 0x3c, 0x62, 0x6a, 0x2c, 0xcb, 0x67, 0xa8, 0x0b, 0x85, 0x82,
	0x84, 0xd3, 0x20, 0x4d, 0x17, 0x0c, 0x33, 0x23, 0xbf, 0xbf, 0x5c, 0x22, 0xa6, 0xdd, 0x6e, 0xec,
	0x6b, 0x6e, 0x37, 0xb5, 0x95, 0x9c, 0x3a, 0x96, 0x86, 0x76, 0xe2, 0x0e, 0x1f, 0x83, 0x8a, 0x6f,
	0x59, 0xd6, 0x5f, 0xaa, 0xb2, 0x46, 0xc7, 0x49, 0xcf, 0xbd, 0x45, 0x8f, 0x7c, 0xb3, 0x6a, 0x7a,
	0xac, 0x18, 0xe8, 0x6e, 0xab, 0x5d, 0x9c, 0xe5, 0x43, 0xf2, 0x69, 0x12, 0xce, 0xcb, 0xd5, 0x74,
	0x99, 0x84, 0xf3, 0xdc, 0x27, 0xf6, 0x8a, 0x4f, 0x3e, 0x21, 0x5b, 0xd0, 0xdd, 0xe5, 0x99, 0x70,
	0x11, 0xc3, 0xce, 0x23, 0xc6, 0x92, 0xd2, 0x1b, 0x49, 0x25, 0x60, 0x2c, 0xd9, 0x30, 0xc3, 0xec,
	0x10, 0xeb, 0xac, 0xdb, 0x29, 0xf5, 0x61, 0x6b, 0xd6, 0xed, 0x78, 0x7f, 0x36, 0xc8, 0x1d, 0xd5,
	0x82, 0x55, 0xff, 0x02, 0x29, 0x9b, 0x5e, 0xa4, 0xf4, 0x67, 0x2e, 0xb3, 0x65, 0xac, 0x3e, 0x73,
	0xb9, 0xf7, 0x49, 0x23, 0xdb, 0x31, 0x18, 0xf4, 0x50, 0x6e, 0xb6, 0xa9, 0xf1, 0xbc, 0x58, 0x70,
	0x0f, 0xc8, 0x96, 0x12, 0x2f, 0xb9, 0x55, 0xb4, 0x8d, 0x5b, 0x0b, 0x6d, 0xc5, 0xfb, 0x05, 0xd9,
	0x39, 0x62, 0xec, 0x84, 0x2f, 0x4a, 0xea, 0xfa, 0x7c, 0x0a, 0xb2, 0xc0, 0xf2, 0x75, 0x1a, 0x37,
	0x92, 0x62, 0x01, 0x7c, 0xd0, 0xe7, 0xd3, 0x52, 0x70, 0xad, 0x94, 0x4f, 0xbd, 0xdf, 0x1b, 0xa4,
	0x01, 0x97, 0x88, 0xe1, 0xcd, 0xbe, 0xc7, 0x55, 0x97, 0xdf, 0xe3, 0xee, 0x93, 0xc6, 0x09, 0xe7,
	0xcc, 0xe7, 0x02, 0x43, 0xa8, 0xcf, 0xef, 0x8d, 0xa8, 0x58, 0xf0, 0xbe, 0x0b, 0xea, 0x88, 0x5c,
	0x9d, 0x16, 0x69, 0x28, 0x75, 0xa0, 0xd7, 0x35, 0x8d, 0x96, 0x75, 0x50, 0xf7, 0x1b, 0x41, 0x01,
	0x79, 0x1f, 0x93, 0xba, 0xd4, 0xff, 0x88, 0xb1, 0x8d, 0xda, 0x6b, 0x5a, 0x9a, 0x6b, 0xb4, 0xf4,
	0x1a, 0xc0, 0x4c, 0x48, 0x66, 0xde, 0xe7, 0xb2, 0x2b, 0x1d, 0x0f, 0x93, 0xa7, 0x62, 0xc4, 0xdf,
	0xb1, 0x7f, 0x5a, 0x18, 0x06, 0xf8, 0x8a, 0x86, 0x56, 0x5a, 0xd6, 0xc1, 0xb6, 0xdf, 0x48, 0x0a,
	0xc8, 0xfb, 0xa3, 0x1c, 0x60, 0xca, 0xea, 0xfc, 0x04, 0xd5, 0xc9, 0x7d, 0xb3, 0x34, 0x5a, 0x95,
	0xf6, 0x1e, 0x82, 0xde, 0x38, 0x9e, 0x80, 0xb2, 0x40, 0xb2, 0xdb, 0x21, 0x4e, 0x06, 0xea, 0x0a,
	0x1a, 0xeb, 0x14, 0xcc, 0x8a, 0xaf, 0x74, 0xcb, 0x05, 0xab, 0xbd, 0xcf, 0x4c, 0x7c, 0x0d, 0x3e,
	0x0e, 0xc2, 0x48, 0x04, 0x61, 0x74, 0x12, 0x8b, 0xf0, 0x1c, 0xf7, 0x5f, 0xf1, 0x00, 0x8a, 0xb5,
	0x18, 0x5b, 0x11, 0x81, 0x03, 0x7f, 0x12, 0x47, 0x62, 0x84, 0xd5, 0x93, 0x4f, 0x71, 0x08, 0x81,
	0xfb, 0x58, 0x70, 0x85, 0x25, 0x93, 0xad, 0x00, 0x00, 0x03, 0x75, 0x2a, 0x82, 0x44, 0x8c, 0xe2,
	0x59, 0x52, 0x9a, 0x95, 0x0b, 0x18, 0x52, 0x0c, 0x7f, 0x4c, 0xc2, 0x68, 0x26, 0x78, 0x69, 0x5e,
	0xd6, 0x17, 0xc0, 0x52, 0x1e, 0x31, 0xe4, 0x64, 0xeb, 0x37, 0x36, 0x05, 0x82, 0x2c, 0x1e, 0x31,
	0xc5, 0x45, 0xbf, 0x7a, 0x14, 0x30, 0x58, 0x77, 0x31, 0x0e, 0x86, 0xa5, 0x0b, 0x21, 0x22, 0xdf,
	0xfe, 0xa2, 0x4a, 0x6a, 0xed, 0x09, 0x43, 0x9f, 0xd5, 0x49, 0x15, 0x5d, 0x4f, 0x0d, 0xf7, 0x36,
	0x69, 0x68, 0x4f, 0xc8, 0xd4, 0x74, 0x6f, 0x11, 0xd2, 0x1e, 0xbd, 0xf0, 0xb9, 0xdc, 0x60, 0xb9,
	0x35, 0x62, 0xf5, 0x1f, 0xf4, 0xa9, 0x0d, 0x0b, 0xc5, 0xb3, 0x24, 0x75, 0x80, 0x52, 0x7b, 0x55,
	0xa4, 0x75, 0x77, 0x9b, 0xd4, 0x3b, 0x31, 0x36, 0xd4, 0x68, 0x4e, 0x09, 0xac, 0x6b, 0x8f, 0x62,
	0xb4, 0x01, 0x0c, 0x8a, 0xe7, 0x1f, 0xba, 0x05, 0xfb, 0xf3, 0x37, 0x13, 0xba, 0x8d, 0xfb, 0x8b,
	0xb7, 0x0d, 0x7a, 0x4b, 0xa9, 0x16, 0x31, 0x19, 0x38, 0x7a, 0x1b, 0x08, 0xf2, 0x47, 0x05, 0x4a,
	0xdd, 0x06, 0xe6, 0x18, 0x9c, 0x32, 0xf4, 0x0e, 0x30, 0x2f, 0xee, 0xab, 0xd4, 0x85, 0xdf, 0xc5,
	0x6d, 0x93, 0xde, 0x85, 0xcd, 0xea, 0x52, 0x46, 0xef, 0xb9, 0x94, 0x6c, 0xe9, 0xd7, 0x2a, 0xfa,
	0x35, 0xd4, 0x2d, 0xbf, 0x7e, 0xd0, 0x1d, 0x10, 0x95, 0xdf, 0x3e, 0xe8, 0xfb, 0x05, 0x81, 0x42,
	0x9a, 0xee, 0x1d, 0xb2, 0x5d, 0x1a, 0xb3, 0xe9, 0xd7, 0x01, 0x2a, 0x4d, 0xc0, 0x74, 0x17, 0x4d,
	0x28, 0x46, 0x47, 0xfa, 0x0d, 0xdc, 0xa3, 0x4f, 0x93, 0x74, 0x0f, 0x44, 0xe5, 0x23, 0x1b, 0xfd,
	0x26, 0x92, 0x14, 0x13, 0x15, 0xdd, 0x07, 0xd9, 0xfa, 0xcc, 0x43, 0x3f, 0x00, 0x65, 0x8b, 0xc9,
	0x83, 0xb6, 0xf0, 0x77, 0xde, 0xa0, 0xe9, 0xb7, 0x90, 0x45, 0xd1, 0x60, 0xa9, 0xe7, 0xde, 0x23,
	0x74, 0xe9, 0x80, 0x1e, 0x52, 0x06, 0xe8, 0x11, 0x63, 0xa5, 0x05, 0xca, 0x5d, 0x97, 0xdc, 0x52,
	0x10, 0x10, 0x3f, 0x8a, 0x18, 0xbd, 0x00, 0xac, 0xfc, 0x3f, 0x15, 0x3a, 0x74, 0xdf, 0x27, 0x77,
	0x73, 0xec, 0x61, 0x90, 0x24, 0xc1, 0x90, 0x0f, 0x06, 0x3d, 0x3a, 0x02, 0xb6, 0xcb, 0x17, 0x3f,
	0x1a, 0xba, 0xdb, 0xc4, 0xc9, 0x0e, 0x4f, 0xfa, 0x77, 0xc3, 0x6d, 0x10, 0x5b, 0x9e, 0x66, 0xf4,
	0x1f, 0x86, 0xeb, 0x92, 0xed, 0xd2, 0x89, 0x40, 0xff, 0x69, 0x3c, 0xa4, 0x2f, 0x5f, 0xed, 0x1b,
	0xff, 0x7a, 0xb5, 0x6f, 0xfc, 0xe7, 0xd5, 0xbe, 0xf1, 0x87, 0xff, 0xee, 0xbf, 0xf7, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8d, 0x44, 0x2d, 0x8b, 0xf3, 0x19, 0x00, 0x00,
}
