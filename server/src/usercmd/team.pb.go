// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: team.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		team.proto

	It has these top-level messages:
		ReqTeamLogin
		RetTeamLogin
		RetErrorCmd
		ReqHeartBeat
		RetSendNotice
		RetStopNotice
		RetMaintainNotice
		RetCreateTeam
		ReqCreateTeam
		RetDissolveTeam
		ReqDissolveTeam
		RetTeamInvite
		ReqTeamInvite
		ReqDoInvite
		ReqJoinUserTeam
		ReqOnlineFriendList
		RetOnlineFriendList
		ReqTeamInviteList
		RetTeamInviteList
		ReqStartGame
		RetStartGame
		RetRoomUserListToGate
		ReqChangeName
		RetChangeName
		RetRefreshName
		ReqRefreshName
		RetChooseSyncTeam
		ReqChooseSyncTeam
		RetWaitTeamList
		ReqWaitTeamList
		ReqJoinTeamGame
		ReqNewbieList
		RetNewbieList
		RetLeaveTeam
		ReqTeamKickUser
		RetTeamKickUser
		ReqCreateRoom
		RetCreateRoom
		ReqSetRoomData
		RetSetRoomData
		ReqRoomTeamList
		UserData
		RetRoomTeamList
		ReqRoomInvite
		RetRoomInvite
		ReqDoRoomInvite
		RetDoRoomInvite
		ReqDissRoom
		RetDissRoom
		ReqRChgName
		RetRChgName
		RetIntoRoom
		RetExitRoom
		ReqChangeTeam
		RetChangeTeam
		ReqSetTeamName
		RetSetTeamName
		ReqStartRGame
		RetTReConnect
		ReqJoinTRoom
		ReqTKickUser
		RetTKickUser
		ReqSetTMemPriv
		RetSetTMemPriv
		ReqRandomUserNum
		RetBChgName
		RetBReConnect
		ReqBReConnect
		AddFriendRequest
		PushAgreeAddFriend
		RetMessageAddFollow
		UpUserMessage
		RedPointData
		RetPushMsgCmd
		UpdateShakeTime
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TeamCmd int32

const (
	TeamCmd_Login                  TeamCmd = 1
	TeamCmd_FriendList             TeamCmd = 2
	TeamCmd_TeamInvite             TeamCmd = 3
	TeamCmd_DoInvite               TeamCmd = 4
	TeamCmd_InviteList             TeamCmd = 5
	TeamCmd_StartGame              TeamCmd = 6
	TeamCmd_ChangeName             TeamCmd = 7
	TeamCmd_DissTeam               TeamCmd = 8
	TeamCmd_ErrorCmd               TeamCmd = 9
	TeamCmd_HeartBeat              TeamCmd = 10
	TeamCmd_JoinTeam               TeamCmd = 11
	TeamCmd_SendNotice             TeamCmd = 12
	TeamCmd_PushMsgCmd             TeamCmd = 13
	TeamCmd_CreateTeam             TeamCmd = 14
	TeamCmd_NewbieList             TeamCmd = 15
	TeamCmd_CreateRoom             TeamCmd = 16
	TeamCmd_SetRoomData            TeamCmd = 17
	TeamCmd_RoomTeamList           TeamCmd = 18
	TeamCmd_RoomInvite             TeamCmd = 19
	TeamCmd_DoRoomInvite           TeamCmd = 20
	TeamCmd_DissRoom               TeamCmd = 21
	TeamCmd_RChgName               TeamCmd = 22
	TeamCmd_IntoRoom               TeamCmd = 23
	TeamCmd_ExitRoom               TeamCmd = 24
	TeamCmd_ChangeTeam             TeamCmd = 25
	TeamCmd_SetTeamName            TeamCmd = 26
	TeamCmd_StartRGame             TeamCmd = 27
	TeamCmd_TReConnect             TeamCmd = 29
	TeamCmd_JoinTRoom              TeamCmd = 30
	TeamCmd_JoinUserTeam           TeamCmd = 31
	TeamCmd_LeaveTeam              TeamCmd = 32
	TeamCmd_TKickUser              TeamCmd = 40
	TeamCmd_SetTMemPriv            TeamCmd = 43
	TeamCmd_RandomUserNum          TeamCmd = 45
	TeamCmd_TeamKickUser           TeamCmd = 46
	TeamCmd_StopNotice             TeamCmd = 48
	TeamCmd_MaintainNotice         TeamCmd = 49
	TeamCmd_ChooseSyncTeam         TeamCmd = 50
	TeamCmd_WaitTeamList           TeamCmd = 51
	TeamCmd_RefreshWaitTeamList    TeamCmd = 52
	TeamCmd_RefreshName            TeamCmd = 53
	TeamCmd_BReConnect             TeamCmd = 207
	TeamCmd_AddFriendNotify        TeamCmd = 208
	TeamCmd_PushAgreeFriend        TeamCmd = 209
	TeamCmd_UpdateShake            TeamCmd = 210
	TeamCmd_AddFollow              TeamCmd = 211
	TeamCmd_TeamToGateRoomUserList TeamCmd = 212
	TeamCmd_UpdateUserInfo         TeamCmd = 213
)

var TeamCmd_name = map[int32]string{
	1:   "Login",
	2:   "FriendList",
	3:   "TeamInvite",
	4:   "DoInvite",
	5:   "InviteList",
	6:   "StartGame",
	7:   "ChangeName",
	8:   "DissTeam",
	9:   "ErrorCmd",
	10:  "HeartBeat",
	11:  "JoinTeam",
	12:  "SendNotice",
	13:  "PushMsgCmd",
	14:  "CreateTeam",
	15:  "NewbieList",
	16:  "CreateRoom",
	17:  "SetRoomData",
	18:  "RoomTeamList",
	19:  "RoomInvite",
	20:  "DoRoomInvite",
	21:  "DissRoom",
	22:  "RChgName",
	23:  "IntoRoom",
	24:  "ExitRoom",
	25:  "ChangeTeam",
	26:  "SetTeamName",
	27:  "StartRGame",
	29:  "TReConnect",
	30:  "JoinTRoom",
	31:  "JoinUserTeam",
	32:  "LeaveTeam",
	40:  "TKickUser",
	43:  "SetTMemPriv",
	45:  "RandomUserNum",
	46:  "TeamKickUser",
	48:  "StopNotice",
	49:  "MaintainNotice",
	50:  "ChooseSyncTeam",
	51:  "WaitTeamList",
	52:  "RefreshWaitTeamList",
	53:  "RefreshName",
	207: "BReConnect",
	208: "AddFriendNotify",
	209: "PushAgreeFriend",
	210: "UpdateShake",
	211: "AddFollow",
	212: "TeamToGateRoomUserList",
	213: "UpdateUserInfo",
}
var TeamCmd_value = map[string]int32{
	"Login":                  1,
	"FriendList":             2,
	"TeamInvite":             3,
	"DoInvite":               4,
	"InviteList":             5,
	"StartGame":              6,
	"ChangeName":             7,
	"DissTeam":               8,
	"ErrorCmd":               9,
	"HeartBeat":              10,
	"JoinTeam":               11,
	"SendNotice":             12,
	"PushMsgCmd":             13,
	"CreateTeam":             14,
	"NewbieList":             15,
	"CreateRoom":             16,
	"SetRoomData":            17,
	"RoomTeamList":           18,
	"RoomInvite":             19,
	"DoRoomInvite":           20,
	"DissRoom":               21,
	"RChgName":               22,
	"IntoRoom":               23,
	"ExitRoom":               24,
	"ChangeTeam":             25,
	"SetTeamName":            26,
	"StartRGame":             27,
	"TReConnect":             29,
	"JoinTRoom":              30,
	"JoinUserTeam":           31,
	"LeaveTeam":              32,
	"TKickUser":              40,
	"SetTMemPriv":            43,
	"RandomUserNum":          45,
	"TeamKickUser":           46,
	"StopNotice":             48,
	"MaintainNotice":         49,
	"ChooseSyncTeam":         50,
	"WaitTeamList":           51,
	"RefreshWaitTeamList":    52,
	"RefreshName":            53,
	"BReConnect":             207,
	"AddFriendNotify":        208,
	"PushAgreeFriend":        209,
	"UpdateShake":            210,
	"AddFollow":              211,
	"TeamToGateRoomUserList": 212,
	"UpdateUserInfo":         213,
}

func (x TeamCmd) Enum() *TeamCmd {
	p := new(TeamCmd)
	*p = x
	return p
}
func (x TeamCmd) String() string {
	return proto.EnumName(TeamCmd_name, int32(x))
}
func (x *TeamCmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TeamCmd_value, data, "TeamCmd")
	if err != nil {
		return err
	}
	*x = TeamCmd(value)
	return nil
}
func (TeamCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorTeam, []int{0} }

// 请求登录队伍服务器
type ReqTeamLogin struct {
	Name      string `protobuf:"bytes,1,req,name=Name,json=name" json:"Name"`
	Key       string `protobuf:"bytes,2,req,name=Key,json=key" json:"Key"`
	ClientVer string `protobuf:"bytes,3,opt,name=ClientVer,json=clientVer" json:"ClientVer"`
}

func (m *ReqTeamLogin) Reset()                    { *m = ReqTeamLogin{} }
func (m *ReqTeamLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqTeamLogin) ProtoMessage()               {}
func (*ReqTeamLogin) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{0} }

func (m *ReqTeamLogin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqTeamLogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqTeamLogin) GetClientVer() string {
	if m != nil {
		return m.ClientVer
	}
	return ""
}

// 返回登录成功
type RetTeamLogin struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
	RemTime uint32 `protobuf:"varint,2,opt,name=RemTime,json=remTime" json:"RemTime"`
	Season  bool   `protobuf:"varint,3,opt,name=Season,json=season" json:"Season"`
}

func (m *RetTeamLogin) Reset()                    { *m = RetTeamLogin{} }
func (m *RetTeamLogin) String() string            { return proto.CompactTextString(m) }
func (*RetTeamLogin) ProtoMessage()               {}
func (*RetTeamLogin) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{1} }

func (m *RetTeamLogin) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RetTeamLogin) GetRemTime() uint32 {
	if m != nil {
		return m.RemTime
	}
	return 0
}

func (m *RetTeamLogin) GetSeason() bool {
	if m != nil {
		return m.Season
	}
	return false
}

// 组队统一错误码
type RetErrorCmd struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
	Params  uint32 `protobuf:"varint,2,opt,name=Params,json=params" json:"Params"`
}

func (m *RetErrorCmd) Reset()                    { *m = RetErrorCmd{} }
func (m *RetErrorCmd) String() string            { return proto.CompactTextString(m) }
func (*RetErrorCmd) ProtoMessage()               {}
func (*RetErrorCmd) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{2} }

func (m *RetErrorCmd) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RetErrorCmd) GetParams() uint32 {
	if m != nil {
		return m.Params
	}
	return 0
}

// 心跳包(原样返回)
type ReqHeartBeat struct {
}

func (m *ReqHeartBeat) Reset()                    { *m = ReqHeartBeat{} }
func (m *ReqHeartBeat) String() string            { return proto.CompactTextString(m) }
func (*ReqHeartBeat) ProtoMessage()               {}
func (*ReqHeartBeat) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{3} }

// 发送公告
type RetSendNotice struct {
	MsgType  uint32                 `protobuf:"varint,1,req,name=MsgType,json=msgType" json:"MsgType"`
	LastTm   uint32                 `protobuf:"varint,2,req,name=LastTm,json=lastTm" json:"LastTm"`
	Params   []uint32               `protobuf:"varint,3,rep,name=Params,json=params" json:"Params,omitempty"`
	Text     string                 `protobuf:"bytes,4,opt,name=Text,json=text" json:"Text"`
	Awards   []*RetSendNotice_Award `protobuf:"bytes,5,rep,name=Awards,json=awards" json:"Awards,omitempty"`
	NoticeId uint64                 `protobuf:"varint,6,opt,name=NoticeId,json=noticeId" json:"NoticeId"`
	STime    uint32                 `protobuf:"varint,7,opt,name=STime,json=sTime" json:"STime"`
	RTime    uint32                 `protobuf:"varint,8,opt,name=RTime,json=rTime" json:"RTime"`
	TextVer  string                 `protobuf:"bytes,9,opt,name=TextVer,json=textVer" json:"TextVer"`
}

func (m *RetSendNotice) Reset()                    { *m = RetSendNotice{} }
func (m *RetSendNotice) String() string            { return proto.CompactTextString(m) }
func (*RetSendNotice) ProtoMessage()               {}
func (*RetSendNotice) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{4} }

func (m *RetSendNotice) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *RetSendNotice) GetLastTm() uint32 {
	if m != nil {
		return m.LastTm
	}
	return 0
}

func (m *RetSendNotice) GetParams() []uint32 {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RetSendNotice) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RetSendNotice) GetAwards() []*RetSendNotice_Award {
	if m != nil {
		return m.Awards
	}
	return nil
}

func (m *RetSendNotice) GetNoticeId() uint64 {
	if m != nil {
		return m.NoticeId
	}
	return 0
}

func (m *RetSendNotice) GetSTime() uint32 {
	if m != nil {
		return m.STime
	}
	return 0
}

func (m *RetSendNotice) GetRTime() uint32 {
	if m != nil {
		return m.RTime
	}
	return 0
}

func (m *RetSendNotice) GetTextVer() string {
	if m != nil {
		return m.TextVer
	}
	return ""
}

type RetSendNotice_Award struct {
	GoodId uint32 `protobuf:"varint,1,req,name=GoodId,json=goodId" json:"GoodId"`
	Nums   uint32 `protobuf:"varint,2,req,name=Nums,json=nums" json:"Nums"`
}

func (m *RetSendNotice_Award) Reset()                    { *m = RetSendNotice_Award{} }
func (m *RetSendNotice_Award) String() string            { return proto.CompactTextString(m) }
func (*RetSendNotice_Award) ProtoMessage()               {}
func (*RetSendNotice_Award) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{4, 0} }

func (m *RetSendNotice_Award) GetGoodId() uint32 {
	if m != nil {
		return m.GoodId
	}
	return 0
}

func (m *RetSendNotice_Award) GetNums() uint32 {
	if m != nil {
		return m.Nums
	}
	return 0
}

// 终止公告
type RetStopNotice struct {
	MsgType  uint32 `protobuf:"varint,1,req,name=MsgType,json=msgType" json:"MsgType"`
	NoticeId uint64 `protobuf:"varint,2,req,name=NoticeId,json=noticeId" json:"NoticeId"`
}

func (m *RetStopNotice) Reset()                    { *m = RetStopNotice{} }
func (m *RetStopNotice) String() string            { return proto.CompactTextString(m) }
func (*RetStopNotice) ProtoMessage()               {}
func (*RetStopNotice) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{5} }

func (m *RetStopNotice) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *RetStopNotice) GetNoticeId() uint64 {
	if m != nil {
		return m.NoticeId
	}
	return 0
}

type RetMaintainNotice struct {
	MsgType uint32 `protobuf:"varint,1,req,name=MsgType,json=msgType" json:"MsgType"`
	Text    string `protobuf:"bytes,2,opt,name=Text,json=text" json:"Text"`
}

func (m *RetMaintainNotice) Reset()                    { *m = RetMaintainNotice{} }
func (m *RetMaintainNotice) String() string            { return proto.CompactTextString(m) }
func (*RetMaintainNotice) ProtoMessage()               {}
func (*RetMaintainNotice) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{6} }

func (m *RetMaintainNotice) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *RetMaintainNotice) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// * 返回创建组队
type RetCreateTeam struct {
}

func (m *RetCreateTeam) Reset()                    { *m = RetCreateTeam{} }
func (m *RetCreateTeam) String() string            { return proto.CompactTextString(m) }
func (*RetCreateTeam) ProtoMessage()               {}
func (*RetCreateTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{7} }

// * 请求创建组队
type ReqCreateTeam struct {
}

func (m *ReqCreateTeam) Reset()                    { *m = ReqCreateTeam{} }
func (m *ReqCreateTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqCreateTeam) ProtoMessage()               {}
func (*ReqCreateTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{8} }

// * 返回解散队伍
type RetDissolveTeam struct {
}

func (m *RetDissolveTeam) Reset()                    { *m = RetDissolveTeam{} }
func (m *RetDissolveTeam) String() string            { return proto.CompactTextString(m) }
func (*RetDissolveTeam) ProtoMessage()               {}
func (*RetDissolveTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{9} }

// * 请求解散队伍
type ReqDissolveTeam struct {
}

func (m *ReqDissolveTeam) Reset()                    { *m = ReqDissolveTeam{} }
func (m *ReqDissolveTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqDissolveTeam) ProtoMessage()               {}
func (*ReqDissolveTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{10} }

// * 返回收到邀请信息
type RetTeamInvite struct {
	LeaderId    uint64 `protobuf:"varint,1,req,name=LeaderId,json=leaderId" json:"LeaderId"`
	InvName     string `protobuf:"bytes,2,req,name=InvName,json=invName" json:"InvName"`
	InvIcon     uint32 `protobuf:"varint,3,opt,name=InvIcon,json=invIcon" json:"InvIcon"`
	InvPassIcon string `protobuf:"bytes,4,opt,name=InvPassIcon,json=invPassIcon" json:"InvPassIcon"`
	InvId       uint64 `protobuf:"varint,5,opt,name=InvId,json=invId" json:"InvId"`
	InvType     uint32 `protobuf:"varint,6,opt,name=InvType,json=invType" json:"InvType"`
}

func (m *RetTeamInvite) Reset()                    { *m = RetTeamInvite{} }
func (m *RetTeamInvite) String() string            { return proto.CompactTextString(m) }
func (*RetTeamInvite) ProtoMessage()               {}
func (*RetTeamInvite) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{11} }

func (m *RetTeamInvite) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *RetTeamInvite) GetInvName() string {
	if m != nil {
		return m.InvName
	}
	return ""
}

func (m *RetTeamInvite) GetInvIcon() uint32 {
	if m != nil {
		return m.InvIcon
	}
	return 0
}

func (m *RetTeamInvite) GetInvPassIcon() string {
	if m != nil {
		return m.InvPassIcon
	}
	return ""
}

func (m *RetTeamInvite) GetInvId() uint64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *RetTeamInvite) GetInvType() uint32 {
	if m != nil {
		return m.InvType
	}
	return 0
}

// * 请求邀请好友
type ReqTeamInvite struct {
	Ids     []uint64 `protobuf:"varint,1,rep,name=Ids,json=ids" json:"Ids,omitempty"`
	InvType uint32   `protobuf:"varint,2,opt,name=InvType,json=invType" json:"InvType"`
}

func (m *ReqTeamInvite) Reset()                    { *m = ReqTeamInvite{} }
func (m *ReqTeamInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqTeamInvite) ProtoMessage()               {}
func (*ReqTeamInvite) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{12} }

func (m *ReqTeamInvite) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ReqTeamInvite) GetInvType() uint32 {
	if m != nil {
		return m.InvType
	}
	return 0
}

// * 请求回复邀请
type ReqDoInvite struct {
	LeaderId uint64 `protobuf:"varint,1,req,name=LeaderId,json=leaderId" json:"LeaderId"`
	Options  uint32 `protobuf:"varint,2,req,name=Options,json=options" json:"Options"`
}

func (m *ReqDoInvite) Reset()                    { *m = ReqDoInvite{} }
func (m *ReqDoInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqDoInvite) ProtoMessage()               {}
func (*ReqDoInvite) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{13} }

func (m *ReqDoInvite) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *ReqDoInvite) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

// * 加入队长所在的队伍
type ReqJoinUserTeam struct {
	LeaderId uint64 `protobuf:"varint,1,req,name=LeaderId,json=leaderId" json:"LeaderId"`
}

func (m *ReqJoinUserTeam) Reset()                    { *m = ReqJoinUserTeam{} }
func (m *ReqJoinUserTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqJoinUserTeam) ProtoMessage()               {}
func (*ReqJoinUserTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{14} }

func (m *ReqJoinUserTeam) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

// 请求好友列表
type ReqOnlineFriendList struct {
}

func (m *ReqOnlineFriendList) Reset()                    { *m = ReqOnlineFriendList{} }
func (m *ReqOnlineFriendList) String() string            { return proto.CompactTextString(m) }
func (*ReqOnlineFriendList) ProtoMessage()               {}
func (*ReqOnlineFriendList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{15} }

// * 返回好友列表
type RetOnlineFriendList struct {
	Players []*RetOnlineFriendList_FriendData `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
}

func (m *RetOnlineFriendList) Reset()                    { *m = RetOnlineFriendList{} }
func (m *RetOnlineFriendList) String() string            { return proto.CompactTextString(m) }
func (*RetOnlineFriendList) ProtoMessage()               {}
func (*RetOnlineFriendList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{16} }

func (m *RetOnlineFriendList) GetPlayers() []*RetOnlineFriendList_FriendData {
	if m != nil {
		return m.Players
	}
	return nil
}

type RetOnlineFriendList_FriendData struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	State    uint32 `protobuf:"varint,5,req,name=State,json=state" json:"State"`
	PassIcon string `protobuf:"bytes,6,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Level    uint32 `protobuf:"varint,7,opt,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,8,opt,name=Scores,json=scores" json:"Scores"`
}

func (m *RetOnlineFriendList_FriendData) Reset()         { *m = RetOnlineFriendList_FriendData{} }
func (m *RetOnlineFriendList_FriendData) String() string { return proto.CompactTextString(m) }
func (*RetOnlineFriendList_FriendData) ProtoMessage()    {}
func (*RetOnlineFriendList_FriendData) Descriptor() ([]byte, []int) {
	return fileDescriptorTeam, []int{16, 0}
}

func (m *RetOnlineFriendList_FriendData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetOnlineFriendList_FriendData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetOnlineFriendList_FriendData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetOnlineFriendList_FriendData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetOnlineFriendList_FriendData) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetOnlineFriendList_FriendData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetOnlineFriendList_FriendData) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetOnlineFriendList_FriendData) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

// * 请求邀请列表
type ReqTeamInviteList struct {
}

func (m *ReqTeamInviteList) Reset()                    { *m = ReqTeamInviteList{} }
func (m *ReqTeamInviteList) String() string            { return proto.CompactTextString(m) }
func (*ReqTeamInviteList) ProtoMessage()               {}
func (*ReqTeamInviteList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{17} }

// * 返回队伍列表
type RetTeamInviteList struct {
	Players []*RetTeamInviteList_MemberData `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
	QrCode  string                          `protobuf:"bytes,2,opt,name=QrCode,json=qrCode" json:"QrCode"`
}

func (m *RetTeamInviteList) Reset()                    { *m = RetTeamInviteList{} }
func (m *RetTeamInviteList) String() string            { return proto.CompactTextString(m) }
func (*RetTeamInviteList) ProtoMessage()               {}
func (*RetTeamInviteList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{18} }

func (m *RetTeamInviteList) GetPlayers() []*RetTeamInviteList_MemberData {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RetTeamInviteList) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

type RetTeamInviteList_MemberData struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	Name     string `protobuf:"bytes,5,req,name=Name,json=name" json:"Name"`
	State    uint32 `protobuf:"varint,6,req,name=State,json=state" json:"State"`
	IsLeader bool   `protobuf:"varint,7,req,name=IsLeader,json=isLeader" json:"IsLeader"`
	PassIcon string `protobuf:"bytes,8,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	IsNewbie bool   `protobuf:"varint,9,opt,name=IsNewbie,json=isNewbie" json:"IsNewbie"`
	Level    uint32 `protobuf:"varint,10,opt,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,11,opt,name=Scores,json=scores" json:"Scores"`
}

func (m *RetTeamInviteList_MemberData) Reset()         { *m = RetTeamInviteList_MemberData{} }
func (m *RetTeamInviteList_MemberData) String() string { return proto.CompactTextString(m) }
func (*RetTeamInviteList_MemberData) ProtoMessage()    {}
func (*RetTeamInviteList_MemberData) Descriptor() ([]byte, []int) {
	return fileDescriptorTeam, []int{18, 0}
}

func (m *RetTeamInviteList_MemberData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetTeamInviteList_MemberData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetTeamInviteList_MemberData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetTeamInviteList_MemberData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetTeamInviteList_MemberData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetTeamInviteList_MemberData) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetTeamInviteList_MemberData) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func (m *RetTeamInviteList_MemberData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetTeamInviteList_MemberData) GetIsNewbie() bool {
	if m != nil {
		return m.IsNewbie
	}
	return false
}

func (m *RetTeamInviteList_MemberData) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetTeamInviteList_MemberData) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

// 请求开始游戏
type ReqStartGame struct {
}

func (m *ReqStartGame) Reset()                    { *m = ReqStartGame{} }
func (m *ReqStartGame) String() string            { return proto.CompactTextString(m) }
func (*ReqStartGame) ProtoMessage()               {}
func (*ReqStartGame) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{19} }

// 返回开始游戏
type RetStartGame struct {
	Address string `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	Key     string `protobuf:"bytes,2,req,name=Key,json=key" json:"Key"`
}

func (m *RetStartGame) Reset()                    { *m = RetStartGame{} }
func (m *RetStartGame) String() string            { return proto.CompactTextString(m) }
func (*RetStartGame) ProtoMessage()               {}
func (*RetStartGame) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{20} }

func (m *RetStartGame) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RetStartGame) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type RetRoomUserListToGate struct {
	Teamid  uint64   `protobuf:"varint,1,opt,name=teamid" json:"teamid"`
	Userids []uint64 `protobuf:"varint,2,rep,name=userids" json:"userids,omitempty"`
}

func (m *RetRoomUserListToGate) Reset()                    { *m = RetRoomUserListToGate{} }
func (m *RetRoomUserListToGate) String() string            { return proto.CompactTextString(m) }
func (*RetRoomUserListToGate) ProtoMessage()               {}
func (*RetRoomUserListToGate) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{21} }

func (m *RetRoomUserListToGate) GetTeamid() uint64 {
	if m != nil {
		return m.Teamid
	}
	return 0
}

func (m *RetRoomUserListToGate) GetUserids() []uint64 {
	if m != nil {
		return m.Userids
	}
	return nil
}

// * 请求改名
type ReqChangeName struct {
	Name string `protobuf:"bytes,1,req,name=Name,json=name" json:"Name"`
}

func (m *ReqChangeName) Reset()                    { *m = ReqChangeName{} }
func (m *ReqChangeName) String() string            { return proto.CompactTextString(m) }
func (*ReqChangeName) ProtoMessage()               {}
func (*ReqChangeName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{22} }

func (m *ReqChangeName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// * 返回改名成功
type RetChangeName struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
}

func (m *RetChangeName) Reset()                    { *m = RetChangeName{} }
func (m *RetChangeName) String() string            { return proto.CompactTextString(m) }
func (*RetChangeName) ProtoMessage()               {}
func (*RetChangeName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{23} }

func (m *RetChangeName) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

type RetRefreshName struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
}

func (m *RetRefreshName) Reset()                    { *m = RetRefreshName{} }
func (m *RetRefreshName) String() string            { return proto.CompactTextString(m) }
func (*RetRefreshName) ProtoMessage()               {}
func (*RetRefreshName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{24} }

func (m *RetRefreshName) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

type ReqRefreshName struct {
	Name string `protobuf:"bytes,1,req,name=Name,json=name" json:"Name"`
}

func (m *ReqRefreshName) Reset()                    { *m = ReqRefreshName{} }
func (m *ReqRefreshName) String() string            { return proto.CompactTextString(m) }
func (*ReqRefreshName) ProtoMessage()               {}
func (*ReqRefreshName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{25} }

func (m *ReqRefreshName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RetChooseSyncTeam struct {
	ChooseType bool `protobuf:"varint,1,opt,name=ChooseType,json=chooseType" json:"ChooseType"`
}

func (m *RetChooseSyncTeam) Reset()                    { *m = RetChooseSyncTeam{} }
func (m *RetChooseSyncTeam) String() string            { return proto.CompactTextString(m) }
func (*RetChooseSyncTeam) ProtoMessage()               {}
func (*RetChooseSyncTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{26} }

func (m *RetChooseSyncTeam) GetChooseType() bool {
	if m != nil {
		return m.ChooseType
	}
	return false
}

// * 请求勾选所有人可加入
type ReqChooseSyncTeam struct {
	ChooseType bool `protobuf:"varint,1,opt,name=ChooseType,json=chooseType" json:"ChooseType"`
}

func (m *ReqChooseSyncTeam) Reset()                    { *m = ReqChooseSyncTeam{} }
func (m *ReqChooseSyncTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqChooseSyncTeam) ProtoMessage()               {}
func (*ReqChooseSyncTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{27} }

func (m *ReqChooseSyncTeam) GetChooseType() bool {
	if m != nil {
		return m.ChooseType
	}
	return false
}

// * 返回请求等待队伍列表
type RetWaitTeamList struct {
	Waitlist []*RetWaitTeamList_TeamData `protobuf:"bytes,1,rep,name=Waitlist,json=waitlist" json:"Waitlist,omitempty"`
}

func (m *RetWaitTeamList) Reset()                    { *m = RetWaitTeamList{} }
func (m *RetWaitTeamList) String() string            { return proto.CompactTextString(m) }
func (*RetWaitTeamList) ProtoMessage()               {}
func (*RetWaitTeamList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{28} }

func (m *RetWaitTeamList) GetWaitlist() []*RetWaitTeamList_TeamData {
	if m != nil {
		return m.Waitlist
	}
	return nil
}

type RetWaitTeamList_TeamData struct {
	TId      uint64 `protobuf:"varint,1,req,name=TId,json=tId" json:"TId"`
	Name     string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name"`
	Account  string `protobuf:"bytes,3,opt,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,4,opt,name=Sex,json=sex" json:"Sex"`
	Icon     uint32 `protobuf:"varint,5,opt,name=Icon,json=icon" json:"Icon"`
	PassIcon string `protobuf:"bytes,6,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Level    uint32 `protobuf:"varint,7,opt,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,8,opt,name=Scores,json=scores" json:"Scores"`
	MemNum   uint32 `protobuf:"varint,9,opt,name=MemNum,json=memNum" json:"MemNum"`
}

func (m *RetWaitTeamList_TeamData) Reset()                    { *m = RetWaitTeamList_TeamData{} }
func (m *RetWaitTeamList_TeamData) String() string            { return proto.CompactTextString(m) }
func (*RetWaitTeamList_TeamData) ProtoMessage()               {}
func (*RetWaitTeamList_TeamData) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{28, 0} }

func (m *RetWaitTeamList_TeamData) GetTId() uint64 {
	if m != nil {
		return m.TId
	}
	return 0
}

func (m *RetWaitTeamList_TeamData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetWaitTeamList_TeamData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetWaitTeamList_TeamData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetWaitTeamList_TeamData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetWaitTeamList_TeamData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetWaitTeamList_TeamData) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetWaitTeamList_TeamData) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *RetWaitTeamList_TeamData) GetMemNum() uint32 {
	if m != nil {
		return m.MemNum
	}
	return 0
}

// * 请求等待队伍列表
type ReqWaitTeamList struct {
	ChangeType bool `protobuf:"varint,1,opt,name=ChangeType,json=changeType" json:"ChangeType"`
}

func (m *ReqWaitTeamList) Reset()                    { *m = ReqWaitTeamList{} }
func (m *ReqWaitTeamList) String() string            { return proto.CompactTextString(m) }
func (*ReqWaitTeamList) ProtoMessage()               {}
func (*ReqWaitTeamList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{29} }

func (m *ReqWaitTeamList) GetChangeType() bool {
	if m != nil {
		return m.ChangeType
	}
	return false
}

// 通过房间id加入队伍游戏,返回开始游戏
type ReqJoinTeamGame struct {
	RoomId uint32 `protobuf:"varint,1,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *ReqJoinTeamGame) Reset()                    { *m = ReqJoinTeamGame{} }
func (m *ReqJoinTeamGame) String() string            { return proto.CompactTextString(m) }
func (*ReqJoinTeamGame) ProtoMessage()               {}
func (*ReqJoinTeamGame) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{30} }

func (m *ReqJoinTeamGame) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 请求新手列表
type ReqNewbieList struct {
}

func (m *ReqNewbieList) Reset()                    { *m = ReqNewbieList{} }
func (m *ReqNewbieList) String() string            { return proto.CompactTextString(m) }
func (*ReqNewbieList) ProtoMessage()               {}
func (*ReqNewbieList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{31} }

// 返回新手列表
type RetNewbieList struct {
	Players []*RetNewbieList_NewbieData `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
}

func (m *RetNewbieList) Reset()                    { *m = RetNewbieList{} }
func (m *RetNewbieList) String() string            { return proto.CompactTextString(m) }
func (*RetNewbieList) ProtoMessage()               {}
func (*RetNewbieList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{32} }

func (m *RetNewbieList) GetPlayers() []*RetNewbieList_NewbieData {
	if m != nil {
		return m.Players
	}
	return nil
}

type RetNewbieList_NewbieData struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	PassIcon string `protobuf:"bytes,5,req,name=PassIcon,json=passIcon" json:"PassIcon"`
	Location uint32 `protobuf:"varint,6,req,name=Location,json=location" json:"Location"`
}

func (m *RetNewbieList_NewbieData) Reset()                    { *m = RetNewbieList_NewbieData{} }
func (m *RetNewbieList_NewbieData) String() string            { return proto.CompactTextString(m) }
func (*RetNewbieList_NewbieData) ProtoMessage()               {}
func (*RetNewbieList_NewbieData) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{32, 0} }

func (m *RetNewbieList_NewbieData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetNewbieList_NewbieData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetNewbieList_NewbieData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetNewbieList_NewbieData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetNewbieList_NewbieData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetNewbieList_NewbieData) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

// * 返回离开队伍
type RetLeaveTeam struct {
}

func (m *RetLeaveTeam) Reset()                    { *m = RetLeaveTeam{} }
func (m *RetLeaveTeam) String() string            { return proto.CompactTextString(m) }
func (*RetLeaveTeam) ProtoMessage()               {}
func (*RetLeaveTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{33} }

// 组队踢人
type ReqTeamKickUser struct {
	Id uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
}

func (m *ReqTeamKickUser) Reset()                    { *m = ReqTeamKickUser{} }
func (m *ReqTeamKickUser) String() string            { return proto.CompactTextString(m) }
func (*ReqTeamKickUser) ProtoMessage()               {}
func (*ReqTeamKickUser) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{34} }

func (m *ReqTeamKickUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 返回被踢 (被踢玩家)
type RetTeamKickUser struct {
	Id uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
}

func (m *RetTeamKickUser) Reset()                    { *m = RetTeamKickUser{} }
func (m *RetTeamKickUser) String() string            { return proto.CompactTextString(m) }
func (*RetTeamKickUser) ProtoMessage()               {}
func (*RetTeamKickUser) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{35} }

func (m *RetTeamKickUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// //////////////////////////////// 自建房间 开始 /////////////////////////////////////
// 请求创建房间 (返回错误码)
type ReqCreateRoom struct {
	Name   string `protobuf:"bytes,1,req,name=Name,json=name" json:"Name"`
	Model  uint32 `protobuf:"varint,2,req,name=Model,json=model" json:"Model"`
	Priv   uint32 `protobuf:"varint,3,req,name=Priv,json=priv" json:"Priv"`
	Passwd string `protobuf:"bytes,4,opt,name=Passwd,json=passwd" json:"Passwd"`
}

func (m *ReqCreateRoom) Reset()                    { *m = ReqCreateRoom{} }
func (m *ReqCreateRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqCreateRoom) ProtoMessage()               {}
func (*ReqCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{36} }

func (m *ReqCreateRoom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqCreateRoom) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *ReqCreateRoom) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

func (m *ReqCreateRoom) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

// 返回创建房间
type RetCreateRoom struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
}

func (m *RetCreateRoom) Reset()                    { *m = RetCreateRoom{} }
func (m *RetCreateRoom) String() string            { return proto.CompactTextString(m) }
func (*RetCreateRoom) ProtoMessage()               {}
func (*RetCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{37} }

func (m *RetCreateRoom) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

// 请求设置房间
type ReqSetRoomData struct {
	Name    string `protobuf:"bytes,1,req,name=Name,json=name" json:"Name"`
	Model   uint32 `protobuf:"varint,2,req,name=Model,json=model" json:"Model"`
	Priv    uint32 `protobuf:"varint,3,req,name=Priv,json=priv" json:"Priv"`
	GTime   uint32 `protobuf:"varint,4,opt,name=GTime,json=gTime" json:"GTime"`
	CanJoin bool   `protobuf:"varint,5,opt,name=CanJoin,json=canJoin" json:"CanJoin"`
	Passwd  string `protobuf:"bytes,6,opt,name=Passwd,json=passwd" json:"Passwd"`
	TeamNum uint32 `protobuf:"varint,7,opt,name=TeamNum,json=teamNum" json:"TeamNum"`
	MemNum  uint32 `protobuf:"varint,8,opt,name=MemNum,json=memNum" json:"MemNum"`
}

func (m *ReqSetRoomData) Reset()                    { *m = ReqSetRoomData{} }
func (m *ReqSetRoomData) String() string            { return proto.CompactTextString(m) }
func (*ReqSetRoomData) ProtoMessage()               {}
func (*ReqSetRoomData) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{38} }

func (m *ReqSetRoomData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqSetRoomData) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *ReqSetRoomData) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

func (m *ReqSetRoomData) GetGTime() uint32 {
	if m != nil {
		return m.GTime
	}
	return 0
}

func (m *ReqSetRoomData) GetCanJoin() bool {
	if m != nil {
		return m.CanJoin
	}
	return false
}

func (m *ReqSetRoomData) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *ReqSetRoomData) GetTeamNum() uint32 {
	if m != nil {
		return m.TeamNum
	}
	return 0
}

func (m *ReqSetRoomData) GetMemNum() uint32 {
	if m != nil {
		return m.MemNum
	}
	return 0
}

// 广播房间信息
type RetSetRoomData struct {
	Name    string `protobuf:"bytes,1,req,name=Name,json=name" json:"Name"`
	Model   uint32 `protobuf:"varint,2,req,name=Model,json=model" json:"Model"`
	Priv    uint32 `protobuf:"varint,3,req,name=Priv,json=priv" json:"Priv"`
	GTime   uint32 `protobuf:"varint,4,opt,name=GTime,json=gTime" json:"GTime"`
	CanJoin bool   `protobuf:"varint,5,opt,name=CanJoin,json=canJoin" json:"CanJoin"`
	TeamNum uint32 `protobuf:"varint,6,opt,name=TeamNum,json=teamNum" json:"TeamNum"`
	MemNum  uint32 `protobuf:"varint,7,opt,name=MemNum,json=memNum" json:"MemNum"`
}

func (m *RetSetRoomData) Reset()                    { *m = RetSetRoomData{} }
func (m *RetSetRoomData) String() string            { return proto.CompactTextString(m) }
func (*RetSetRoomData) ProtoMessage()               {}
func (*RetSetRoomData) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{39} }

func (m *RetSetRoomData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetSetRoomData) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *RetSetRoomData) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

func (m *RetSetRoomData) GetGTime() uint32 {
	if m != nil {
		return m.GTime
	}
	return 0
}

func (m *RetSetRoomData) GetCanJoin() bool {
	if m != nil {
		return m.CanJoin
	}
	return false
}

func (m *RetSetRoomData) GetTeamNum() uint32 {
	if m != nil {
		return m.TeamNum
	}
	return 0
}

func (m *RetSetRoomData) GetMemNum() uint32 {
	if m != nil {
		return m.MemNum
	}
	return 0
}

// 请求房间数据
type ReqRoomTeamList struct {
}

func (m *ReqRoomTeamList) Reset()                    { *m = ReqRoomTeamList{} }
func (m *ReqRoomTeamList) String() string            { return proto.CompactTextString(m) }
func (*ReqRoomTeamList) ProtoMessage()               {}
func (*ReqRoomTeamList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{40} }

// 玩家数据
type UserData struct {
	UId      uint64 `protobuf:"varint,1,opt,name=UId,json=uId" json:"UId"`
	Account  string `protobuf:"bytes,2,opt,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,opt,name=Icon,json=icon" json:"Icon"`
	PassIcon string `protobuf:"bytes,4,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Sex      uint32 `protobuf:"varint,5,opt,name=Sex,json=sex" json:"Sex"`
	Level    uint32 `protobuf:"varint,6,opt,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,7,opt,name=Scores,json=scores" json:"Scores"`
	Name     string `protobuf:"bytes,8,opt,name=Name,json=name" json:"Name"`
	Priv     uint32 `protobuf:"varint,9,opt,name=Priv,json=priv" json:"Priv"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (m *UserData) String() string            { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{41} }

func (m *UserData) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *UserData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UserData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *UserData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *UserData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserData) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UserData) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *UserData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserData) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

// 返回房间数据
type RetRoomTeamList struct {
	LeaderId uint64                      `protobuf:"varint,1,req,name=LeaderId,json=leaderId" json:"LeaderId"`
	Name     string                      `protobuf:"bytes,2,req,name=Name,json=name" json:"Name"`
	Model    uint32                      `protobuf:"varint,3,req,name=Model,json=model" json:"Model"`
	Priv     uint32                      `protobuf:"varint,4,req,name=Priv,json=priv" json:"Priv"`
	Teams    []*RetRoomTeamList_TeamData `protobuf:"bytes,5,rep,name=Teams,json=teams" json:"Teams,omitempty"`
	GTime    uint32                      `protobuf:"varint,6,opt,name=GTime,json=gTime" json:"GTime"`
	CanJoin  bool                        `protobuf:"varint,7,opt,name=CanJoin,json=canJoin" json:"CanJoin"`
	TeamNum  uint32                      `protobuf:"varint,8,opt,name=TeamNum,json=teamNum" json:"TeamNum"`
	MemNum   uint32                      `protobuf:"varint,9,opt,name=MemNum,json=memNum" json:"MemNum"`
	QrCode   string                      `protobuf:"bytes,10,opt,name=QrCode,json=qrCode" json:"QrCode"`
}

func (m *RetRoomTeamList) Reset()                    { *m = RetRoomTeamList{} }
func (m *RetRoomTeamList) String() string            { return proto.CompactTextString(m) }
func (*RetRoomTeamList) ProtoMessage()               {}
func (*RetRoomTeamList) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{42} }

func (m *RetRoomTeamList) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *RetRoomTeamList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetRoomTeamList) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *RetRoomTeamList) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

func (m *RetRoomTeamList) GetTeams() []*RetRoomTeamList_TeamData {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *RetRoomTeamList) GetGTime() uint32 {
	if m != nil {
		return m.GTime
	}
	return 0
}

func (m *RetRoomTeamList) GetCanJoin() bool {
	if m != nil {
		return m.CanJoin
	}
	return false
}

func (m *RetRoomTeamList) GetTeamNum() uint32 {
	if m != nil {
		return m.TeamNum
	}
	return 0
}

func (m *RetRoomTeamList) GetMemNum() uint32 {
	if m != nil {
		return m.MemNum
	}
	return 0
}

func (m *RetRoomTeamList) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

type RetRoomTeamList_TeamData struct {
	TId  uint32      `protobuf:"varint,1,req,name=TId,json=tId" json:"TId"`
	Name string      `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name"`
	Mems []*UserData `protobuf:"bytes,3,rep,name=Mems,json=mems" json:"Mems,omitempty"`
}

func (m *RetRoomTeamList_TeamData) Reset()                    { *m = RetRoomTeamList_TeamData{} }
func (m *RetRoomTeamList_TeamData) String() string            { return proto.CompactTextString(m) }
func (*RetRoomTeamList_TeamData) ProtoMessage()               {}
func (*RetRoomTeamList_TeamData) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{42, 0} }

func (m *RetRoomTeamList_TeamData) GetTId() uint32 {
	if m != nil {
		return m.TId
	}
	return 0
}

func (m *RetRoomTeamList_TeamData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetRoomTeamList_TeamData) GetMems() []*UserData {
	if m != nil {
		return m.Mems
	}
	return nil
}

// 请求自建房间邀请
type ReqRoomInvite struct {
	Ids     []uint64 `protobuf:"varint,1,rep,name=Ids,json=ids" json:"Ids,omitempty"`
	InvType uint32   `protobuf:"varint,2,opt,name=InvType,json=invType" json:"InvType"`
}

func (m *ReqRoomInvite) Reset()                    { *m = ReqRoomInvite{} }
func (m *ReqRoomInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqRoomInvite) ProtoMessage()               {}
func (*ReqRoomInvite) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{43} }

func (m *ReqRoomInvite) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ReqRoomInvite) GetInvType() uint32 {
	if m != nil {
		return m.InvType
	}
	return 0
}

// 收到自建房间邀请
type RetRoomInvite struct {
	LeaderId    uint64 `protobuf:"varint,1,req,name=LeaderId,json=leaderId" json:"LeaderId"`
	InvId       uint64 `protobuf:"varint,2,opt,name=InvId,json=invId" json:"InvId"`
	InvName     string `protobuf:"bytes,3,opt,name=InvName,json=invName" json:"InvName"`
	InvIcon     uint32 `protobuf:"varint,4,opt,name=InvIcon,json=invIcon" json:"InvIcon"`
	InvPassIcon string `protobuf:"bytes,5,opt,name=InvPassIcon,json=invPassIcon" json:"InvPassIcon"`
	InvLevel    uint32 `protobuf:"varint,6,opt,name=InvLevel,json=invLevel" json:"InvLevel"`
	Model       uint32 `protobuf:"varint,7,opt,name=Model,json=model" json:"Model"`
	InvScores   uint32 `protobuf:"varint,8,opt,name=InvScores,json=invScores" json:"InvScores"`
	InvType     uint32 `protobuf:"varint,11,opt,name=InvType,json=invType" json:"InvType"`
}

func (m *RetRoomInvite) Reset()                    { *m = RetRoomInvite{} }
func (m *RetRoomInvite) String() string            { return proto.CompactTextString(m) }
func (*RetRoomInvite) ProtoMessage()               {}
func (*RetRoomInvite) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{44} }

func (m *RetRoomInvite) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *RetRoomInvite) GetInvId() uint64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *RetRoomInvite) GetInvName() string {
	if m != nil {
		return m.InvName
	}
	return ""
}

func (m *RetRoomInvite) GetInvIcon() uint32 {
	if m != nil {
		return m.InvIcon
	}
	return 0
}

func (m *RetRoomInvite) GetInvPassIcon() string {
	if m != nil {
		return m.InvPassIcon
	}
	return ""
}

func (m *RetRoomInvite) GetInvLevel() uint32 {
	if m != nil {
		return m.InvLevel
	}
	return 0
}

func (m *RetRoomInvite) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *RetRoomInvite) GetInvScores() uint32 {
	if m != nil {
		return m.InvScores
	}
	return 0
}

func (m *RetRoomInvite) GetInvType() uint32 {
	if m != nil {
		return m.InvType
	}
	return 0
}

// 处理自建房间邀请 (返回错误码)
type ReqDoRoomInvite struct {
	LeaderId uint64 `protobuf:"varint,1,req,name=LeaderId,json=leaderId" json:"LeaderId"`
	Options  uint32 `protobuf:"varint,2,req,name=Options,json=options" json:"Options"`
}

func (m *ReqDoRoomInvite) Reset()                    { *m = ReqDoRoomInvite{} }
func (m *ReqDoRoomInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqDoRoomInvite) ProtoMessage()               {}
func (*ReqDoRoomInvite) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{45} }

func (m *ReqDoRoomInvite) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *ReqDoRoomInvite) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

// 返回自建房间邀请
type RetDoRoomInvite struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
}

func (m *RetDoRoomInvite) Reset()                    { *m = RetDoRoomInvite{} }
func (m *RetDoRoomInvite) String() string            { return proto.CompactTextString(m) }
func (*RetDoRoomInvite) ProtoMessage()               {}
func (*RetDoRoomInvite) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{46} }

func (m *RetDoRoomInvite) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

// 请求队长解散房间
type ReqDissRoom struct {
}

func (m *ReqDissRoom) Reset()                    { *m = ReqDissRoom{} }
func (m *ReqDissRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqDissRoom) ProtoMessage()               {}
func (*ReqDissRoom) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{47} }

// 广播解散房间
type RetDissRoom struct {
}

func (m *RetDissRoom) Reset()                    { *m = RetDissRoom{} }
func (m *RetDissRoom) String() string            { return proto.CompactTextString(m) }
func (*RetDissRoom) ProtoMessage()               {}
func (*RetDissRoom) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{48} }

// 请求改名
type ReqRChgName struct {
	Name string `protobuf:"bytes,1,req,name=Name,json=name" json:"Name"`
}

func (m *ReqRChgName) Reset()                    { *m = ReqRChgName{} }
func (m *ReqRChgName) String() string            { return proto.CompactTextString(m) }
func (*ReqRChgName) ProtoMessage()               {}
func (*ReqRChgName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{49} }

func (m *ReqRChgName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 广播改名
type RetRChgName struct {
	UId  uint64 `protobuf:"varint,1,req,name=UId,json=uId" json:"UId"`
	Name string `protobuf:"bytes,2,req,name=Name,json=name" json:"Name"`
}

func (m *RetRChgName) Reset()                    { *m = RetRChgName{} }
func (m *RetRChgName) String() string            { return proto.CompactTextString(m) }
func (*RetRChgName) ProtoMessage()               {}
func (*RetRChgName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{50} }

func (m *RetRChgName) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *RetRChgName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 返回加入房间
type RetIntoRoom struct {
	TeamId uint32    `protobuf:"varint,1,req,name=TeamId,json=teamId" json:"TeamId"`
	UData  *UserData `protobuf:"bytes,2,req,name=UData,json=uData" json:"UData,omitempty"`
}

func (m *RetIntoRoom) Reset()                    { *m = RetIntoRoom{} }
func (m *RetIntoRoom) String() string            { return proto.CompactTextString(m) }
func (*RetIntoRoom) ProtoMessage()               {}
func (*RetIntoRoom) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{51} }

func (m *RetIntoRoom) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *RetIntoRoom) GetUData() *UserData {
	if m != nil {
		return m.UData
	}
	return nil
}

// 返回离开房间
type RetExitRoom struct {
	TeamId uint32 `protobuf:"varint,1,req,name=TeamId,json=teamId" json:"TeamId"`
	UId    uint64 `protobuf:"varint,2,req,name=UId,json=uId" json:"UId"`
}

func (m *RetExitRoom) Reset()                    { *m = RetExitRoom{} }
func (m *RetExitRoom) String() string            { return proto.CompactTextString(m) }
func (*RetExitRoom) ProtoMessage()               {}
func (*RetExitRoom) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{52} }

func (m *RetExitRoom) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *RetExitRoom) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

// 请求切换队伍
type ReqChangeTeam struct {
	OldTId uint32 `protobuf:"varint,1,req,name=OldTId,json=oldTId" json:"OldTId"`
	NewTId uint32 `protobuf:"varint,2,req,name=NewTId,json=newTId" json:"NewTId"`
	UserId uint64 `protobuf:"varint,3,opt,name=UserId,json=userId" json:"UserId"`
}

func (m *ReqChangeTeam) Reset()                    { *m = ReqChangeTeam{} }
func (m *ReqChangeTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqChangeTeam) ProtoMessage()               {}
func (*ReqChangeTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{53} }

func (m *ReqChangeTeam) GetOldTId() uint32 {
	if m != nil {
		return m.OldTId
	}
	return 0
}

func (m *ReqChangeTeam) GetNewTId() uint32 {
	if m != nil {
		return m.NewTId
	}
	return 0
}

func (m *ReqChangeTeam) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 广播切换队伍
type RetChangeTeam struct {
	OldTId uint32 `protobuf:"varint,1,req,name=OldTId,json=oldTId" json:"OldTId"`
	NewTId uint32 `protobuf:"varint,2,req,name=NewTId,json=newTId" json:"NewTId"`
	UId    uint64 `protobuf:"varint,3,req,name=UId,json=uId" json:"UId"`
}

func (m *RetChangeTeam) Reset()                    { *m = RetChangeTeam{} }
func (m *RetChangeTeam) String() string            { return proto.CompactTextString(m) }
func (*RetChangeTeam) ProtoMessage()               {}
func (*RetChangeTeam) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{54} }

func (m *RetChangeTeam) GetOldTId() uint32 {
	if m != nil {
		return m.OldTId
	}
	return 0
}

func (m *RetChangeTeam) GetNewTId() uint32 {
	if m != nil {
		return m.NewTId
	}
	return 0
}

func (m *RetChangeTeam) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

// 设置队伍名
type ReqSetTeamName struct {
	TeamId uint32 `protobuf:"varint,1,req,name=TeamId,json=teamId" json:"TeamId"`
	TName  string `protobuf:"bytes,2,req,name=TName,json=tName" json:"TName"`
}

func (m *ReqSetTeamName) Reset()                    { *m = ReqSetTeamName{} }
func (m *ReqSetTeamName) String() string            { return proto.CompactTextString(m) }
func (*ReqSetTeamName) ProtoMessage()               {}
func (*ReqSetTeamName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{55} }

func (m *ReqSetTeamName) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *ReqSetTeamName) GetTName() string {
	if m != nil {
		return m.TName
	}
	return ""
}

// 广播队伍名
type RetSetTeamName struct {
	TeamId uint32 `protobuf:"varint,1,req,name=TeamId,json=teamId" json:"TeamId"`
	TName  string `protobuf:"bytes,2,req,name=TName,json=tName" json:"TName"`
}

func (m *RetSetTeamName) Reset()                    { *m = RetSetTeamName{} }
func (m *RetSetTeamName) String() string            { return proto.CompactTextString(m) }
func (*RetSetTeamName) ProtoMessage()               {}
func (*RetSetTeamName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{56} }

func (m *RetSetTeamName) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *RetSetTeamName) GetTName() string {
	if m != nil {
		return m.TName
	}
	return ""
}

// 请求开始游戏
type ReqStartRGame struct {
}

func (m *ReqStartRGame) Reset()                    { *m = ReqStartRGame{} }
func (m *ReqStartRGame) String() string            { return proto.CompactTextString(m) }
func (*ReqStartRGame) ProtoMessage()               {}
func (*ReqStartRGame) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{57} }

// 返回开始重连
type RetTReConnect struct {
	Model    uint32 `protobuf:"varint,1,req,name=Model,json=model" json:"Model"`
	RoomName string `protobuf:"bytes,2,req,name=RoomName,json=roomName" json:"RoomName"`
	UserNum  uint32 `protobuf:"varint,3,req,name=UserNum,json=userNum" json:"UserNum"`
	EndTime  uint32 `protobuf:"varint,4,req,name=EndTime,json=endTime" json:"EndTime"`
}

func (m *RetTReConnect) Reset()                    { *m = RetTReConnect{} }
func (m *RetTReConnect) String() string            { return proto.CompactTextString(m) }
func (*RetTReConnect) ProtoMessage()               {}
func (*RetTReConnect) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{58} }

func (m *RetTReConnect) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *RetTReConnect) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *RetTReConnect) GetUserNum() uint32 {
	if m != nil {
		return m.UserNum
	}
	return 0
}

func (m *RetTReConnect) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 请求加入创建房间列表
type ReqJoinTRoom struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	Passwd string `protobuf:"bytes,2,opt,name=Passwd,json=passwd" json:"Passwd"`
	QrCode string `protobuf:"bytes,3,opt,name=QrCode,json=qrCode" json:"QrCode"`
}

func (m *ReqJoinTRoom) Reset()                    { *m = ReqJoinTRoom{} }
func (m *ReqJoinTRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqJoinTRoom) ProtoMessage()               {}
func (*ReqJoinTRoom) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{59} }

func (m *ReqJoinTRoom) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqJoinTRoom) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *ReqJoinTRoom) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

// 请求踢人 (房主)
type ReqTKickUser struct {
	UId uint64 `protobuf:"varint,1,req,name=UId,json=uId" json:"UId"`
}

func (m *ReqTKickUser) Reset()                    { *m = ReqTKickUser{} }
func (m *ReqTKickUser) String() string            { return proto.CompactTextString(m) }
func (*ReqTKickUser) ProtoMessage()               {}
func (*ReqTKickUser) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{60} }

func (m *ReqTKickUser) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

// 返回被踢 (被踢玩家)
type RetTKickUser struct {
}

func (m *RetTKickUser) Reset()                    { *m = RetTKickUser{} }
func (m *RetTKickUser) String() string            { return proto.CompactTextString(m) }
func (*RetTKickUser) ProtoMessage()               {}
func (*RetTKickUser) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{61} }

// 请求设置队员权限
type ReqSetTMemPriv struct {
	UId  uint64 `protobuf:"varint,1,req,name=UId,json=uId" json:"UId"`
	Priv uint32 `protobuf:"varint,2,req,name=Priv,json=priv" json:"Priv"`
}

func (m *ReqSetTMemPriv) Reset()                    { *m = ReqSetTMemPriv{} }
func (m *ReqSetTMemPriv) String() string            { return proto.CompactTextString(m) }
func (*ReqSetTMemPriv) ProtoMessage()               {}
func (*ReqSetTMemPriv) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{62} }

func (m *ReqSetTMemPriv) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *ReqSetTMemPriv) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

// 广播设置权限
type RetSetTMemPriv struct {
	UId  uint64 `protobuf:"varint,1,req,name=UId,json=uId" json:"UId"`
	Priv uint32 `protobuf:"varint,2,req,name=Priv,json=priv" json:"Priv"`
}

func (m *RetSetTMemPriv) Reset()                    { *m = RetSetTMemPriv{} }
func (m *RetSetTMemPriv) String() string            { return proto.CompactTextString(m) }
func (*RetSetTMemPriv) ProtoMessage()               {}
func (*RetSetTMemPriv) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{63} }

func (m *RetSetTMemPriv) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *RetSetTMemPriv) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

// 请求随机分配人数 (返回房间数据)
type ReqRandomUserNum struct {
	RType uint32 `protobuf:"varint,1,req,name=RType,json=rType" json:"RType"`
}

func (m *ReqRandomUserNum) Reset()                    { *m = ReqRandomUserNum{} }
func (m *ReqRandomUserNum) String() string            { return proto.CompactTextString(m) }
func (*ReqRandomUserNum) ProtoMessage()               {}
func (*ReqRandomUserNum) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{64} }

func (m *ReqRandomUserNum) GetRType() uint32 {
	if m != nil {
		return m.RType
	}
	return 0
}

// 广播改名
type RetBChgName struct {
	UId  uint64 `protobuf:"varint,1,req,name=UId,json=uId" json:"UId"`
	Name string `protobuf:"bytes,2,req,name=Name,json=name" json:"Name"`
}

func (m *RetBChgName) Reset()                    { *m = RetBChgName{} }
func (m *RetBChgName) String() string            { return proto.CompactTextString(m) }
func (*RetBChgName) ProtoMessage()               {}
func (*RetBChgName) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{65} }

func (m *RetBChgName) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *RetBChgName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 返回开始重连
type RetBReConnect struct {
	RType   uint32 `protobuf:"varint,1,req,name=RType,json=rType" json:"RType"`
	EndTime uint32 `protobuf:"varint,2,req,name=EndTime,json=endTime" json:"EndTime"`
	RoomId  uint32 `protobuf:"varint,3,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *RetBReConnect) Reset()                    { *m = RetBReConnect{} }
func (m *RetBReConnect) String() string            { return proto.CompactTextString(m) }
func (*RetBReConnect) ProtoMessage()               {}
func (*RetBReConnect) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{66} }

func (m *RetBReConnect) GetRType() uint32 {
	if m != nil {
		return m.RType
	}
	return 0
}

func (m *RetBReConnect) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RetBReConnect) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type ReqBReConnect struct {
}

func (m *ReqBReConnect) Reset()                    { *m = ReqBReConnect{} }
func (m *ReqBReConnect) String() string            { return proto.CompactTextString(m) }
func (*ReqBReConnect) ProtoMessage()               {}
func (*ReqBReConnect) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{67} }

// ================
// 	好友系统
// ================
// 添加好友请求
type AddFriendRequest struct {
	FromId   uint64 `protobuf:"varint,1,req,name=FromId,json=fromId" json:"FromId"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,req,name=Sex,json=sex" json:"Sex"`
	Age      uint32 `protobuf:"varint,4,opt,name=Age,json=age" json:"Age"`
	Icon     uint32 `protobuf:"varint,5,req,name=Icon,json=icon" json:"Icon"`
	Location uint32 `protobuf:"varint,6,req,name=Location,json=location" json:"Location"`
	PrizeCup uint32 `protobuf:"varint,7,opt,name=PrizeCup,json=prizeCup" json:"PrizeCup"`
}

func (m *AddFriendRequest) Reset()                    { *m = AddFriendRequest{} }
func (m *AddFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFriendRequest) ProtoMessage()               {}
func (*AddFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{68} }

func (m *AddFriendRequest) GetFromId() uint64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *AddFriendRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AddFriendRequest) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *AddFriendRequest) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *AddFriendRequest) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *AddFriendRequest) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *AddFriendRequest) GetPrizeCup() uint32 {
	if m != nil {
		return m.PrizeCup
	}
	return 0
}

// 对方已同意添加好友
type PushAgreeAddFriend struct {
	FriendId uint64 `protobuf:"varint,1,req,name=FriendId,json=friendId" json:"FriendId"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,req,name=Sex,json=sex" json:"Sex"`
	Age      uint32 `protobuf:"varint,4,opt,name=Age,json=age" json:"Age"`
	Icon     uint32 `protobuf:"varint,5,req,name=Icon,json=icon" json:"Icon"`
	Location uint32 `protobuf:"varint,6,req,name=Location,json=location" json:"Location"`
}

func (m *PushAgreeAddFriend) Reset()                    { *m = PushAgreeAddFriend{} }
func (m *PushAgreeAddFriend) String() string            { return proto.CompactTextString(m) }
func (*PushAgreeAddFriend) ProtoMessage()               {}
func (*PushAgreeAddFriend) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{69} }

func (m *PushAgreeAddFriend) GetFriendId() uint64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *PushAgreeAddFriend) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PushAgreeAddFriend) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *PushAgreeAddFriend) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *PushAgreeAddFriend) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *PushAgreeAddFriend) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

type RetMessageAddFollow struct {
	FriendId uint64 `protobuf:"varint,1,opt,name=FriendId,json=friendId" json:"FriendId"`
	Account  string `protobuf:"bytes,2,opt,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,opt,name=Sex,json=sex" json:"Sex"`
	Age      uint32 `protobuf:"varint,4,opt,name=Age,json=age" json:"Age"`
	Icon     uint32 `protobuf:"varint,5,opt,name=Icon,json=icon" json:"Icon"`
	Location uint32 `protobuf:"varint,6,opt,name=Location,json=location" json:"Location"`
	Type     bool   `protobuf:"varint,7,opt,name=type" json:"type"`
	Passicon string `protobuf:"bytes,8,opt,name=passicon" json:"passicon"`
	Status   uint32 `protobuf:"varint,9,opt,name=status" json:"status"`
}

func (m *RetMessageAddFollow) Reset()                    { *m = RetMessageAddFollow{} }
func (m *RetMessageAddFollow) String() string            { return proto.CompactTextString(m) }
func (*RetMessageAddFollow) ProtoMessage()               {}
func (*RetMessageAddFollow) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{70} }

func (m *RetMessageAddFollow) GetFriendId() uint64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *RetMessageAddFollow) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetMessageAddFollow) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetMessageAddFollow) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RetMessageAddFollow) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetMessageAddFollow) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *RetMessageAddFollow) GetType() bool {
	if m != nil {
		return m.Type
	}
	return false
}

func (m *RetMessageAddFollow) GetPassicon() string {
	if m != nil {
		return m.Passicon
	}
	return ""
}

func (m *RetMessageAddFollow) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UpUserMessage struct {
	Userid   uint64 `protobuf:"varint,1,opt,name=userid" json:"userid"`
	Account  string `protobuf:"bytes,2,opt,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,opt,name=Sex,json=sex" json:"Sex"`
	Age      uint32 `protobuf:"varint,4,opt,name=Age,json=age" json:"Age"`
	Icon     uint32 `protobuf:"varint,5,opt,name=Icon,json=icon" json:"Icon"`
	Passicon string `protobuf:"bytes,6,opt,name=passicon" json:"passicon"`
}

func (m *UpUserMessage) Reset()                    { *m = UpUserMessage{} }
func (m *UpUserMessage) String() string            { return proto.CompactTextString(m) }
func (*UpUserMessage) ProtoMessage()               {}
func (*UpUserMessage) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{71} }

func (m *UpUserMessage) GetUserid() uint64 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UpUserMessage) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UpUserMessage) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UpUserMessage) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UpUserMessage) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *UpUserMessage) GetPassicon() string {
	if m != nil {
		return m.Passicon
	}
	return ""
}

type RedPointData struct {
	RedType uint32 `protobuf:"varint,1,req,name=RedType,json=redType" json:"RedType"`
	RedNum  uint32 `protobuf:"varint,2,opt,name=RedNum,json=redNum" json:"RedNum"`
	IsShow  bool   `protobuf:"varint,3,opt,name=IsShow,json=isShow" json:"IsShow"`
}

func (m *RedPointData) Reset()                    { *m = RedPointData{} }
func (m *RedPointData) String() string            { return proto.CompactTextString(m) }
func (*RedPointData) ProtoMessage()               {}
func (*RedPointData) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{72} }

func (m *RedPointData) GetRedType() uint32 {
	if m != nil {
		return m.RedType
	}
	return 0
}

func (m *RedPointData) GetRedNum() uint32 {
	if m != nil {
		return m.RedNum
	}
	return 0
}

func (m *RedPointData) GetIsShow() bool {
	if m != nil {
		return m.IsShow
	}
	return false
}

// 推送消息
type RetPushMsgCmd struct {
	Infos []*RedPointData `protobuf:"bytes,1,rep,name=Infos,json=infos" json:"Infos,omitempty"`
}

func (m *RetPushMsgCmd) Reset()                    { *m = RetPushMsgCmd{} }
func (m *RetPushMsgCmd) String() string            { return proto.CompactTextString(m) }
func (*RetPushMsgCmd) ProtoMessage()               {}
func (*RetPushMsgCmd) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{73} }

func (m *RetPushMsgCmd) GetInfos() []*RedPointData {
	if m != nil {
		return m.Infos
	}
	return nil
}

// 更新摇一摇时间
type UpdateShakeTime struct {
}

func (m *UpdateShakeTime) Reset()                    { *m = UpdateShakeTime{} }
func (m *UpdateShakeTime) String() string            { return proto.CompactTextString(m) }
func (*UpdateShakeTime) ProtoMessage()               {}
func (*UpdateShakeTime) Descriptor() ([]byte, []int) { return fileDescriptorTeam, []int{74} }

func init() {
	proto.RegisterType((*ReqTeamLogin)(nil), "usercmd.ReqTeamLogin")
	proto.RegisterType((*RetTeamLogin)(nil), "usercmd.RetTeamLogin")
	proto.RegisterType((*RetErrorCmd)(nil), "usercmd.RetErrorCmd")
	proto.RegisterType((*ReqHeartBeat)(nil), "usercmd.ReqHeartBeat")
	proto.RegisterType((*RetSendNotice)(nil), "usercmd.RetSendNotice")
	proto.RegisterType((*RetSendNotice_Award)(nil), "usercmd.RetSendNotice.Award")
	proto.RegisterType((*RetStopNotice)(nil), "usercmd.RetStopNotice")
	proto.RegisterType((*RetMaintainNotice)(nil), "usercmd.RetMaintainNotice")
	proto.RegisterType((*RetCreateTeam)(nil), "usercmd.RetCreateTeam")
	proto.RegisterType((*ReqCreateTeam)(nil), "usercmd.ReqCreateTeam")
	proto.RegisterType((*RetDissolveTeam)(nil), "usercmd.RetDissolveTeam")
	proto.RegisterType((*ReqDissolveTeam)(nil), "usercmd.ReqDissolveTeam")
	proto.RegisterType((*RetTeamInvite)(nil), "usercmd.RetTeamInvite")
	proto.RegisterType((*ReqTeamInvite)(nil), "usercmd.ReqTeamInvite")
	proto.RegisterType((*ReqDoInvite)(nil), "usercmd.ReqDoInvite")
	proto.RegisterType((*ReqJoinUserTeam)(nil), "usercmd.ReqJoinUserTeam")
	proto.RegisterType((*ReqOnlineFriendList)(nil), "usercmd.ReqOnlineFriendList")
	proto.RegisterType((*RetOnlineFriendList)(nil), "usercmd.RetOnlineFriendList")
	proto.RegisterType((*RetOnlineFriendList_FriendData)(nil), "usercmd.RetOnlineFriendList.FriendData")
	proto.RegisterType((*ReqTeamInviteList)(nil), "usercmd.ReqTeamInviteList")
	proto.RegisterType((*RetTeamInviteList)(nil), "usercmd.RetTeamInviteList")
	proto.RegisterType((*RetTeamInviteList_MemberData)(nil), "usercmd.RetTeamInviteList.MemberData")
	proto.RegisterType((*ReqStartGame)(nil), "usercmd.ReqStartGame")
	proto.RegisterType((*RetStartGame)(nil), "usercmd.RetStartGame")
	proto.RegisterType((*RetRoomUserListToGate)(nil), "usercmd.RetRoomUserListToGate")
	proto.RegisterType((*ReqChangeName)(nil), "usercmd.ReqChangeName")
	proto.RegisterType((*RetChangeName)(nil), "usercmd.RetChangeName")
	proto.RegisterType((*RetRefreshName)(nil), "usercmd.RetRefreshName")
	proto.RegisterType((*ReqRefreshName)(nil), "usercmd.ReqRefreshName")
	proto.RegisterType((*RetChooseSyncTeam)(nil), "usercmd.RetChooseSyncTeam")
	proto.RegisterType((*ReqChooseSyncTeam)(nil), "usercmd.ReqChooseSyncTeam")
	proto.RegisterType((*RetWaitTeamList)(nil), "usercmd.RetWaitTeamList")
	proto.RegisterType((*RetWaitTeamList_TeamData)(nil), "usercmd.RetWaitTeamList.TeamData")
	proto.RegisterType((*ReqWaitTeamList)(nil), "usercmd.ReqWaitTeamList")
	proto.RegisterType((*ReqJoinTeamGame)(nil), "usercmd.ReqJoinTeamGame")
	proto.RegisterType((*ReqNewbieList)(nil), "usercmd.ReqNewbieList")
	proto.RegisterType((*RetNewbieList)(nil), "usercmd.RetNewbieList")
	proto.RegisterType((*RetNewbieList_NewbieData)(nil), "usercmd.RetNewbieList.NewbieData")
	proto.RegisterType((*RetLeaveTeam)(nil), "usercmd.RetLeaveTeam")
	proto.RegisterType((*ReqTeamKickUser)(nil), "usercmd.ReqTeamKickUser")
	proto.RegisterType((*RetTeamKickUser)(nil), "usercmd.RetTeamKickUser")
	proto.RegisterType((*ReqCreateRoom)(nil), "usercmd.ReqCreateRoom")
	proto.RegisterType((*RetCreateRoom)(nil), "usercmd.RetCreateRoom")
	proto.RegisterType((*ReqSetRoomData)(nil), "usercmd.ReqSetRoomData")
	proto.RegisterType((*RetSetRoomData)(nil), "usercmd.RetSetRoomData")
	proto.RegisterType((*ReqRoomTeamList)(nil), "usercmd.ReqRoomTeamList")
	proto.RegisterType((*UserData)(nil), "usercmd.UserData")
	proto.RegisterType((*RetRoomTeamList)(nil), "usercmd.RetRoomTeamList")
	proto.RegisterType((*RetRoomTeamList_TeamData)(nil), "usercmd.RetRoomTeamList.TeamData")
	proto.RegisterType((*ReqRoomInvite)(nil), "usercmd.ReqRoomInvite")
	proto.RegisterType((*RetRoomInvite)(nil), "usercmd.RetRoomInvite")
	proto.RegisterType((*ReqDoRoomInvite)(nil), "usercmd.ReqDoRoomInvite")
	proto.RegisterType((*RetDoRoomInvite)(nil), "usercmd.RetDoRoomInvite")
	proto.RegisterType((*ReqDissRoom)(nil), "usercmd.ReqDissRoom")
	proto.RegisterType((*RetDissRoom)(nil), "usercmd.RetDissRoom")
	proto.RegisterType((*ReqRChgName)(nil), "usercmd.ReqRChgName")
	proto.RegisterType((*RetRChgName)(nil), "usercmd.RetRChgName")
	proto.RegisterType((*RetIntoRoom)(nil), "usercmd.RetIntoRoom")
	proto.RegisterType((*RetExitRoom)(nil), "usercmd.RetExitRoom")
	proto.RegisterType((*ReqChangeTeam)(nil), "usercmd.ReqChangeTeam")
	proto.RegisterType((*RetChangeTeam)(nil), "usercmd.RetChangeTeam")
	proto.RegisterType((*ReqSetTeamName)(nil), "usercmd.ReqSetTeamName")
	proto.RegisterType((*RetSetTeamName)(nil), "usercmd.RetSetTeamName")
	proto.RegisterType((*ReqStartRGame)(nil), "usercmd.ReqStartRGame")
	proto.RegisterType((*RetTReConnect)(nil), "usercmd.RetTReConnect")
	proto.RegisterType((*ReqJoinTRoom)(nil), "usercmd.ReqJoinTRoom")
	proto.RegisterType((*ReqTKickUser)(nil), "usercmd.ReqTKickUser")
	proto.RegisterType((*RetTKickUser)(nil), "usercmd.RetTKickUser")
	proto.RegisterType((*ReqSetTMemPriv)(nil), "usercmd.ReqSetTMemPriv")
	proto.RegisterType((*RetSetTMemPriv)(nil), "usercmd.RetSetTMemPriv")
	proto.RegisterType((*ReqRandomUserNum)(nil), "usercmd.ReqRandomUserNum")
	proto.RegisterType((*RetBChgName)(nil), "usercmd.RetBChgName")
	proto.RegisterType((*RetBReConnect)(nil), "usercmd.RetBReConnect")
	proto.RegisterType((*ReqBReConnect)(nil), "usercmd.ReqBReConnect")
	proto.RegisterType((*AddFriendRequest)(nil), "usercmd.AddFriendRequest")
	proto.RegisterType((*PushAgreeAddFriend)(nil), "usercmd.PushAgreeAddFriend")
	proto.RegisterType((*RetMessageAddFollow)(nil), "usercmd.RetMessageAddFollow")
	proto.RegisterType((*UpUserMessage)(nil), "usercmd.UpUserMessage")
	proto.RegisterType((*RedPointData)(nil), "usercmd.RedPointData")
	proto.RegisterType((*RetPushMsgCmd)(nil), "usercmd.RetPushMsgCmd")
	proto.RegisterType((*UpdateShakeTime)(nil), "usercmd.UpdateShakeTime")
	proto.RegisterEnum("usercmd.TeamCmd", TeamCmd_name, TeamCmd_value)
}
func (m *ReqTeamLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTeamLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.ClientVer)))
	i += copy(dAtA[i:], m.ClientVer)
	return i, nil
}

func (m *RetTeamLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RetCode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RemTime))
	dAtA[i] = 0x18
	i++
	if m.Season {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetErrorCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetErrorCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RetCode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Params))
	return i, nil
}

func (m *ReqHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetSendNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSendNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.MsgType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.LastTm))
	if len(m.Params) > 0 {
		for _, num := range m.Params {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTeam(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	if len(m.Awards) > 0 {
		for _, msg := range m.Awards {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.NoticeId))
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.STime))
	dAtA[i] = 0x40
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RTime))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.TextVer)))
	i += copy(dAtA[i:], m.TextVer)
	return i, nil
}

func (m *RetSendNotice_Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSendNotice_Award) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.GoodId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Nums))
	return i, nil
}

func (m *RetStopNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetStopNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.MsgType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.NoticeId))
	return i, nil
}

func (m *RetMaintainNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMaintainNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.MsgType))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *RetCreateTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCreateTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqCreateTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetDissolveTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetDissolveTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqDissolveTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDissolveTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetTeamInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.InvName)))
	i += copy(dAtA[i:], m.InvName)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvIcon))
	dAtA[i] = 0x22
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.InvPassIcon)))
	i += copy(dAtA[i:], m.InvPassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvId))
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvType))
	return i, nil
}

func (m *ReqTeamInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTeamInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintTeam(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvType))
	return i, nil
}

func (m *ReqDoInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDoInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Options))
	return i, nil
}

func (m *ReqJoinUserTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinUserTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.LeaderId))
	return i, nil
}

func (m *ReqOnlineFriendList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOnlineFriendList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetOnlineFriendList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetOnlineFriendList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetOnlineFriendList_FriendData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetOnlineFriendList_FriendData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.State))
	dAtA[i] = 0x32
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x40
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Scores))
	return i, nil
}

func (m *ReqTeamInviteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTeamInviteList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetTeamInviteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamInviteList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.QrCode)))
	i += copy(dAtA[i:], m.QrCode)
	return i, nil
}

func (m *RetTeamInviteList_MemberData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamInviteList_MemberData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.State))
	dAtA[i] = 0x38
	i++
	if m.IsLeader {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x42
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x48
	i++
	if m.IsNewbie {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x50
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x58
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Scores))
	return i, nil
}

func (m *ReqStartGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStartGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetStartGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetStartGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	return i, nil
}

func (m *RetRoomUserListToGate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRoomUserListToGate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Teamid))
	if len(m.Userids) > 0 {
		for _, num := range m.Userids {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTeam(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ReqChangeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *RetChangeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChangeName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RetCode))
	return i, nil
}

func (m *RetRefreshName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRefreshName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RetCode))
	return i, nil
}

func (m *ReqRefreshName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRefreshName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *RetChooseSyncTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChooseSyncTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.ChooseType {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqChooseSyncTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChooseSyncTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.ChooseType {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetWaitTeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetWaitTeamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Waitlist) > 0 {
		for _, msg := range m.Waitlist {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetWaitTeamList_TeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetWaitTeamList_TeamData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x32
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x40
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x48
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.MemNum))
	return i, nil
}

func (m *ReqWaitTeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqWaitTeamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.ChangeType {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqJoinTeamGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinTeamGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RoomId))
	return i, nil
}

func (m *ReqNewbieList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNewbieList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetNewbieList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetNewbieList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetNewbieList_NewbieData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetNewbieList_NewbieData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Location))
	return i, nil
}

func (m *RetLeaveTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetLeaveTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqTeamKickUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTeamKickUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *RetTeamKickUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamKickUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *ReqCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Priv))
	dAtA[i] = 0x22
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Passwd)))
	i += copy(dAtA[i:], m.Passwd)
	return i, nil
}

func (m *RetCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RetCode))
	return i, nil
}

func (m *ReqSetRoomData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetRoomData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Priv))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.GTime))
	dAtA[i] = 0x28
	i++
	if m.CanJoin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x32
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Passwd)))
	i += copy(dAtA[i:], m.Passwd)
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TeamNum))
	dAtA[i] = 0x40
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.MemNum))
	return i, nil
}

func (m *RetSetRoomData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSetRoomData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Priv))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.GTime))
	dAtA[i] = 0x28
	i++
	if m.CanJoin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TeamNum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.MemNum))
	return i, nil
}

func (m *ReqRoomTeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRoomTeamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x22
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x42
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x48
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Priv))
	return i, nil
}

func (m *RetRoomTeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRoomTeamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Priv))
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.GTime))
	dAtA[i] = 0x38
	i++
	if m.CanJoin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x40
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TeamNum))
	dAtA[i] = 0x48
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.MemNum))
	dAtA[i] = 0x52
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.QrCode)))
	i += copy(dAtA[i:], m.QrCode)
	return i, nil
}

func (m *RetRoomTeamList_TeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRoomTeamList_TeamData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	if len(m.Mems) > 0 {
		for _, msg := range m.Mems {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqRoomInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRoomInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintTeam(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvType))
	return i, nil
}

func (m *RetRoomInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRoomInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.InvName)))
	i += copy(dAtA[i:], m.InvName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvIcon))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.InvPassIcon)))
	i += copy(dAtA[i:], m.InvPassIcon)
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvLevel))
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x40
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvScores))
	dAtA[i] = 0x58
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.InvType))
	return i, nil
}

func (m *ReqDoRoomInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDoRoomInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Options))
	return i, nil
}

func (m *RetDoRoomInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetDoRoomInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RetCode))
	return i, nil
}

func (m *ReqDissRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDissRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetDissRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetDissRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqRChgName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRChgName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *RetRChgName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRChgName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *RetIntoRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetIntoRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TeamId))
	if m.UData == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("UData")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTeam(dAtA, i, uint64(m.UData.Size()))
		n1, err := m.UData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RetExitRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetExitRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	return i, nil
}

func (m *ReqChangeTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.OldTId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.NewTId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *RetChangeTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChangeTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.OldTId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.NewTId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	return i, nil
}

func (m *ReqSetTeamName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetTeamName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.TName)))
	i += copy(dAtA[i:], m.TName)
	return i, nil
}

func (m *RetSetTeamName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSetTeamName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.TName)))
	i += copy(dAtA[i:], m.TName)
	return i, nil
}

func (m *ReqStartRGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStartRGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetTReConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTReConnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.RoomName)))
	i += copy(dAtA[i:], m.RoomName)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UserNum))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.EndTime))
	return i, nil
}

func (m *ReqJoinTRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinTRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Passwd)))
	i += copy(dAtA[i:], m.Passwd)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.QrCode)))
	i += copy(dAtA[i:], m.QrCode)
	return i, nil
}

func (m *ReqTKickUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTKickUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	return i, nil
}

func (m *RetTKickUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTKickUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqSetTMemPriv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetTMemPriv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Priv))
	return i, nil
}

func (m *RetSetTMemPriv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSetTMemPriv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Priv))
	return i, nil
}

func (m *ReqRandomUserNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRandomUserNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RType))
	return i, nil
}

func (m *RetBChgName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBChgName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.UId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *RetBReConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBReConnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RoomId))
	return i, nil
}

func (m *ReqBReConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBReConnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AddFriendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFriendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.FromId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Location))
	dAtA[i] = 0x38
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.PrizeCup))
	return i, nil
}

func (m *PushAgreeAddFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushAgreeAddFriend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.FriendId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Location))
	return i, nil
}

func (m *RetMessageAddFollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMessageAddFollow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.FriendId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x30
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Location))
	dAtA[i] = 0x38
	i++
	if m.Type {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x42
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Passicon)))
	i += copy(dAtA[i:], m.Passicon)
	dAtA[i] = 0x48
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Status))
	return i, nil
}

func (m *UpUserMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpUserMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Userid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x28
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x32
	i++
	i = encodeVarintTeam(dAtA, i, uint64(len(m.Passicon)))
	i += copy(dAtA[i:], m.Passicon)
	return i, nil
}

func (m *RedPointData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPointData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RedType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTeam(dAtA, i, uint64(m.RedNum))
	dAtA[i] = 0x18
	i++
	if m.IsShow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetPushMsgCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetPushMsgCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTeam(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateShakeTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateShakeTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Team(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Team(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTeam(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqTeamLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovTeam(uint64(l))
	l = len(m.ClientVer)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetTeamLogin) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RetCode))
	n += 1 + sovTeam(uint64(m.RemTime))
	n += 2
	return n
}

func (m *RetErrorCmd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RetCode))
	n += 1 + sovTeam(uint64(m.Params))
	return n
}

func (m *ReqHeartBeat) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetSendNotice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.MsgType))
	n += 1 + sovTeam(uint64(m.LastTm))
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			n += 1 + sovTeam(uint64(e))
		}
	}
	l = len(m.Text)
	n += 1 + l + sovTeam(uint64(l))
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	n += 1 + sovTeam(uint64(m.NoticeId))
	n += 1 + sovTeam(uint64(m.STime))
	n += 1 + sovTeam(uint64(m.RTime))
	l = len(m.TextVer)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetSendNotice_Award) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.GoodId))
	n += 1 + sovTeam(uint64(m.Nums))
	return n
}

func (m *RetStopNotice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.MsgType))
	n += 1 + sovTeam(uint64(m.NoticeId))
	return n
}

func (m *RetMaintainNotice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.MsgType))
	l = len(m.Text)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetCreateTeam) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqCreateTeam) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetDissolveTeam) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqDissolveTeam) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetTeamInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.LeaderId))
	l = len(m.InvName)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.InvIcon))
	l = len(m.InvPassIcon)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.InvId))
	n += 1 + sovTeam(uint64(m.InvType))
	return n
}

func (m *ReqTeamInvite) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovTeam(uint64(e))
		}
	}
	n += 1 + sovTeam(uint64(m.InvType))
	return n
}

func (m *ReqDoInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.LeaderId))
	n += 1 + sovTeam(uint64(m.Options))
	return n
}

func (m *ReqJoinUserTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.LeaderId))
	return n
}

func (m *ReqOnlineFriendList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetOnlineFriendList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	return n
}

func (m *RetOnlineFriendList_FriendData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Icon))
	n += 1 + sovTeam(uint64(m.Sex))
	n += 1 + sovTeam(uint64(m.State))
	l = len(m.PassIcon)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Level))
	n += 1 + sovTeam(uint64(m.Scores))
	return n
}

func (m *ReqTeamInviteList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetTeamInviteList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	l = len(m.QrCode)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetTeamInviteList_MemberData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Icon))
	n += 1 + sovTeam(uint64(m.Sex))
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.State))
	n += 2
	l = len(m.PassIcon)
	n += 1 + l + sovTeam(uint64(l))
	n += 2
	n += 1 + sovTeam(uint64(m.Level))
	n += 1 + sovTeam(uint64(m.Scores))
	return n
}

func (m *ReqStartGame) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetStartGame) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovTeam(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetRoomUserListToGate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Teamid))
	if len(m.Userids) > 0 {
		for _, e := range m.Userids {
			n += 1 + sovTeam(uint64(e))
		}
	}
	return n
}

func (m *ReqChangeName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetChangeName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RetCode))
	return n
}

func (m *RetRefreshName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RetCode))
	return n
}

func (m *ReqRefreshName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetChooseSyncTeam) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *ReqChooseSyncTeam) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *RetWaitTeamList) Size() (n int) {
	var l int
	_ = l
	if len(m.Waitlist) > 0 {
		for _, e := range m.Waitlist {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	return n
}

func (m *RetWaitTeamList_TeamData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.TId))
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Sex))
	n += 1 + sovTeam(uint64(m.Icon))
	l = len(m.PassIcon)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Level))
	n += 1 + sovTeam(uint64(m.Scores))
	n += 1 + sovTeam(uint64(m.MemNum))
	return n
}

func (m *ReqWaitTeamList) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *ReqJoinTeamGame) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RoomId))
	return n
}

func (m *ReqNewbieList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetNewbieList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	return n
}

func (m *RetNewbieList_NewbieData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Icon))
	n += 1 + sovTeam(uint64(m.Sex))
	l = len(m.PassIcon)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Location))
	return n
}

func (m *RetLeaveTeam) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqTeamKickUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Id))
	return n
}

func (m *RetTeamKickUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Id))
	return n
}

func (m *ReqCreateRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Model))
	n += 1 + sovTeam(uint64(m.Priv))
	l = len(m.Passwd)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetCreateRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RetCode))
	return n
}

func (m *ReqSetRoomData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Model))
	n += 1 + sovTeam(uint64(m.Priv))
	n += 1 + sovTeam(uint64(m.GTime))
	n += 2
	l = len(m.Passwd)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.TeamNum))
	n += 1 + sovTeam(uint64(m.MemNum))
	return n
}

func (m *RetSetRoomData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Model))
	n += 1 + sovTeam(uint64(m.Priv))
	n += 1 + sovTeam(uint64(m.GTime))
	n += 2
	n += 1 + sovTeam(uint64(m.TeamNum))
	n += 1 + sovTeam(uint64(m.MemNum))
	return n
}

func (m *ReqRoomTeamList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UserData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.UId))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Icon))
	l = len(m.PassIcon)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Sex))
	n += 1 + sovTeam(uint64(m.Level))
	n += 1 + sovTeam(uint64(m.Scores))
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Priv))
	return n
}

func (m *RetRoomTeamList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.LeaderId))
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Model))
	n += 1 + sovTeam(uint64(m.Priv))
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	n += 1 + sovTeam(uint64(m.GTime))
	n += 2
	n += 1 + sovTeam(uint64(m.TeamNum))
	n += 1 + sovTeam(uint64(m.MemNum))
	l = len(m.QrCode)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetRoomTeamList_TeamData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.TId))
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	if len(m.Mems) > 0 {
		for _, e := range m.Mems {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	return n
}

func (m *ReqRoomInvite) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovTeam(uint64(e))
		}
	}
	n += 1 + sovTeam(uint64(m.InvType))
	return n
}

func (m *RetRoomInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.LeaderId))
	n += 1 + sovTeam(uint64(m.InvId))
	l = len(m.InvName)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.InvIcon))
	l = len(m.InvPassIcon)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.InvLevel))
	n += 1 + sovTeam(uint64(m.Model))
	n += 1 + sovTeam(uint64(m.InvScores))
	n += 1 + sovTeam(uint64(m.InvType))
	return n
}

func (m *ReqDoRoomInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.LeaderId))
	n += 1 + sovTeam(uint64(m.Options))
	return n
}

func (m *RetDoRoomInvite) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RetCode))
	return n
}

func (m *ReqDissRoom) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetDissRoom) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqRChgName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetRChgName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.UId))
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetIntoRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.TeamId))
	if m.UData != nil {
		l = m.UData.Size()
		n += 1 + l + sovTeam(uint64(l))
	}
	return n
}

func (m *RetExitRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.TeamId))
	n += 1 + sovTeam(uint64(m.UId))
	return n
}

func (m *ReqChangeTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.OldTId))
	n += 1 + sovTeam(uint64(m.NewTId))
	n += 1 + sovTeam(uint64(m.UserId))
	return n
}

func (m *RetChangeTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.OldTId))
	n += 1 + sovTeam(uint64(m.NewTId))
	n += 1 + sovTeam(uint64(m.UId))
	return n
}

func (m *ReqSetTeamName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.TeamId))
	l = len(m.TName)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetSetTeamName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.TeamId))
	l = len(m.TName)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *ReqStartRGame) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetTReConnect) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Model))
	l = len(m.RoomName)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.UserNum))
	n += 1 + sovTeam(uint64(m.EndTime))
	return n
}

func (m *ReqJoinTRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.UserId))
	l = len(m.Passwd)
	n += 1 + l + sovTeam(uint64(l))
	l = len(m.QrCode)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *ReqTKickUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.UId))
	return n
}

func (m *RetTKickUser) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqSetTMemPriv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.UId))
	n += 1 + sovTeam(uint64(m.Priv))
	return n
}

func (m *RetSetTMemPriv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.UId))
	n += 1 + sovTeam(uint64(m.Priv))
	return n
}

func (m *ReqRandomUserNum) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RType))
	return n
}

func (m *RetBChgName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.UId))
	l = len(m.Name)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RetBReConnect) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RType))
	n += 1 + sovTeam(uint64(m.EndTime))
	n += 1 + sovTeam(uint64(m.RoomId))
	return n
}

func (m *ReqBReConnect) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AddFriendRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.FromId))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Sex))
	n += 1 + sovTeam(uint64(m.Age))
	n += 1 + sovTeam(uint64(m.Icon))
	n += 1 + sovTeam(uint64(m.Location))
	n += 1 + sovTeam(uint64(m.PrizeCup))
	return n
}

func (m *PushAgreeAddFriend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.FriendId))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Sex))
	n += 1 + sovTeam(uint64(m.Age))
	n += 1 + sovTeam(uint64(m.Icon))
	n += 1 + sovTeam(uint64(m.Location))
	return n
}

func (m *RetMessageAddFollow) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.FriendId))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Sex))
	n += 1 + sovTeam(uint64(m.Age))
	n += 1 + sovTeam(uint64(m.Icon))
	n += 1 + sovTeam(uint64(m.Location))
	n += 2
	l = len(m.Passicon)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Status))
	return n
}

func (m *UpUserMessage) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.Userid))
	l = len(m.Account)
	n += 1 + l + sovTeam(uint64(l))
	n += 1 + sovTeam(uint64(m.Sex))
	n += 1 + sovTeam(uint64(m.Age))
	n += 1 + sovTeam(uint64(m.Icon))
	l = len(m.Passicon)
	n += 1 + l + sovTeam(uint64(l))
	return n
}

func (m *RedPointData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTeam(uint64(m.RedType))
	n += 1 + sovTeam(uint64(m.RedNum))
	n += 2
	return n
}

func (m *RetPushMsgCmd) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	return n
}

func (m *UpdateShakeTime) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTeam(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTeam(x uint64) (n int) {
	return sovTeam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqTeamLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTeamLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTeamLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTeamLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTeamLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemTime", wireType)
			}
			m.RemTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Season = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetErrorCmd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetErrorCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetErrorCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			m.Params = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Params |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSendNotice) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSendNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSendNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTm", wireType)
			}
			m.LastTm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Params = append(m.Params, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTeam
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Params = append(m.Params, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &RetSendNotice_Award{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			m.NoticeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field STime", wireType)
			}
			m.STime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.STime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTime", wireType)
			}
			m.RTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MsgType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastTm")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSendNotice_Award) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodId", wireType)
			}
			m.GoodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nums", wireType)
			}
			m.Nums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nums |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GoodId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Nums")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetStopNotice) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetStopNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetStopNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			m.NoticeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MsgType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NoticeId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMaintainNotice) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMaintainNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMaintainNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MsgType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCreateTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetCreateTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetCreateTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetDissolveTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetDissolveTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetDissolveTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDissolveTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDissolveTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDissolveTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTeamInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTeamInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvIcon", wireType)
			}
			m.InvIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvIcon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvPassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvPassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvId", wireType)
			}
			m.InvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvType", wireType)
			}
			m.InvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InvName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTeamInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTeamInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTeamInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTeam
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvType", wireType)
			}
			m.InvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDoInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDoInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDoInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Options")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinUserTeam) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinUserTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinUserTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOnlineFriendList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOnlineFriendList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOnlineFriendList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetOnlineFriendList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetOnlineFriendList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetOnlineFriendList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetOnlineFriendList_FriendData{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetOnlineFriendList_FriendData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTeamInviteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTeamInviteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTeamInviteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamInviteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTeamInviteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTeamInviteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetTeamInviteList_MemberData{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamInviteList_MemberData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewbie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewbie = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsLeader")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStartGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStartGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStartGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetStartGame) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetStartGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetStartGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRoomUserListToGate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRoomUserListToGate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRoomUserListToGate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamid", wireType)
			}
			m.Teamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teamid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Userids = append(m.Userids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTeam
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Userids = append(m.Userids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Userids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChangeName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChangeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChangeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRefreshName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRefreshName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRefreshName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRefreshName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRefreshName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRefreshName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChooseSyncTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChooseSyncTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChooseSyncTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChooseType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChooseType = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChooseSyncTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChooseSyncTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChooseSyncTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChooseType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChooseType = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetWaitTeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetWaitTeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetWaitTeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waitlist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Waitlist = append(m.Waitlist, &RetWaitTeamList_TeamData{})
			if err := m.Waitlist[len(m.Waitlist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetWaitTeamList_TeamData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TId", wireType)
			}
			m.TId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemNum", wireType)
			}
			m.MemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqWaitTeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqWaitTeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqWaitTeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeType = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinTeamGame) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinTeamGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinTeamGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNewbieList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNewbieList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNewbieList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetNewbieList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetNewbieList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetNewbieList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetNewbieList_NewbieData{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetNewbieList_NewbieData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewbieData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewbieData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PassIcon")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Location")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetLeaveTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetLeaveTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetLeaveTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTeamKickUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTeamKickUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTeamKickUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamKickUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTeamKickUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTeamKickUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Model")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Priv")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCreateRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetRoomData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetRoomData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetRoomData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GTime", wireType)
			}
			m.GTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanJoin = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamNum", wireType)
			}
			m.TeamNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemNum", wireType)
			}
			m.MemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Model")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Priv")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSetRoomData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSetRoomData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSetRoomData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GTime", wireType)
			}
			m.GTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanJoin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamNum", wireType)
			}
			m.TeamNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemNum", wireType)
			}
			m.MemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Model")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Priv")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRoomTeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRoomTeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRoomTeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRoomTeamList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRoomTeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRoomTeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &RetRoomTeamList_TeamData{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GTime", wireType)
			}
			m.GTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanJoin = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamNum", wireType)
			}
			m.TeamNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemNum", wireType)
			}
			m.MemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Model")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Priv")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRoomTeamList_TeamData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TId", wireType)
			}
			m.TId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mems = append(m.Mems, &UserData{})
			if err := m.Mems[len(m.Mems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRoomInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRoomInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRoomInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTeam
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvType", wireType)
			}
			m.InvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRoomInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRoomInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRoomInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvId", wireType)
			}
			m.InvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvIcon", wireType)
			}
			m.InvIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvIcon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvPassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvPassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvLevel", wireType)
			}
			m.InvLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvScores", wireType)
			}
			m.InvScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvType", wireType)
			}
			m.InvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDoRoomInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDoRoomInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDoRoomInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaderId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Options")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetDoRoomInvite) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetDoRoomInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetDoRoomInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDissRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDissRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDissRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetDissRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetDissRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetDissRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRChgName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRChgName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRChgName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRChgName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRChgName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRChgName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetIntoRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetIntoRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetIntoRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UData == nil {
				m.UData = &UserData{}
			}
			if err := m.UData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UData")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetExitRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetExitRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetExitRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeTeam) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldTId", wireType)
			}
			m.OldTId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldTId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTId", wireType)
			}
			m.NewTId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OldTId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NewTId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChangeTeam) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChangeTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChangeTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldTId", wireType)
			}
			m.OldTId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldTId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTId", wireType)
			}
			m.NewTId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OldTId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NewTId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetTeamName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetTeamName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetTeamName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSetTeamName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSetTeamName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSetTeamName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStartRGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStartRGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStartRGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTReConnect) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTReConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTReConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNum", wireType)
			}
			m.UserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Model")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserNum")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EndTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinTRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinTRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinTRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTKickUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTKickUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTKickUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTKickUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTKickUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTKickUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetTMemPriv) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetTMemPriv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetTMemPriv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Priv")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSetTMemPriv) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSetTMemPriv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSetTMemPriv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Priv")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRandomUserNum) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRandomUserNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRandomUserNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RType", wireType)
			}
			m.RType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBChgName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetBChgName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetBChgName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBReConnect) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetBReConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetBReConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RType", wireType)
			}
			m.RType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EndTime")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBReConnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBReConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBReConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFriendRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFriendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFriendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeCup", wireType)
			}
			m.PrizeCup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeCup |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Location")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushAgreeAddFriend) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushAgreeAddFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushAgreeAddFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FriendId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Location")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMessageAddFollow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMessageAddFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMessageAddFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passicon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passicon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpUserMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpUserMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpUserMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passicon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passicon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPointData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPointData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPointData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedType", wireType)
			}
			m.RedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedNum", wireType)
			}
			m.RedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RedType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetPushMsgCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetPushMsgCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetPushMsgCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &RedPointData{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateShakeTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateShakeTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateShakeTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTeam
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTeam
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTeam(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTeam = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeam   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("team.proto", fileDescriptorTeam) }

var fileDescriptorTeam = []byte{
	// 2574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0xcf, 0xee, 0x72, 0x97, 0xd4, 0xc8, 0x92, 0xc6, 0x6b, 0x5b, 0xe1, 0x97, 0xd1, 0x57, 0x61,
	0x17, 0x4d, 0xac, 0x26, 0x08, 0x9d, 0x38, 0x29, 0x82, 0xa2, 0x2d, 0x0c, 0x89, 0x8e, 0x5d, 0xc6,
	0x92, 0xad, 0x50, 0x72, 0x7b, 0x5e, 0x73, 0x47, 0xd4, 0xd6, 0xdc, 0x5d, 0x6a, 0x67, 0x28, 0x59,
	0x05, 0x7a, 0x2b, 0xd0, 0x5e, 0x0a, 0xf4, 0x1f, 0xe8, 0x3f, 0xd1, 0x4b, 0x9b, 0x53, 0x81, 0x5e,
	0x1a, 0xf4, 0xd2, 0xf4, 0x47, 0x2e, 0x2d, 0x10, 0x14, 0xee, 0xb5, 0x87, 0x1e, 0x7b, 0x2c, 0xde,
	0x9b, 0xfd, 0x31, 0xbb, 0x5c, 0x92, 0xb2, 0x93, 0x1a, 0x39, 0x91, 0xfb, 0x99, 0x99, 0x37, 0xf3,
	0x7e, 0xbf, 0x37, 0x43, 0x88, 0x60, 0x6e, 0xd0, 0x19, 0xc7, 0x91, 0x88, 0xec, 0xfa, 0x84, 0xb3,
	0x78, 0x10, 0x78, 0xad, 0xb7, 0x86, 0xbe, 0x38, 0x9e, 0x3c, 0xea, 0x0c, 0xa2, 0xe0, 0xc6, 0x30,
	0x1a, 0x46, 0x37, 0x70, 0xfc, 0xd1, 0xe4, 0x08, 0xbf, 0xf0, 0x03, 0xff, 0xc9, 0x75, 0x8e, 0x47,
	0x2e, 0xf5, 0xd9, 0xc9, 0x21, 0x73, 0x83, 0xdd, 0x68, 0xe8, 0x87, 0x76, 0x93, 0xd4, 0xee, 0xbb,
	0x01, 0x6b, 0x6a, 0x6d, 0x7d, 0x6b, 0x69, 0xa7, 0xf6, 0xc9, 0xe7, 0xaf, 0xbe, 0xd4, 0xaf, 0x85,
	0x6e, 0xc0, 0xec, 0x75, 0x62, 0xdc, 0x63, 0xe7, 0x4d, 0x5d, 0x19, 0x30, 0x1e, 0xb3, 0x73, 0xdb,
	0x21, 0x4b, 0xdd, 0x91, 0xcf, 0x42, 0xf1, 0x7d, 0x16, 0x37, 0x8d, 0xb6, 0x96, 0x8d, 0x2e, 0x0d,
	0x52, 0xd8, 0x19, 0xc1, 0x2e, 0x22, 0xdf, 0x65, 0x93, 0xd4, 0xfb, 0x4c, 0x74, 0x23, 0x4f, 0x6e,
	0xb4, 0x92, 0xac, 0xa8, 0xc7, 0x12, 0x94, 0xe3, 0xc1, 0xa1, 0x1f, 0xb0, 0xa6, 0xde, 0xd6, 0xd4,
	0x71, 0x04, 0xed, 0x0d, 0x62, 0x1d, 0x30, 0x97, 0x47, 0x21, 0x6e, 0xd8, 0x48, 0x86, 0x2d, 0x8e,
	0x98, 0x73, 0x8f, 0x2c, 0xf7, 0x99, 0xf8, 0x20, 0x8e, 0xa3, 0xb8, 0x1b, 0x78, 0x0b, 0x37, 0xdb,
	0x20, 0xd6, 0xbe, 0x1b, 0xbb, 0x01, 0x2f, 0xec, 0x65, 0x8d, 0x11, 0x73, 0x56, 0x51, 0x40, 0xdf,
	0x63, 0x6e, 0x2c, 0x76, 0x98, 0x2b, 0x9c, 0x7f, 0xeb, 0x64, 0xa5, 0xcf, 0xc4, 0x01, 0x0b, 0xbd,
	0xfb, 0x91, 0xf0, 0x07, 0x78, 0xd8, 0x3d, 0x3e, 0x3c, 0x3c, 0x1f, 0x97, 0xe8, 0x07, 0x12, 0x04,
	0xfa, 0xbb, 0x2e, 0x17, 0x87, 0x01, 0xca, 0x2e, 0xa3, 0x3f, 0x42, 0xcc, 0x5e, 0xcf, 0x76, 0x37,
	0xda, 0xc6, 0xd6, 0x4a, 0xba, 0x2f, 0x28, 0xe2, 0x90, 0x3d, 0x11, 0xcd, 0x9a, 0x22, 0xd1, 0x9a,
	0x60, 0x4f, 0x84, 0xfd, 0x1e, 0xb1, 0xb6, 0xcf, 0xdc, 0xd8, 0xe3, 0x4d, 0xb3, 0x6d, 0x6c, 0x2d,
	0xdf, 0xdc, 0xe8, 0x24, 0xba, 0xef, 0x14, 0xce, 0xd5, 0xc1, 0x49, 0x7d, 0xcb, 0xc5, 0xb9, 0x76,
	0x9b, 0x34, 0x24, 0xde, 0xf3, 0x9a, 0x56, 0x5b, 0xdb, 0xaa, 0x25, 0x34, 0x1b, 0x61, 0x82, 0xda,
	0x2d, 0x62, 0x1e, 0xa0, 0xc8, 0xeb, 0x8a, 0x18, 0x4c, 0x8e, 0x02, 0x6f, 0x11, 0xb3, 0x8f, 0x63,
	0x0d, 0x75, 0x2c, 0xc6, 0xb1, 0x4d, 0x52, 0x87, 0x93, 0x82, 0xfa, 0x97, 0x94, 0xc3, 0xd6, 0x85,
	0x04, 0x5b, 0xb7, 0x88, 0x89, 0x47, 0x01, 0x41, 0xdc, 0x8d, 0x22, 0xaf, 0xe7, 0x15, 0xe4, 0x64,
	0x0d, 0x11, 0x43, 0xcb, 0x9b, 0xa0, 0x12, 0xf2, 0xb1, 0x5a, 0x38, 0x09, 0xb8, 0xf3, 0x91, 0x94,
	0xb8, 0x88, 0xc6, 0x17, 0x94, 0xb8, 0xca, 0x2b, 0x90, 0x9b, 0xe2, 0xd5, 0xd9, 0x23, 0x97, 0xfb,
	0x4c, 0xec, 0xb9, 0x7e, 0x28, 0x5c, 0x3f, 0xbc, 0x20, 0xd9, 0x54, 0x25, 0x7a, 0x59, 0x25, 0xce,
	0x1a, 0x9e, 0xb0, 0x1b, 0x33, 0x57, 0x30, 0xb0, 0x72, 0x09, 0x9c, 0x28, 0xc0, 0x65, 0xb2, 0xd6,
	0x67, 0xe2, 0xb6, 0xcf, 0x79, 0x34, 0x3a, 0x55, 0xa0, 0x93, 0x02, 0xf4, 0x99, 0x86, 0x84, 0xe0,
	0x7f, 0x2f, 0x3c, 0xf5, 0x05, 0xb2, 0xb2, 0xcb, 0x5c, 0x8f, 0xc5, 0x89, 0xd4, 0x32, 0x56, 0x46,
	0x09, 0x0a, 0xa7, 0xee, 0x85, 0xa7, 0xe8, 0xb4, 0xaa, 0x6f, 0xd6, 0x7d, 0x09, 0x26, 0xe3, 0xbd,
	0x41, 0xe2, 0x2c, 0x2b, 0xca, 0x38, 0x80, 0xf6, 0xeb, 0x64, 0xb9, 0x17, 0x9e, 0xee, 0xbb, 0x9c,
	0xe3, 0x1c, 0xd5, 0xde, 0x96, 0xfd, 0x7c, 0x00, 0x4c, 0x00, 0xe8, 0x78, 0x4d, 0x53, 0xb1, 0x1e,
	0x13, 0xa8, 0xa4, 0x67, 0x40, 0xc9, 0x59, 0xa5, 0x3d, 0x00, 0x74, 0xb6, 0x51, 0x1c, 0x0a, 0x5b,
	0x94, 0x18, 0x3d, 0x8f, 0x37, 0xb5, 0xb6, 0xb1, 0x55, 0xeb, 0x1b, 0xbe, 0xc7, 0x55, 0x12, 0x7a,
	0x15, 0x89, 0x07, 0xe0, 0xd4, 0x27, 0xb7, 0xa3, 0x67, 0x91, 0xcb, 0x83, 0xb1, 0xf0, 0xa3, 0xb0,
	0x68, 0x52, 0xf5, 0x48, 0x82, 0xce, 0xbb, 0x28, 0xfe, 0x0f, 0x23, 0x3f, 0x7c, 0xc8, 0x59, 0x0c,
	0x67, 0x5b, 0x4c, 0xd4, 0xb9, 0x46, 0xae, 0xf4, 0xd9, 0xc9, 0x83, 0x70, 0xe4, 0x87, 0xec, 0x4e,
	0xec, 0xb3, 0xd0, 0xdb, 0xf5, 0xb9, 0x70, 0x7e, 0xaf, 0x03, 0x2e, 0xca, 0xb8, 0xbd, 0x4d, 0xea,
	0xfb, 0x23, 0xf7, 0x9c, 0xc5, 0x92, 0xd5, 0xe5, 0x9b, 0xd7, 0x55, 0x5f, 0x2d, 0x4f, 0xef, 0xc8,
	0xbf, 0xb7, 0x5d, 0xe1, 0xf6, 0xeb, 0x63, 0xb9, 0xae, 0xf5, 0x2f, 0x8d, 0x90, 0x1c, 0xb7, 0xaf,
	0x12, 0xbd, 0x74, 0x38, 0xdd, 0x47, 0x5e, 0xb7, 0x07, 0x83, 0x68, 0x12, 0x8a, 0xa2, 0x0d, 0xb8,
	0x12, 0x04, 0xcb, 0x4d, 0x0c, 0x40, 0xf1, 0x2d, 0x1f, 0xb4, 0xba, 0x4e, 0x8c, 0x03, 0xf6, 0xa4,
	0x59, 0x53, 0x06, 0x0c, 0xce, 0x9e, 0x60, 0x30, 0x10, 0xae, 0x60, 0x4d, 0x53, 0x19, 0x31, 0x39,
	0x40, 0x20, 0xa6, 0xcc, 0x5c, 0x2c, 0xc5, 0x5c, 0x1a, 0x63, 0xc5, 0x56, 0x76, 0xd9, 0x29, 0x1b,
	0x15, 0x43, 0xc9, 0x08, 0x20, 0x8c, 0xdd, 0x83, 0x28, 0x66, 0xbc, 0x10, 0x4b, 0x2c, 0x8e, 0x98,
	0x73, 0x05, 0x1c, 0x53, 0xb1, 0x14, 0x14, 0xef, 0x6f, 0x0d, 0x74, 0xd7, 0x22, 0x6a, 0xdf, 0x2a,
	0x0b, 0xf7, 0x35, 0x55, 0xb8, 0xc5, 0xc9, 0x9d, 0x3d, 0x16, 0x3c, 0x62, 0x71, 0x41, 0xb4, 0x70,
	0x92, 0x8f, 0x62, 0xcc, 0x0b, 0xaa, 0x47, 0x5b, 0x27, 0x88, 0xb5, 0xfe, 0xa0, 0x13, 0x92, 0xaf,
	0x7a, 0x61, 0x82, 0x4f, 0x13, 0xb0, 0x39, 0x95, 0x80, 0x33, 0x95, 0x58, 0x95, 0x2a, 0xe9, 0x71,
	0x69, 0xbb, 0xcd, 0x7a, 0x5b, 0xcf, 0x52, 0x62, 0xc3, 0x4f, 0xd0, 0x82, 0xd2, 0x1a, 0x95, 0x4a,
	0x43, 0x1a, 0xf7, 0xd9, 0xd9, 0x23, 0x9f, 0x61, 0x20, 0x57, 0x68, 0x48, 0x34, 0x57, 0x2b, 0x99,
	0xa7, 0xd6, 0xe5, 0x0a, 0xb5, 0xca, 0x2c, 0x7a, 0x20, 0xdc, 0x58, 0xdc, 0x75, 0x03, 0xe6, 0xdc,
	0xc1, 0x82, 0x20, 0xfb, 0x46, 0x39, 0x7a, 0x5e, 0xcc, 0x38, 0x2f, 0x54, 0x1e, 0x75, 0x57, 0x82,
	0xb3, 0x8a, 0x0f, 0xe7, 0x01, 0xb9, 0xd6, 0x67, 0xa2, 0x1f, 0x45, 0x01, 0x38, 0x31, 0x68, 0xfa,
	0x30, 0xba, 0x0b, 0x02, 0xd9, 0x20, 0x16, 0x54, 0x47, 0x3e, 0xa8, 0x2c, 0x0f, 0x57, 0x09, 0x66,
	0x37, 0x09, 0xd6, 0x4b, 0xbe, 0x07, 0xb1, 0x01, 0x42, 0x50, 0xfa, 0xe9, 0x7c, 0x43, 0x06, 0xee,
	0x63, 0x37, 0x1c, 0x32, 0x0c, 0x9f, 0x33, 0x0b, 0x22, 0xe7, 0x86, 0x0c, 0xfa, 0xf9, 0xd4, 0x05,
	0x85, 0x86, 0xf3, 0x36, 0x59, 0x85, 0xc3, 0xb2, 0xa3, 0x98, 0xf1, 0xe3, 0x0b, 0xad, 0x78, 0x03,
	0x56, 0x9c, 0xa8, 0x2b, 0x66, 0x1f, 0xe7, 0x5b, 0xe8, 0x23, 0xdd, 0xe3, 0x28, 0xe2, 0xec, 0xe0,
	0x3c, 0x1c, 0x60, 0x44, 0xfb, 0x3a, 0x21, 0x12, 0x49, 0xb2, 0x5a, 0xae, 0x55, 0x32, 0xc8, 0x70,
	0xb9, 0xf4, 0xe4, 0xb9, 0x96, 0xfe, 0x5d, 0xc7, 0xc4, 0xf6, 0x03, 0xd7, 0x97, 0xe5, 0x1d, 0x38,
	0xe6, 0x77, 0x49, 0x03, 0xbe, 0x47, 0x3e, 0x17, 0x89, 0x67, 0x7e, 0x4d, 0xf5, 0x4c, 0x75, 0x6e,
	0x07, 0xfe, 0xa0, 0x57, 0x36, 0xce, 0x92, 0x25, 0xad, 0x9f, 0xe9, 0xa4, 0x91, 0xc2, 0xa0, 0xf8,
	0xc3, 0x92, 0xdf, 0x19, 0x22, 0xa9, 0x16, 0xdc, 0xa0, 0xe8, 0xb9, 0xd2, 0x4d, 0x14, 0x97, 0x54,
	0xab, 0xd1, 0xcc, 0x25, 0x33, 0xc7, 0xd3, 0xa6, 0x1c, 0x0f, 0x9d, 0xc3, 0x54, 0x06, 0xa4, 0xab,
	0xfe, 0x0f, 0xe3, 0x1d, 0x8c, 0xee, 0xb1, 0xe0, 0xfe, 0x24, 0x40, 0x97, 0xcb, 0x46, 0x03, 0xc4,
	0x9c, 0xf7, 0x31, 0x47, 0x15, 0x84, 0x8b, 0x6a, 0x01, 0x93, 0xab, 0x52, 0x4b, 0x8a, 0x3b, 0x37,
	0xb2, 0xe4, 0x06, 0x0b, 0xd1, 0xc5, 0x36, 0x88, 0x05, 0x7e, 0x52, 0xae, 0xbe, 0x62, 0xc4, 0x92,
	0x82, 0x45, 0xfa, 0x39, 0xc6, 0xdc, 0x9f, 0xca, 0x3a, 0x37, 0x47, 0xec, 0x6f, 0x97, 0xe3, 0x6d,
	0x41, 0xab, 0xf9, 0xc4, 0x8e, 0xfc, 0x5b, 0x4c, 0x63, 0xbf, 0xd1, 0x08, 0xc9, 0xf1, 0x17, 0x16,
	0x4d, 0x55, 0xd5, 0xa9, 0x11, 0xb5, 0x10, 0xf5, 0x76, 0xa3, 0x81, 0x0b, 0x35, 0x41, 0x21, 0xb0,
	0x36, 0x46, 0x09, 0x2a, 0x63, 0x97, 0xd8, 0x65, 0x6e, 0x52, 0xa4, 0x5d, 0x47, 0xd9, 0xc2, 0xdf,
	0x7b, 0xfe, 0xe0, 0x31, 0xc4, 0x9d, 0x6a, 0x76, 0xe4, 0x44, 0x71, 0x81, 0x89, 0x3f, 0x56, 0xaa,
	0x45, 0xd0, 0xd1, 0x9c, 0x2e, 0xac, 0x45, 0xcc, 0xbd, 0xc8, 0x63, 0xa3, 0x42, 0x4d, 0x63, 0x06,
	0x00, 0xc1, 0xaa, 0xfd, 0xd8, 0x3f, 0x2d, 0x8a, 0x67, 0x1c, 0xfb, 0xa7, 0xb2, 0xc5, 0xe1, 0xfc,
	0xcc, 0x2b, 0x94, 0x77, 0xd6, 0x18, 0xb1, 0x34, 0x90, 0xe5, 0xdb, 0x2f, 0x0a, 0x4b, 0xff, 0xd1,
	0x30, 0x2e, 0x1d, 0xc8, 0xc8, 0x8b, 0x0a, 0xfd, 0xb2, 0x4f, 0xdc, 0x22, 0xe6, 0x5d, 0x6c, 0x38,
	0x54, 0x3f, 0x35, 0x87, 0x69, 0xc3, 0xd1, 0x75, 0x43, 0x30, 0x6e, 0x74, 0xd6, 0xd4, 0xfe, 0xeb,
	0x03, 0x09, 0x2a, 0xdc, 0x5a, 0xd3, 0xdc, 0xca, 0x76, 0xc5, 0x45, 0x97, 0x53, 0xbd, 0xb5, 0x2e,
	0x24, 0xa8, 0x78, 0x64, 0xa3, 0xc2, 0x23, 0xff, 0x86, 0xac, 0x8b, 0xaf, 0x2a, 0xeb, 0x0a, 0x73,
	0xd6, 0x7c, 0xe6, 0xea, 0x15, 0xcc, 0xc9, 0x8e, 0x04, 0x18, 0x4b, 0xc3, 0x8d, 0xf3, 0x13, 0x9d,
	0x34, 0xc0, 0x72, 0xd3, 0x60, 0xfc, 0xb0, 0x57, 0xcc, 0xa8, 0xc6, 0xa4, 0x57, 0xf2, 0x5b, 0x6d,
	0x9e, 0xdf, 0xce, 0x0b, 0xad, 0xb5, 0xca, 0xd0, 0x9a, 0x78, 0xb6, 0x59, 0x0e, 0xd7, 0x59, 0xc8,
	0xb5, 0xe6, 0x85, 0xdc, 0x7a, 0x45, 0xc8, 0x4d, 0xf5, 0xd5, 0x98, 0x4a, 0x1d, 0xa9, 0x4e, 0xd4,
	0x50, 0x8c, 0x3a, 0x71, 0x3e, 0x36, 0xd0, 0x97, 0x55, 0xd1, 0x5c, 0xa0, 0x05, 0xc9, 0x93, 0xd4,
	0x4c, 0xcb, 0x30, 0x66, 0x5b, 0x46, 0x6d, 0xca, 0x32, 0xde, 0x27, 0x26, 0xec, 0x9e, 0x36, 0xfe,
	0x85, 0xf8, 0xab, 0x1e, 0x2d, 0xcf, 0xaa, 0x26, 0x28, 0x9e, 0xe7, 0x26, 0x65, 0xcd, 0x35, 0xa9,
	0xfa, 0x02, 0x93, 0x6a, 0xcc, 0x37, 0xa9, 0x8a, 0x0c, 0xa6, 0xd4, 0xd8, 0xa4, 0xa2, 0xc6, 0x1e,
	0x54, 0x67, 0xfa, 0x95, 0x8b, 0x65, 0xfa, 0xd7, 0x48, 0x6d, 0x8f, 0x25, 0x17, 0x27, 0xcb, 0x37,
	0x2f, 0x67, 0xd2, 0x48, 0xed, 0xb5, 0x5f, 0x0b, 0x58, 0xc0, 0x93, 0xe6, 0x13, 0x73, 0xdf, 0xf3,
	0x36, 0x9f, 0xbf, 0x96, 0xc9, 0x50, 0xa1, 0xb1, 0x58, 0xf9, 0x59, 0xbf, 0xac, 0xcf, 0xea, 0x97,
	0x91, 0xad, 0x42, 0x8d, 0x52, 0xd1, 0xb3, 0xd7, 0x2e, 0xd0, 0xb3, 0x9b, 0xb3, 0x7a, 0x76, 0x28,
	0xe9, 0xc3, 0xd3, 0x69, 0x3f, 0x69, 0xf8, 0x09, 0x9a, 0x1b, 0x62, 0xa1, 0x72, 0x91, 0x86, 0xe8,
	0x90, 0xa5, 0x5e, 0x78, 0x5a, 0x51, 0xbc, 0x2c, 0xf9, 0x29, 0xac, 0x4a, 0x6e, 0xb9, 0x4a, 0x72,
	0x07, 0xf2, 0x92, 0x23, 0x7a, 0x26, 0xd1, 0x2d, 0x6a, 0xdd, 0xdf, 0x91, 0x97, 0x29, 0x2a, 0xd1,
	0x45, 0x29, 0x6b, 0x45, 0x5e, 0x1f, 0xf8, 0x9c, 0xc3, 0x22, 0xf9, 0x29, 0xb2, 0xcf, 0xeb, 0x38,
	0xda, 0xef, 0x1e, 0x0f, 0x17, 0x14, 0xd9, 0xb7, 0x70, 0x5d, 0x36, 0x31, 0x0b, 0x88, 0x7a, 0x31,
	0x20, 0xce, 0x74, 0x7c, 0xe7, 0x10, 0x09, 0xf4, 0x42, 0x81, 0x87, 0x07, 0xf7, 0xc0, 0x46, 0xb5,
	0x54, 0x94, 0x09, 0xc4, 0xec, 0xeb, 0xc4, 0x7c, 0x08, 0x86, 0x8c, 0x74, 0x2a, 0x2d, 0xdc, 0x9c,
	0xc0, 0x8f, 0xd3, 0x95, 0x37, 0x9e, 0x4f, 0x7c, 0x71, 0x01, 0xaa, 0xc9, 0xa1, 0xf5, 0xd2, 0xa1,
	0x1d, 0x5f, 0x69, 0x7d, 0xb0, 0x03, 0xd8, 0x20, 0xd6, 0x83, 0x91, 0x57, 0x76, 0x4a, 0x2b, 0x42,
	0x0c, 0x46, 0xef, 0xb3, 0xb3, 0xc3, 0x84, 0x52, 0x36, 0x1a, 0x22, 0x06, 0xa3, 0x70, 0xc8, 0x9e,
	0x87, 0x06, 0x9e, 0xf5, 0x5f, 0x13, 0xc4, 0x9c, 0x81, 0xd2, 0x3a, 0x7d, 0xe1, 0xad, 0x12, 0x7e,
	0x8c, 0x32, 0x3f, 0x1f, 0xa6, 0x45, 0x0a, 0x86, 0xaf, 0xa4, 0x04, 0x9e, 0x23, 0x97, 0x16, 0x31,
	0x0f, 0xa7, 0xb4, 0x66, 0x0a, 0x80, 0x24, 0x2d, 0xf1, 0xe5, 0xd0, 0x92, 0xa5, 0x36, 0xf6, 0xbe,
	0x7d, 0x6c, 0x86, 0x7f, 0x9e, 0xdc, 0xfa, 0xf5, 0x59, 0x37, 0x0a, 0x43, 0x36, 0x10, 0xb9, 0x57,
	0x6a, 0xd3, 0xe9, 0xa1, 0x4d, 0x1a, 0xa0, 0xe4, 0x29, 0xea, 0x8d, 0x38, 0x41, 0xc1, 0x17, 0x40,
	0xf6, 0x10, 0x92, 0xd5, 0xf4, 0x82, 0x3d, 0x2e, 0xc4, 0xe4, 0x4d, 0x52, 0xff, 0x20, 0xf4, 0x92,
	0x12, 0x43, 0x19, 0x67, 0x12, 0x74, 0x8e, 0xb1, 0x59, 0xc7, 0xe6, 0x21, 0x35, 0xa7, 0x44, 0x97,
	0xaa, 0xa1, 0x27, 0xba, 0x54, 0xaa, 0x2d, 0xbd, 0xa2, 0xda, 0xca, 0xe3, 0xbf, 0x31, 0x1d, 0xff,
	0x9d, 0xd7, 0xe5, 0xeb, 0x43, 0x56, 0x1e, 0xcf, 0xf0, 0xa7, 0xa4, 0x04, 0xcf, 0xe6, 0x39, 0x3b,
	0x99, 0x6a, 0xf7, 0x58, 0x00, 0xc9, 0x72, 0x9e, 0x27, 0x62, 0x32, 0xd5, 0xcb, 0xc9, 0x54, 0xd2,
	0x10, 0x5f, 0x8c, 0x46, 0x87, 0x50, 0x88, 0x1b, 0x6e, 0xe8, 0xc9, 0x0b, 0x08, 0x90, 0x2e, 0x5e,
	0x95, 0x97, 0xef, 0x90, 0xcd, 0x18, 0xa3, 0xa1, 0x0c, 0x1f, 0x3b, 0xcf, 0x1f, 0x3e, 0xd0, 0x47,
	0xc5, 0x4e, 0xc1, 0x52, 0x66, 0xed, 0xa6, 0xea, 0x59, 0xaf, 0xd0, 0xb3, 0xd2, 0x11, 0x1a, 0x33,
	0x3b, 0xc2, 0x7c, 0x2b, 0xe7, 0x73, 0x8d, 0xd0, 0x6d, 0xcf, 0x93, 0x97, 0x91, 0x7d, 0x76, 0x32,
	0x61, 0x5c, 0x00, 0x8d, 0x3b, 0x71, 0xd6, 0x55, 0x66, 0xb6, 0x71, 0x84, 0xd8, 0xc2, 0x86, 0x2e,
	0x29, 0xee, 0x8c, 0x72, 0xdb, 0xb6, 0x4e, 0x8c, 0xed, 0x61, 0xb1, 0x00, 0x36, 0xdc, 0x21, 0x53,
	0x7a, 0x74, 0x7d, 0xba, 0x90, 0x9c, 0xdf, 0xc6, 0x61, 0xa9, 0x19, 0xfb, 0x3f, 0x62, 0xdd, 0xc9,
	0xb8, 0x90, 0xec, 0x1a, 0xe3, 0x04, 0x75, 0x7e, 0xa7, 0x11, 0x7b, 0x7f, 0xc2, 0x8f, 0xb7, 0x87,
	0x31, 0x63, 0x19, 0xa7, 0xb0, 0x50, 0xfe, 0x2b, 0xe7, 0xab, 0xa3, 0x04, 0xfd, 0x2a, 0xb1, 0xe9,
	0xfc, 0x52, 0x5e, 0x45, 0xef, 0x31, 0xce, 0xdd, 0x21, 0x72, 0x11, 0x8d, 0x46, 0xd1, 0x59, 0x89,
	0x0b, 0x6d, 0x11, 0x17, 0xda, 0x1c, 0x2e, 0xb4, 0x67, 0xe5, 0x42, 0x9b, 0xcb, 0x85, 0x56, 0xa1,
	0xac, 0x26, 0xa9, 0x09, 0xb0, 0x6a, 0xb5, 0x22, 0x45, 0x04, 0xd6, 0x42, 0x68, 0xf1, 0x2b, 0xef,
	0x31, 0x91, 0xfa, 0x06, 0xb1, 0xb8, 0x70, 0xc5, 0x84, 0x17, 0x0b, 0x52, 0x89, 0x39, 0x1f, 0x6b,
	0x64, 0xe5, 0xe1, 0x18, 0x9c, 0x35, 0x11, 0x11, 0xcc, 0x97, 0xb7, 0x7f, 0xc5, 0xab, 0x42, 0x89,
	0xbd, 0x58, 0xa9, 0x64, 0x9c, 0x59, 0x55, 0x9c, 0x39, 0x3f, 0x84, 0x30, 0xe8, 0xed, 0x47, 0x7e,
	0x28, 0xb0, 0x64, 0xc6, 0xa2, 0xc7, 0x9b, 0x7e, 0xb0, 0x8a, 0x25, 0x88, 0x0e, 0xce, 0x3c, 0xc8,
	0x03, 0x85, 0x97, 0xcd, 0x18, 0x31, 0x18, 0xed, 0xf1, 0x83, 0xe3, 0xe8, 0xac, 0xf8, 0x88, 0xea,
	0x23, 0xe6, 0x7c, 0x07, 0x23, 0x0d, 0xb8, 0xc3, 0x1e, 0x1f, 0x76, 0x03, 0xcf, 0x7e, 0x13, 0xea,
	0xd9, 0xa3, 0x28, 0xbd, 0xfc, 0xb9, 0xa6, 0x34, 0x1f, 0xf9, 0x91, 0xa0, 0xc0, 0x3d, 0x8a, 0x38,
	0x74, 0x92, 0x0f, 0xc7, 0x9e, 0x2b, 0xd8, 0xc1, 0xb1, 0xfb, 0x98, 0x41, 0xb4, 0x79, 0xe3, 0x57,
	0x96, 0x6c, 0x24, 0x80, 0xd6, 0x12, 0x31, 0xf1, 0x21, 0x98, 0x6a, 0xf6, 0x6a, 0xfa, 0xbc, 0x01,
	0x8d, 0x0b, 0xd5, 0xe1, 0x3b, 0xbf, 0xba, 0xa7, 0x86, 0x7d, 0x89, 0x34, 0xd2, 0x47, 0x1f, 0x5a,
	0x83, 0xd1, 0xfc, 0x52, 0x9f, 0x9a, 0xf6, 0x0a, 0x59, 0xca, 0x2e, 0x91, 0xa9, 0x05, 0xc3, 0xf9,
	0x7d, 0x2c, 0xad, 0xe3, 0x62, 0x9f, 0x73, 0x20, 0x48, 0x1b, 0xf0, 0x95, 0x3e, 0x0a, 0xd3, 0x25,
	0x58, 0x9a, 0xbd, 0xea, 0x52, 0x02, 0x83, 0xe9, 0x75, 0x19, 0x5d, 0x06, 0x42, 0xf9, 0x4b, 0x2a,
	0xbd, 0x04, 0xdf, 0xb9, 0x28, 0xe8, 0x0a, 0x6e, 0x94, 0x3d, 0xee, 0xd1, 0x55, 0xf8, 0xce, 0x2f,
	0xc0, 0xe8, 0x5a, 0x3e, 0x0e, 0x01, 0x96, 0x52, 0x7b, 0x8d, 0x2c, 0x2b, 0x57, 0x06, 0xf4, 0xb2,
	0x4d, 0xc9, 0x25, 0xb5, 0x63, 0xa3, 0x36, 0x2c, 0xc9, 0xeb, 0x59, 0x7a, 0x05, 0x66, 0xa8, 0x15,
	0x2e, 0xbd, 0x9a, 0x72, 0x83, 0x24, 0xaf, 0xc1, 0x57, 0x5a, 0x87, 0xd2, 0x75, 0xf8, 0x4a, 0x8b,
	0x4a, 0xfa, 0x32, 0x72, 0x9a, 0x14, 0x83, 0xb4, 0x99, 0x4b, 0x05, 0x0f, 0xfb, 0x7f, 0xc9, 0x61,
	0xd2, 0x4a, 0x86, 0xb6, 0x90, 0xdb, 0xac, 0x1c, 0xa1, 0xaf, 0xa0, 0x0e, 0xb2, 0xb8, 0x4f, 0xff,
	0x1f, 0x44, 0x95, 0x55, 0x03, 0x74, 0x13, 0x4e, 0xa6, 0x3e, 0x9b, 0xd1, 0x57, 0x61, 0x42, 0x76,
	0x3f, 0x46, 0xdb, 0xf0, 0x99, 0xe5, 0x6a, 0xba, 0x95, 0xee, 0x97, 0xa4, 0x59, 0xfa, 0xa6, 0x7d,
	0x99, 0xac, 0x14, 0x72, 0x26, 0x7d, 0x0b, 0x68, 0xaa, 0x17, 0x65, 0xb4, 0x23, 0x0f, 0x95, 0x3e,
	0xf9, 0xd2, 0xb7, 0x6d, 0x9b, 0xac, 0x16, 0xdf, 0x6b, 0xe9, 0x3b, 0x80, 0x15, 0x6f, 0xad, 0xe9,
	0x4d, 0xa0, 0xa4, 0x5e, 0x98, 0xd2, 0x77, 0xed, 0x97, 0x21, 0x22, 0xe2, 0x15, 0x7a, 0x61, 0xe0,
	0x3d, 0x38, 0x98, 0x72, 0xb7, 0x4e, 0xbf, 0x69, 0xaf, 0x11, 0x92, 0x27, 0x3c, 0xfa, 0x47, 0xcd,
	0xbe, 0x4a, 0xd6, 0xb2, 0x44, 0x00, 0xbb, 0x1e, 0x9d, 0xd3, 0x4f, 0x11, 0xcd, 0xf2, 0x84, 0x1c,
	0xa3, 0x7f, 0xd2, 0x6c, 0x4a, 0x96, 0x15, 0x9b, 0xa7, 0x7f, 0x06, 0xdb, 0x5e, 0xca, 0x02, 0x30,
	0xfd, 0x8b, 0x66, 0xbf, 0x42, 0xd6, 0x61, 0x77, 0xf9, 0x44, 0xa1, 0x3e, 0x5a, 0xd0, 0xbf, 0x6a,
	0xf6, 0x15, 0xb2, 0x2a, 0x97, 0x63, 0xad, 0x15, 0x1e, 0x45, 0xf4, 0x33, 0x6d, 0x87, 0x7e, 0xf2,
	0x74, 0x53, 0xfb, 0xf4, 0xe9, 0xa6, 0xf6, 0x8f, 0xa7, 0x9b, 0xda, 0x2f, 0xfe, 0xb9, 0xf9, 0xd2,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x98, 0x8b, 0xdd, 0xf5, 0x21, 0x00, 0x00,
}
