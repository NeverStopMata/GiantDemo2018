// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		chat.proto

	It has these top-level messages:
		ReqChatCreate
		RetChatCreate
		ReqChatChangeName
		ReqChatReport
		RetChatReport
		ReqChatSet
		RetChatSet
		ReqChatPersonalSet
		RetChatPersonalSet
		ReqChatGetRoom
		RetChatGetRoom
		ReqChatDelete
		RetChatDelete
		MsgChatUser
		ReqChatJoin
		ReqChatLeave
		ReqChatTalk
		RetChatTalk
		ReqChatPrivate
		UserDetail
		RetChatPrivate
		ReqChatFansClose
		RetChatFansClose
		RetChatClose
		RetChatError
		ReqChatKick
		ReqChatFriend
		MsgChatSynSet
		MsgChatPersonalSet
		MsgChatTalk
		ReqChatSyn
		RetChatSyn
		ReqChatPower
		RetChatPower
		ReqChatRedSend
		MsgRedDetail
		ReqChatRedReceive
		ReqChatRedSee
		RetChatRedSee
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ChatCmd int32

const (
	// 负载均衡
	ChatCmd_Create      ChatCmd = 1
	ChatCmd_Syn         ChatCmd = 2
	ChatCmd_Report      ChatCmd = 3
	ChatCmd_Set         ChatCmd = 4
	ChatCmd_PersonalSet ChatCmd = 5
	ChatCmd_Friend      ChatCmd = 6
	ChatCmd_Private     ChatCmd = 7
	ChatCmd_Power       ChatCmd = 8
	ChatCmd_Close       ChatCmd = 9
	ChatCmd_Error       ChatCmd = 10
	ChatCmd_FansClose   ChatCmd = 21
	ChatCmd_WorldChat   ChatCmd = 22
	ChatCmd_TeamChat    ChatCmd = 23
	// 带房间号
	ChatCmd_Delete     ChatCmd = 11
	ChatCmd_Join       ChatCmd = 12
	ChatCmd_Leave      ChatCmd = 13
	ChatCmd_Talk       ChatCmd = 14
	ChatCmd_Kick       ChatCmd = 15
	ChatCmd_GetRoom    ChatCmd = 16
	ChatCmd_ChangeName ChatCmd = 17
	ChatCmd_RedSend    ChatCmd = 18
	ChatCmd_RedReceive ChatCmd = 19
	ChatCmd_RedSee     ChatCmd = 20
)

var ChatCmd_name = map[int32]string{
	1:  "Create",
	2:  "Syn",
	3:  "Report",
	4:  "Set",
	5:  "PersonalSet",
	6:  "Friend",
	7:  "Private",
	8:  "Power",
	9:  "Close",
	10: "Error",
	21: "FansClose",
	22: "WorldChat",
	23: "TeamChat",
	11: "Delete",
	12: "Join",
	13: "Leave",
	14: "Talk",
	15: "Kick",
	16: "GetRoom",
	17: "ChangeName",
	18: "RedSend",
	19: "RedReceive",
	20: "RedSee",
}
var ChatCmd_value = map[string]int32{
	"Create":      1,
	"Syn":         2,
	"Report":      3,
	"Set":         4,
	"PersonalSet": 5,
	"Friend":      6,
	"Private":     7,
	"Power":       8,
	"Close":       9,
	"Error":       10,
	"FansClose":   21,
	"WorldChat":   22,
	"TeamChat":    23,
	"Delete":      11,
	"Join":        12,
	"Leave":       13,
	"Talk":        14,
	"Kick":        15,
	"GetRoom":     16,
	"ChangeName":  17,
	"RedSend":     18,
	"RedReceive":  19,
	"RedSee":      20,
}

func (x ChatCmd) Enum() *ChatCmd {
	p := new(ChatCmd)
	*p = x
	return p
}
func (x ChatCmd) String() string {
	return proto.EnumName(ChatCmd_name, int32(x))
}
func (x *ChatCmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChatCmd_value, data, "ChatCmd")
	if err != nil {
		return err
	}
	*x = ChatCmd(value)
	return nil
}
func (ChatCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorChat, []int{0} }

// 请求创建聊天房间 --接入
type ReqChatCreate struct {
	Type         int32                     `protobuf:"varint,1,req,name=Type,json=type" json:"Type"`
	Name         string                    `protobuf:"bytes,2,req,name=Name,json=name" json:"Name"`
	LastTime     uint32                    `protobuf:"varint,3,req,name=LastTime,json=lastTime" json:"LastTime"`
	OnlyStr      string                    `protobuf:"bytes,4,req,name=OnlyStr,json=onlyStr" json:"OnlyStr"`
	UserList     []uint64                  `protobuf:"varint,5,rep,name=UserList,json=userList" json:"UserList,omitempty"`
	NickNameList []*ReqChatCreate_NickName `protobuf:"bytes,6,rep,name=NickNameList,json=nickNameList" json:"NickNameList,omitempty"`
}

func (m *ReqChatCreate) Reset()                    { *m = ReqChatCreate{} }
func (m *ReqChatCreate) String() string            { return proto.CompactTextString(m) }
func (*ReqChatCreate) ProtoMessage()               {}
func (*ReqChatCreate) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{0} }

func (m *ReqChatCreate) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqChatCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqChatCreate) GetLastTime() uint32 {
	if m != nil {
		return m.LastTime
	}
	return 0
}

func (m *ReqChatCreate) GetOnlyStr() string {
	if m != nil {
		return m.OnlyStr
	}
	return ""
}

func (m *ReqChatCreate) GetUserList() []uint64 {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *ReqChatCreate) GetNickNameList() []*ReqChatCreate_NickName {
	if m != nil {
		return m.NickNameList
	}
	return nil
}

type ReqChatCreate_NickName struct {
	Id   uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Name string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name"`
}

func (m *ReqChatCreate_NickName) Reset()                    { *m = ReqChatCreate_NickName{} }
func (m *ReqChatCreate_NickName) String() string            { return proto.CompactTextString(m) }
func (*ReqChatCreate_NickName) ProtoMessage()               {}
func (*ReqChatCreate_NickName) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{0, 0} }

func (m *ReqChatCreate_NickName) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqChatCreate_NickName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RetChatCreate struct {
	RoomId   string                      `protobuf:"bytes,1,opt,name=RoomId,json=roomId" json:"RoomId"`
	Type     int32                       `protobuf:"varint,2,opt,name=Type,json=type" json:"Type"`
	Name     string                      `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name"`
	EndTime  uint32                      `protobuf:"varint,4,opt,name=EndTime,json=endTime" json:"EndTime"`
	OnlyStr  string                      `protobuf:"bytes,5,opt,name=OnlyStr,json=onlyStr" json:"OnlyStr"`
	UserList []*RetChatCreate_UserDetail `protobuf:"bytes,6,rep,name=UserList,json=userList" json:"UserList,omitempty"`
	Owner    uint64                      `protobuf:"varint,7,opt,name=Owner,json=owner" json:"Owner"`
}

func (m *RetChatCreate) Reset()                    { *m = RetChatCreate{} }
func (m *RetChatCreate) String() string            { return proto.CompactTextString(m) }
func (*RetChatCreate) ProtoMessage()               {}
func (*RetChatCreate) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{1} }

func (m *RetChatCreate) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RetChatCreate) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RetChatCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetChatCreate) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RetChatCreate) GetOnlyStr() string {
	if m != nil {
		return m.OnlyStr
	}
	return ""
}

func (m *RetChatCreate) GetUserList() []*RetChatCreate_UserDetail {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *RetChatCreate) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

type RetChatCreate_UserDetail struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,req,name=Sex,json=sex" json:"Sex"`
	PassIcon string `protobuf:"bytes,4,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Icon     uint32 `protobuf:"varint,5,req,name=Icon,json=icon" json:"Icon"`
	NickName string `protobuf:"bytes,6,opt,name=NickName,json=nickName" json:"NickName"`
}

func (m *RetChatCreate_UserDetail) Reset()                    { *m = RetChatCreate_UserDetail{} }
func (m *RetChatCreate_UserDetail) String() string            { return proto.CompactTextString(m) }
func (*RetChatCreate_UserDetail) ProtoMessage()               {}
func (*RetChatCreate_UserDetail) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{1, 0} }

func (m *RetChatCreate_UserDetail) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetChatCreate_UserDetail) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetChatCreate_UserDetail) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetChatCreate_UserDetail) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetChatCreate_UserDetail) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetChatCreate_UserDetail) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

// 获取房间详细信息--接入
type ReqChatChangeName struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	Name   string `protobuf:"bytes,2,req,name=Name,json=name" json:"Name"`
}

func (m *ReqChatChangeName) Reset()                    { *m = ReqChatChangeName{} }
func (m *ReqChatChangeName) String() string            { return proto.CompactTextString(m) }
func (*ReqChatChangeName) ProtoMessage()               {}
func (*ReqChatChangeName) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{2} }

func (m *ReqChatChangeName) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatChangeName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 举报--接入
type ReqChatReport struct {
	Id     uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	RoomId string `protobuf:"bytes,2,req,name=RoomId,json=roomId" json:"RoomId"`
	Type   int32  `protobuf:"varint,3,req,name=Type,json=type" json:"Type"`
	PicUrl string `protobuf:"bytes,4,req,name=PicUrl,json=picUrl" json:"PicUrl"`
}

func (m *ReqChatReport) Reset()                    { *m = ReqChatReport{} }
func (m *ReqChatReport) String() string            { return proto.CompactTextString(m) }
func (*ReqChatReport) ProtoMessage()               {}
func (*ReqChatReport) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{3} }

func (m *ReqChatReport) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqChatReport) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatReport) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqChatReport) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

type RetChatReport struct {
	Succ bool `protobuf:"varint,1,req,name=Succ,json=succ" json:"Succ"`
}

func (m *RetChatReport) Reset()                    { *m = RetChatReport{} }
func (m *RetChatReport) String() string            { return proto.CompactTextString(m) }
func (*RetChatReport) ProtoMessage()               {}
func (*RetChatReport) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{4} }

func (m *RetChatReport) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

// 群设置--接入
type ReqChatSet struct {
	Id     uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	RoomId string `protobuf:"bytes,2,req,name=RoomId,json=roomId" json:"RoomId"`
	Type   int32  `protobuf:"varint,3,req,name=Type,json=type" json:"Type"`
	IsOpen bool   `protobuf:"varint,4,req,name=IsOpen,json=isOpen" json:"IsOpen"`
}

func (m *ReqChatSet) Reset()                    { *m = ReqChatSet{} }
func (m *ReqChatSet) String() string            { return proto.CompactTextString(m) }
func (*ReqChatSet) ProtoMessage()               {}
func (*ReqChatSet) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{5} }

func (m *ReqChatSet) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqChatSet) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatSet) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqChatSet) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type RetChatSet struct {
	Type   int32 `protobuf:"varint,1,req,name=Type,json=type" json:"Type"`
	IsOpen bool  `protobuf:"varint,2,req,name=IsOpen,json=isOpen" json:"IsOpen"`
}

func (m *RetChatSet) Reset()                    { *m = RetChatSet{} }
func (m *RetChatSet) String() string            { return proto.CompactTextString(m) }
func (*RetChatSet) ProtoMessage()               {}
func (*RetChatSet) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{6} }

func (m *RetChatSet) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RetChatSet) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

// 个人设置--接入
type ReqChatPersonalSet struct {
	Type   int32 `protobuf:"varint,1,req,name=Type,json=type" json:"Type"`
	IsOpen bool  `protobuf:"varint,2,req,name=IsOpen,json=isOpen" json:"IsOpen"`
}

func (m *ReqChatPersonalSet) Reset()                    { *m = ReqChatPersonalSet{} }
func (m *ReqChatPersonalSet) String() string            { return proto.CompactTextString(m) }
func (*ReqChatPersonalSet) ProtoMessage()               {}
func (*ReqChatPersonalSet) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{7} }

func (m *ReqChatPersonalSet) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqChatPersonalSet) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type RetChatPersonalSet struct {
	Type   int32 `protobuf:"varint,1,req,name=Type,json=type" json:"Type"`
	IsOpen bool  `protobuf:"varint,2,req,name=IsOpen,json=isOpen" json:"IsOpen"`
}

func (m *RetChatPersonalSet) Reset()                    { *m = RetChatPersonalSet{} }
func (m *RetChatPersonalSet) String() string            { return proto.CompactTextString(m) }
func (*RetChatPersonalSet) ProtoMessage()               {}
func (*RetChatPersonalSet) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{8} }

func (m *RetChatPersonalSet) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RetChatPersonalSet) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

// 获取房间详细信息--接入
type ReqChatGetRoom struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *ReqChatGetRoom) Reset()                    { *m = ReqChatGetRoom{} }
func (m *ReqChatGetRoom) String() string            { return proto.CompactTextString(m) }
func (*ReqChatGetRoom) ProtoMessage()               {}
func (*ReqChatGetRoom) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{9} }

func (m *ReqChatGetRoom) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type RetChatGetRoom struct {
	RoomId   string         `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	Type     int32          `protobuf:"varint,2,req,name=Type,json=type" json:"Type"`
	Name     string         `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name"`
	EndTime  uint32         `protobuf:"varint,4,opt,name=EndTime,json=endTime" json:"EndTime"`
	OnlyStr  string         `protobuf:"bytes,5,opt,name=OnlyStr,json=onlyStr" json:"OnlyStr"`
	UserList []*MsgChatUser `protobuf:"bytes,6,rep,name=UserList,json=userList" json:"UserList,omitempty"`
	Owner    uint64         `protobuf:"varint,7,opt,name=Owner,json=owner" json:"Owner"`
	Succ     bool           `protobuf:"varint,8,opt,name=Succ,json=succ" json:"Succ"`
}

func (m *RetChatGetRoom) Reset()                    { *m = RetChatGetRoom{} }
func (m *RetChatGetRoom) String() string            { return proto.CompactTextString(m) }
func (*RetChatGetRoom) ProtoMessage()               {}
func (*RetChatGetRoom) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{10} }

func (m *RetChatGetRoom) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RetChatGetRoom) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RetChatGetRoom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetChatGetRoom) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RetChatGetRoom) GetOnlyStr() string {
	if m != nil {
		return m.OnlyStr
	}
	return ""
}

func (m *RetChatGetRoom) GetUserList() []*MsgChatUser {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *RetChatGetRoom) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *RetChatGetRoom) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

// 请求解散聊天房间--接入
type ReqChatDelete struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *ReqChatDelete) Reset()                    { *m = ReqChatDelete{} }
func (m *ReqChatDelete) String() string            { return proto.CompactTextString(m) }
func (*ReqChatDelete) ProtoMessage()               {}
func (*ReqChatDelete) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{11} }

func (m *ReqChatDelete) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type RetChatDelete struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *RetChatDelete) Reset()                    { *m = RetChatDelete{} }
func (m *RetChatDelete) String() string            { return proto.CompactTextString(m) }
func (*RetChatDelete) ProtoMessage()               {}
func (*RetChatDelete) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{12} }

func (m *RetChatDelete) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type MsgChatUser struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,req,name=Sex,json=sex" json:"Sex"`
	PassIcon string `protobuf:"bytes,4,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Icon     uint32 `protobuf:"varint,5,req,name=Icon,json=icon" json:"Icon"`
	NickName string `protobuf:"bytes,6,opt,name=NickName,json=nickName" json:"NickName"`
}

func (m *MsgChatUser) Reset()                    { *m = MsgChatUser{} }
func (m *MsgChatUser) String() string            { return proto.CompactTextString(m) }
func (*MsgChatUser) ProtoMessage()               {}
func (*MsgChatUser) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{13} }

func (m *MsgChatUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgChatUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgChatUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *MsgChatUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *MsgChatUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *MsgChatUser) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

// 请求加入聊天房间--接入
type ReqChatJoin struct {
	RoomId   string   `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	UserList []uint64 `protobuf:"varint,2,rep,name=UserList,json=userList" json:"UserList,omitempty"`
}

func (m *ReqChatJoin) Reset()                    { *m = ReqChatJoin{} }
func (m *ReqChatJoin) String() string            { return proto.CompactTextString(m) }
func (*ReqChatJoin) ProtoMessage()               {}
func (*ReqChatJoin) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{14} }

func (m *ReqChatJoin) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatJoin) GetUserList() []uint64 {
	if m != nil {
		return m.UserList
	}
	return nil
}

// 请求离开聊天房间--接入
type ReqChatLeave struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *ReqChatLeave) Reset()                    { *m = ReqChatLeave{} }
func (m *ReqChatLeave) String() string            { return proto.CompactTextString(m) }
func (*ReqChatLeave) ProtoMessage()               {}
func (*ReqChatLeave) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{15} }

func (m *ReqChatLeave) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

// 群聊--接入
type ReqChatTalk struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	Text   string `protobuf:"bytes,2,req,name=Text,json=text" json:"Text"`
}

func (m *ReqChatTalk) Reset()                    { *m = ReqChatTalk{} }
func (m *ReqChatTalk) String() string            { return proto.CompactTextString(m) }
func (*ReqChatTalk) ProtoMessage()               {}
func (*ReqChatTalk) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{16} }

func (m *ReqChatTalk) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatTalk) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type RetChatTalk struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	RoomId string `protobuf:"bytes,2,req,name=RoomId,json=roomId" json:"RoomId"`
	Text   string `protobuf:"bytes,3,req,name=Text,json=text" json:"Text"`
	Time   uint32 `protobuf:"varint,4,req,name=Time,json=time" json:"Time"`
	TalkId uint64 `protobuf:"varint,5,req,name=TalkId,json=talkId" json:"TalkId"`
}

func (m *RetChatTalk) Reset()                    { *m = RetChatTalk{} }
func (m *RetChatTalk) String() string            { return proto.CompactTextString(m) }
func (*RetChatTalk) ProtoMessage()               {}
func (*RetChatTalk) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{17} }

func (m *RetChatTalk) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RetChatTalk) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RetChatTalk) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RetChatTalk) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RetChatTalk) GetTalkId() uint64 {
	if m != nil {
		return m.TalkId
	}
	return 0
}

// 私聊--接入
type ReqChatPrivate struct {
	ToUserId   uint64 `protobuf:"varint,1,req,name=ToUserId,json=toUserId" json:"ToUserId"`
	FromUserId uint64 `protobuf:"varint,2,req,name=FromUserId,json=fromUserId" json:"FromUserId"`
	Text       string `protobuf:"bytes,3,req,name=Text,json=text" json:"Text"`
	TypeId     uint32 `protobuf:"varint,4,req,name=TypeId,json=typeId" json:"TypeId"`
}

func (m *ReqChatPrivate) Reset()                    { *m = ReqChatPrivate{} }
func (m *ReqChatPrivate) String() string            { return proto.CompactTextString(m) }
func (*ReqChatPrivate) ProtoMessage()               {}
func (*ReqChatPrivate) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{18} }

func (m *ReqChatPrivate) GetToUserId() uint64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

func (m *ReqChatPrivate) GetFromUserId() uint64 {
	if m != nil {
		return m.FromUserId
	}
	return 0
}

func (m *ReqChatPrivate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ReqChatPrivate) GetTypeId() uint32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

type UserDetail struct {
	Id       uint64 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,opt,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,opt,name=Sex,json=sex" json:"Sex"`
	PassIcon string `protobuf:"bytes,4,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Icon     uint32 `protobuf:"varint,5,opt,name=Icon,json=icon" json:"Icon"`
	State    uint32 `protobuf:"varint,6,opt,name=State,json=state" json:"State"`
}

func (m *UserDetail) Reset()                    { *m = UserDetail{} }
func (m *UserDetail) String() string            { return proto.CompactTextString(m) }
func (*UserDetail) ProtoMessage()               {}
func (*UserDetail) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{19} }

func (m *UserDetail) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserDetail) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UserDetail) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserDetail) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *UserDetail) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *UserDetail) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type RetChatPrivate struct {
	UserId     uint64      `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	Text       string      `protobuf:"bytes,2,req,name=Text,json=text" json:"Text"`
	Time       uint32      `protobuf:"varint,3,req,name=Time,json=time" json:"Time"`
	TalkId     uint64      `protobuf:"varint,4,req,name=TalkId,json=talkId" json:"TalkId"`
	TypeId     uint32      `protobuf:"varint,5,req,name=TypeId,json=typeId" json:"TypeId"`
	ToDetail   *UserDetail `protobuf:"bytes,6,opt,name=ToDetail,json=toDetail" json:"ToDetail,omitempty"`
	FromDetail *UserDetail `protobuf:"bytes,7,opt,name=FromDetail,json=fromDetail" json:"FromDetail,omitempty"`
}

func (m *RetChatPrivate) Reset()                    { *m = RetChatPrivate{} }
func (m *RetChatPrivate) String() string            { return proto.CompactTextString(m) }
func (*RetChatPrivate) ProtoMessage()               {}
func (*RetChatPrivate) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{20} }

func (m *RetChatPrivate) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RetChatPrivate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RetChatPrivate) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RetChatPrivate) GetTalkId() uint64 {
	if m != nil {
		return m.TalkId
	}
	return 0
}

func (m *RetChatPrivate) GetTypeId() uint32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *RetChatPrivate) GetToDetail() *UserDetail {
	if m != nil {
		return m.ToDetail
	}
	return nil
}

func (m *RetChatPrivate) GetFromDetail() *UserDetail {
	if m != nil {
		return m.FromDetail
	}
	return nil
}

// 私聊--接入
type ReqChatFansClose struct {
	ToUserId uint64 `protobuf:"varint,1,req,name=ToUserId,json=toUserId" json:"ToUserId"`
}

func (m *ReqChatFansClose) Reset()                    { *m = ReqChatFansClose{} }
func (m *ReqChatFansClose) String() string            { return proto.CompactTextString(m) }
func (*ReqChatFansClose) ProtoMessage()               {}
func (*ReqChatFansClose) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{21} }

func (m *ReqChatFansClose) GetToUserId() uint64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

type RetChatFansClose struct {
	Succ     bool   `protobuf:"varint,1,req,name=Succ,json=succ" json:"Succ"`
	ToUserId uint64 `protobuf:"varint,2,req,name=ToUserId,json=toUserId" json:"ToUserId"`
}

func (m *RetChatFansClose) Reset()                    { *m = RetChatFansClose{} }
func (m *RetChatFansClose) String() string            { return proto.CompactTextString(m) }
func (*RetChatFansClose) ProtoMessage()               {}
func (*RetChatFansClose) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{22} }

func (m *RetChatFansClose) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

func (m *RetChatFansClose) GetToUserId() uint64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

// 房间关闭--接入
type RetChatClose struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *RetChatClose) Reset()                    { *m = RetChatClose{} }
func (m *RetChatClose) String() string            { return proto.CompactTextString(m) }
func (*RetChatClose) ProtoMessage()               {}
func (*RetChatClose) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{23} }

func (m *RetChatClose) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

// 返回统一错误码
type RetChatError struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
}

func (m *RetChatError) Reset()                    { *m = RetChatError{} }
func (m *RetChatError) String() string            { return proto.CompactTextString(m) }
func (*RetChatError) ProtoMessage()               {}
func (*RetChatError) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{24} }

func (m *RetChatError) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

// 踢人--接入
type ReqChatKick struct {
	RoomId     string   `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	UserIdList []uint64 `protobuf:"varint,2,rep,name=UserIdList,json=userIdList" json:"UserIdList,omitempty"`
}

func (m *ReqChatKick) Reset()                    { *m = ReqChatKick{} }
func (m *ReqChatKick) String() string            { return proto.CompactTextString(m) }
func (*ReqChatKick) ProtoMessage()               {}
func (*ReqChatKick) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{25} }

func (m *ReqChatKick) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatKick) GetUserIdList() []uint64 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

// 成为互关好友--接入
type ReqChatFriend struct {
	ToUserId uint64 `protobuf:"varint,1,req,name=ToUserId,json=toUserId" json:"ToUserId"`
}

func (m *ReqChatFriend) Reset()                    { *m = ReqChatFriend{} }
func (m *ReqChatFriend) String() string            { return proto.CompactTextString(m) }
func (*ReqChatFriend) ProtoMessage()               {}
func (*ReqChatFriend) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{26} }

func (m *ReqChatFriend) GetToUserId() uint64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

type MsgChatSynSet struct {
	RoomId  string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	UserId  uint64 `protobuf:"varint,2,req,name=UserId,json=userId" json:"UserId"`
	Top     bool   `protobuf:"varint,3,req,name=Top,json=top" json:"Top"`
	Disturb bool   `protobuf:"varint,4,req,name=Disturb,json=disturb" json:"Disturb"`
}

func (m *MsgChatSynSet) Reset()                    { *m = MsgChatSynSet{} }
func (m *MsgChatSynSet) String() string            { return proto.CompactTextString(m) }
func (*MsgChatSynSet) ProtoMessage()               {}
func (*MsgChatSynSet) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{27} }

func (m *MsgChatSynSet) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *MsgChatSynSet) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgChatSynSet) GetTop() bool {
	if m != nil {
		return m.Top
	}
	return false
}

func (m *MsgChatSynSet) GetDisturb() bool {
	if m != nil {
		return m.Disturb
	}
	return false
}

type MsgChatPersonalSet struct {
	FriendTalk bool `protobuf:"varint,1,req,name=FriendTalk,json=friendTalk" json:"FriendTalk"`
	QuickTalk  bool `protobuf:"varint,2,req,name=QuickTalk,json=quickTalk" json:"QuickTalk"`
	BatchPush  bool `protobuf:"varint,3,opt,name=BatchPush,json=batchPush" json:"BatchPush"`
	UnReadTalk bool `protobuf:"varint,4,opt,name=UnReadTalk,json=unReadTalk" json:"UnReadTalk"`
}

func (m *MsgChatPersonalSet) Reset()                    { *m = MsgChatPersonalSet{} }
func (m *MsgChatPersonalSet) String() string            { return proto.CompactTextString(m) }
func (*MsgChatPersonalSet) ProtoMessage()               {}
func (*MsgChatPersonalSet) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{28} }

func (m *MsgChatPersonalSet) GetFriendTalk() bool {
	if m != nil {
		return m.FriendTalk
	}
	return false
}

func (m *MsgChatPersonalSet) GetQuickTalk() bool {
	if m != nil {
		return m.QuickTalk
	}
	return false
}

func (m *MsgChatPersonalSet) GetBatchPush() bool {
	if m != nil {
		return m.BatchPush
	}
	return false
}

func (m *MsgChatPersonalSet) GetUnReadTalk() bool {
	if m != nil {
		return m.UnReadTalk
	}
	return false
}

type MsgChatTalk struct {
	RoomId string              `protobuf:"bytes,1,opt,name=RoomId,json=roomId" json:"RoomId"`
	UserId uint64              `protobuf:"varint,2,opt,name=UserId,json=userId" json:"UserId"`
	Talks  []*MsgChatTalk_Talk `protobuf:"bytes,3,rep,name=Talks,json=talks" json:"Talks,omitempty"`
}

func (m *MsgChatTalk) Reset()                    { *m = MsgChatTalk{} }
func (m *MsgChatTalk) String() string            { return proto.CompactTextString(m) }
func (*MsgChatTalk) ProtoMessage()               {}
func (*MsgChatTalk) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{29} }

func (m *MsgChatTalk) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *MsgChatTalk) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgChatTalk) GetTalks() []*MsgChatTalk_Talk {
	if m != nil {
		return m.Talks
	}
	return nil
}

type MsgChatTalk_Talk struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	Text   string `protobuf:"bytes,2,req,name=Text,json=text" json:"Text"`
	Time   uint32 `protobuf:"varint,3,req,name=Time,json=time" json:"Time"`
	TalkId uint64 `protobuf:"varint,4,req,name=TalkId,json=talkId" json:"TalkId"`
}

func (m *MsgChatTalk_Talk) Reset()                    { *m = MsgChatTalk_Talk{} }
func (m *MsgChatTalk_Talk) String() string            { return proto.CompactTextString(m) }
func (*MsgChatTalk_Talk) ProtoMessage()               {}
func (*MsgChatTalk_Talk) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{29, 0} }

func (m *MsgChatTalk_Talk) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgChatTalk_Talk) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgChatTalk_Talk) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MsgChatTalk_Talk) GetTalkId() uint64 {
	if m != nil {
		return m.TalkId
	}
	return 0
}

// 同步离线储存消息--接入
type ReqChatSyn struct {
}

func (m *ReqChatSyn) Reset()                    { *m = ReqChatSyn{} }
func (m *ReqChatSyn) String() string            { return proto.CompactTextString(m) }
func (*ReqChatSyn) ProtoMessage()               {}
func (*ReqChatSyn) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{30} }

type RetChatSyn struct {
	Rooms       []uint64            `protobuf:"varint,1,rep,name=Rooms,json=rooms" json:"Rooms,omitempty"`
	Talks       []*MsgChatTalk      `protobuf:"bytes,2,rep,name=Talks,json=talks" json:"Talks,omitempty"`
	Sets        []*MsgChatSynSet    `protobuf:"bytes,3,rep,name=Sets,json=sets" json:"Sets,omitempty"`
	PersonalSet *MsgChatPersonalSet `protobuf:"bytes,4,req,name=PersonalSet,json=personalSet" json:"PersonalSet,omitempty"`
	SendTime    uint32              `protobuf:"varint,5,opt,name=SendTime,json=sendTime" json:"SendTime"`
	Detail      []*UserDetail       `protobuf:"bytes,6,rep,name=Detail,json=detail" json:"Detail,omitempty"`
}

func (m *RetChatSyn) Reset()                    { *m = RetChatSyn{} }
func (m *RetChatSyn) String() string            { return proto.CompactTextString(m) }
func (*RetChatSyn) ProtoMessage()               {}
func (*RetChatSyn) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{31} }

func (m *RetChatSyn) GetRooms() []uint64 {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *RetChatSyn) GetTalks() []*MsgChatTalk {
	if m != nil {
		return m.Talks
	}
	return nil
}

func (m *RetChatSyn) GetSets() []*MsgChatSynSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

func (m *RetChatSyn) GetPersonalSet() *MsgChatPersonalSet {
	if m != nil {
		return m.PersonalSet
	}
	return nil
}

func (m *RetChatSyn) GetSendTime() uint32 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *RetChatSyn) GetDetail() []*UserDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

// 私聊权限--接入
type ReqChatPower struct {
	ToUserId uint64 `protobuf:"varint,1,req,name=ToUserId,json=toUserId" json:"ToUserId"`
	TypeId   uint32 `protobuf:"varint,2,req,name=TypeId,json=typeId" json:"TypeId"`
}

func (m *ReqChatPower) Reset()                    { *m = ReqChatPower{} }
func (m *ReqChatPower) String() string            { return proto.CompactTextString(m) }
func (*ReqChatPower) ProtoMessage()               {}
func (*ReqChatPower) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{32} }

func (m *ReqChatPower) GetToUserId() uint64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

func (m *ReqChatPower) GetTypeId() uint32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

type RetChatPower struct {
	Succ bool `protobuf:"varint,1,req,name=Succ,json=succ" json:"Succ"`
}

func (m *RetChatPower) Reset()                    { *m = RetChatPower{} }
func (m *RetChatPower) String() string            { return proto.CompactTextString(m) }
func (*RetChatPower) ProtoMessage()               {}
func (*RetChatPower) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{33} }

func (m *RetChatPower) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

// ----------------------------红包--------------------------------
// 发送红包--接入
type ReqChatRedSend struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	TypeId uint32 `protobuf:"varint,2,req,name=TypeId,json=typeId" json:"TypeId"`
	Nums   uint32 `protobuf:"varint,3,req,name=Nums,json=nums" json:"Nums"`
	Total  uint32 `protobuf:"varint,4,req,name=Total,json=total" json:"Total"`
	Text   string `protobuf:"bytes,5,req,name=Text,json=text" json:"Text"`
}

func (m *ReqChatRedSend) Reset()                    { *m = ReqChatRedSend{} }
func (m *ReqChatRedSend) String() string            { return proto.CompactTextString(m) }
func (*ReqChatRedSend) ProtoMessage()               {}
func (*ReqChatRedSend) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{34} }

func (m *ReqChatRedSend) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatRedSend) GetTypeId() uint32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *ReqChatRedSend) GetNums() uint32 {
	if m != nil {
		return m.Nums
	}
	return 0
}

func (m *ReqChatRedSend) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ReqChatRedSend) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MsgRedDetail struct {
	UserId uint64 `protobuf:"varint,1,req,name=UserId,json=userId" json:"UserId"`
	Loves  uint32 `protobuf:"varint,2,req,name=Loves,json=loves" json:"Loves"`
	Time   uint32 `protobuf:"varint,3,req,name=Time,json=time" json:"Time"`
}

func (m *MsgRedDetail) Reset()                    { *m = MsgRedDetail{} }
func (m *MsgRedDetail) String() string            { return proto.CompactTextString(m) }
func (*MsgRedDetail) ProtoMessage()               {}
func (*MsgRedDetail) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{35} }

func (m *MsgRedDetail) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgRedDetail) GetLoves() uint32 {
	if m != nil {
		return m.Loves
	}
	return 0
}

func (m *MsgRedDetail) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 领取红包--接入
type ReqChatRedReceive struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	TalkId uint64 `protobuf:"varint,2,req,name=TalkId,json=talkId" json:"TalkId"`
}

func (m *ReqChatRedReceive) Reset()                    { *m = ReqChatRedReceive{} }
func (m *ReqChatRedReceive) String() string            { return proto.CompactTextString(m) }
func (*ReqChatRedReceive) ProtoMessage()               {}
func (*ReqChatRedReceive) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{36} }

func (m *ReqChatRedReceive) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatRedReceive) GetTalkId() uint64 {
	if m != nil {
		return m.TalkId
	}
	return 0
}

// 查看红包--接入
type ReqChatRedSee struct {
	RoomId string `protobuf:"bytes,1,req,name=RoomId,json=roomId" json:"RoomId"`
	TalkId uint64 `protobuf:"varint,2,req,name=TalkId,json=talkId" json:"TalkId"`
}

func (m *ReqChatRedSee) Reset()                    { *m = ReqChatRedSee{} }
func (m *ReqChatRedSee) String() string            { return proto.CompactTextString(m) }
func (*ReqChatRedSee) ProtoMessage()               {}
func (*ReqChatRedSee) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{37} }

func (m *ReqChatRedSee) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqChatRedSee) GetTalkId() uint64 {
	if m != nil {
		return m.TalkId
	}
	return 0
}

type RetChatRedSee struct {
	Succ     bool            `protobuf:"varint,1,req,name=Succ,json=succ" json:"Succ"`
	RoomId   string          `protobuf:"bytes,2,req,name=RoomId,json=roomId" json:"RoomId"`
	TalkId   uint64          `protobuf:"varint,3,req,name=TalkId,json=talkId" json:"TalkId"`
	Receives []*MsgRedDetail `protobuf:"bytes,4,rep,name=Receives,json=receives" json:"Receives,omitempty"`
	EndTime  uint32          `protobuf:"varint,5,req,name=EndTime,json=endTime" json:"EndTime"`
}

func (m *RetChatRedSee) Reset()                    { *m = RetChatRedSee{} }
func (m *RetChatRedSee) String() string            { return proto.CompactTextString(m) }
func (*RetChatRedSee) ProtoMessage()               {}
func (*RetChatRedSee) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{38} }

func (m *RetChatRedSee) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

func (m *RetChatRedSee) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RetChatRedSee) GetTalkId() uint64 {
	if m != nil {
		return m.TalkId
	}
	return 0
}

func (m *RetChatRedSee) GetReceives() []*MsgRedDetail {
	if m != nil {
		return m.Receives
	}
	return nil
}

func (m *RetChatRedSee) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqChatCreate)(nil), "usercmd.ReqChatCreate")
	proto.RegisterType((*ReqChatCreate_NickName)(nil), "usercmd.ReqChatCreate.NickName")
	proto.RegisterType((*RetChatCreate)(nil), "usercmd.RetChatCreate")
	proto.RegisterType((*RetChatCreate_UserDetail)(nil), "usercmd.RetChatCreate.UserDetail")
	proto.RegisterType((*ReqChatChangeName)(nil), "usercmd.ReqChatChangeName")
	proto.RegisterType((*ReqChatReport)(nil), "usercmd.ReqChatReport")
	proto.RegisterType((*RetChatReport)(nil), "usercmd.RetChatReport")
	proto.RegisterType((*ReqChatSet)(nil), "usercmd.ReqChatSet")
	proto.RegisterType((*RetChatSet)(nil), "usercmd.RetChatSet")
	proto.RegisterType((*ReqChatPersonalSet)(nil), "usercmd.ReqChatPersonalSet")
	proto.RegisterType((*RetChatPersonalSet)(nil), "usercmd.RetChatPersonalSet")
	proto.RegisterType((*ReqChatGetRoom)(nil), "usercmd.ReqChatGetRoom")
	proto.RegisterType((*RetChatGetRoom)(nil), "usercmd.RetChatGetRoom")
	proto.RegisterType((*ReqChatDelete)(nil), "usercmd.ReqChatDelete")
	proto.RegisterType((*RetChatDelete)(nil), "usercmd.RetChatDelete")
	proto.RegisterType((*MsgChatUser)(nil), "usercmd.MsgChatUser")
	proto.RegisterType((*ReqChatJoin)(nil), "usercmd.ReqChatJoin")
	proto.RegisterType((*ReqChatLeave)(nil), "usercmd.ReqChatLeave")
	proto.RegisterType((*ReqChatTalk)(nil), "usercmd.ReqChatTalk")
	proto.RegisterType((*RetChatTalk)(nil), "usercmd.RetChatTalk")
	proto.RegisterType((*ReqChatPrivate)(nil), "usercmd.ReqChatPrivate")
	proto.RegisterType((*UserDetail)(nil), "usercmd.UserDetail")
	proto.RegisterType((*RetChatPrivate)(nil), "usercmd.RetChatPrivate")
	proto.RegisterType((*ReqChatFansClose)(nil), "usercmd.ReqChatFansClose")
	proto.RegisterType((*RetChatFansClose)(nil), "usercmd.RetChatFansClose")
	proto.RegisterType((*RetChatClose)(nil), "usercmd.RetChatClose")
	proto.RegisterType((*RetChatError)(nil), "usercmd.RetChatError")
	proto.RegisterType((*ReqChatKick)(nil), "usercmd.ReqChatKick")
	proto.RegisterType((*ReqChatFriend)(nil), "usercmd.ReqChatFriend")
	proto.RegisterType((*MsgChatSynSet)(nil), "usercmd.MsgChatSynSet")
	proto.RegisterType((*MsgChatPersonalSet)(nil), "usercmd.MsgChatPersonalSet")
	proto.RegisterType((*MsgChatTalk)(nil), "usercmd.MsgChatTalk")
	proto.RegisterType((*MsgChatTalk_Talk)(nil), "usercmd.MsgChatTalk.Talk")
	proto.RegisterType((*ReqChatSyn)(nil), "usercmd.ReqChatSyn")
	proto.RegisterType((*RetChatSyn)(nil), "usercmd.RetChatSyn")
	proto.RegisterType((*ReqChatPower)(nil), "usercmd.ReqChatPower")
	proto.RegisterType((*RetChatPower)(nil), "usercmd.RetChatPower")
	proto.RegisterType((*ReqChatRedSend)(nil), "usercmd.ReqChatRedSend")
	proto.RegisterType((*MsgRedDetail)(nil), "usercmd.MsgRedDetail")
	proto.RegisterType((*ReqChatRedReceive)(nil), "usercmd.ReqChatRedReceive")
	proto.RegisterType((*ReqChatRedSee)(nil), "usercmd.ReqChatRedSee")
	proto.RegisterType((*RetChatRedSee)(nil), "usercmd.RetChatRedSee")
	proto.RegisterEnum("usercmd.ChatCmd", ChatCmd_name, ChatCmd_value)
}
func (m *ReqChatCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.LastTime))
	dAtA[i] = 0x22
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.OnlyStr)))
	i += copy(dAtA[i:], m.OnlyStr)
	if len(m.UserList) > 0 {
		for _, num := range m.UserList {
			dAtA[i] = 0x28
			i++
			i = encodeVarintChat(dAtA, i, uint64(num))
		}
	}
	if len(m.NickNameList) > 0 {
		for _, msg := range m.NickNameList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqChatCreate_NickName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatCreate_NickName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *RetChatCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x20
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.OnlyStr)))
	i += copy(dAtA[i:], m.OnlyStr)
	if len(m.UserList) > 0 {
		for _, msg := range m.UserList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Owner))
	return i, nil
}

func (m *RetChatCreate_UserDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatCreate_UserDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x22
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x32
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	return i, nil
}

func (m *ReqChatChangeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatChangeName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *ReqChatReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x22
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.PicUrl)))
	i += copy(dAtA[i:], m.PicUrl)
	return i, nil
}

func (m *RetChatReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Succ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqChatSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x20
	i++
	if m.IsOpen {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetChatSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	if m.IsOpen {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqChatPersonalSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatPersonalSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	if m.IsOpen {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetChatPersonalSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatPersonalSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	if m.IsOpen {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqChatGetRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatGetRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	return i, nil
}

func (m *RetChatGetRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatGetRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x20
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.OnlyStr)))
	i += copy(dAtA[i:], m.OnlyStr)
	if len(m.UserList) > 0 {
		for _, msg := range m.UserList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Owner))
	dAtA[i] = 0x40
	i++
	if m.Succ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqChatDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	return i, nil
}

func (m *RetChatDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	return i, nil
}

func (m *MsgChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChatUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x22
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x32
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	return i, nil
}

func (m *ReqChatJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	if len(m.UserList) > 0 {
		for _, num := range m.UserList {
			dAtA[i] = 0x10
			i++
			i = encodeVarintChat(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ReqChatLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	return i, nil
}

func (m *ReqChatTalk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatTalk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *RetChatTalk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatTalk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x20
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x28
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TalkId))
	return i, nil
}

func (m *ReqChatPrivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatPrivate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.ToUserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.FromUserId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x20
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TypeId))
	return i, nil
}

func (m *UserDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x22
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x30
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *RetChatPrivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatPrivate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x20
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TalkId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TypeId))
	if m.ToDetail != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ToDetail.Size()))
		n1, err := m.ToDetail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FromDetail != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.FromDetail.Size()))
		n2, err := m.FromDetail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ReqChatFansClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatFansClose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.ToUserId))
	return i, nil
}

func (m *RetChatFansClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatFansClose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Succ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.ToUserId))
	return i, nil
}

func (m *RetChatClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatClose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	return i, nil
}

func (m *RetChatError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.RetCode))
	return i, nil
}

func (m *ReqChatKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	if len(m.UserIdList) > 0 {
		for _, num := range m.UserIdList {
			dAtA[i] = 0x10
			i++
			i = encodeVarintChat(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ReqChatFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatFriend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.ToUserId))
	return i, nil
}

func (m *MsgChatSynSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChatSynSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x18
	i++
	if m.Top {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x20
	i++
	if m.Disturb {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *MsgChatPersonalSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChatPersonalSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.FriendTalk {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	if m.QuickTalk {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x18
	i++
	if m.BatchPush {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x20
	i++
	if m.UnReadTalk {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *MsgChatTalk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChatTalk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.UserId))
	if len(m.Talks) > 0 {
		for _, msg := range m.Talks {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MsgChatTalk_Talk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChatTalk_Talk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x20
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TalkId))
	return i, nil
}

func (m *ReqChatSyn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatSyn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetChatSyn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatSyn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, num := range m.Rooms {
			dAtA[i] = 0x8
			i++
			i = encodeVarintChat(dAtA, i, uint64(num))
		}
	}
	if len(m.Talks) > 0 {
		for _, msg := range m.Talks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sets) > 0 {
		for _, msg := range m.Sets {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PersonalSet == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PersonalSet")
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.PersonalSet.Size()))
		n3, err := m.PersonalSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.SendTime))
	if len(m.Detail) > 0 {
		for _, msg := range m.Detail {
			dAtA[i] = 0x32
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqChatPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatPower) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.ToUserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TypeId))
	return i, nil
}

func (m *RetChatPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatPower) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Succ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ReqChatRedSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatRedSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TypeId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Nums))
	dAtA[i] = 0x20
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Total))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *MsgRedDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Loves))
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.Time))
	return i, nil
}

func (m *ReqChatRedReceive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatRedReceive) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TalkId))
	return i, nil
}

func (m *ReqChatRedSee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChatRedSee) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TalkId))
	return i, nil
}

func (m *RetChatRedSee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetChatRedSee) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Succ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x12
	i++
	i = encodeVarintChat(dAtA, i, uint64(len(m.RoomId)))
	i += copy(dAtA[i:], m.RoomId)
	dAtA[i] = 0x18
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.TalkId))
	if len(m.Receives) > 0 {
		for _, msg := range m.Receives {
			dAtA[i] = 0x22
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintChat(dAtA, i, uint64(m.EndTime))
	return i, nil
}

func encodeFixed64Chat(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Chat(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintChat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqChatCreate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Type))
	l = len(m.Name)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.LastTime))
	l = len(m.OnlyStr)
	n += 1 + l + sovChat(uint64(l))
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			n += 1 + sovChat(uint64(e))
		}
	}
	if len(m.NickNameList) > 0 {
		for _, e := range m.NickNameList {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	return n
}

func (m *ReqChatCreate_NickName) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *RetChatCreate) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Type))
	l = len(m.Name)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.EndTime))
	l = len(m.OnlyStr)
	n += 1 + l + sovChat(uint64(l))
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	n += 1 + sovChat(uint64(m.Owner))
	return n
}

func (m *RetChatCreate_UserDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Sex))
	l = len(m.PassIcon)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Icon))
	l = len(m.NickName)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *ReqChatChangeName) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *ReqChatReport) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Id))
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Type))
	l = len(m.PicUrl)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *RetChatReport) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *ReqChatSet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Id))
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Type))
	n += 2
	return n
}

func (m *RetChatSet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Type))
	n += 2
	return n
}

func (m *ReqChatPersonalSet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Type))
	n += 2
	return n
}

func (m *RetChatPersonalSet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Type))
	n += 2
	return n
}

func (m *ReqChatGetRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *RetChatGetRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Type))
	l = len(m.Name)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.EndTime))
	l = len(m.OnlyStr)
	n += 1 + l + sovChat(uint64(l))
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	n += 1 + sovChat(uint64(m.Owner))
	n += 2
	return n
}

func (m *ReqChatDelete) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *RetChatDelete) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *MsgChatUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Sex))
	l = len(m.PassIcon)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Icon))
	l = len(m.NickName)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *ReqChatJoin) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			n += 1 + sovChat(uint64(e))
		}
	}
	return n
}

func (m *ReqChatLeave) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *ReqChatTalk) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	l = len(m.Text)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *RetChatTalk) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.UserId))
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	l = len(m.Text)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Time))
	n += 1 + sovChat(uint64(m.TalkId))
	return n
}

func (m *ReqChatPrivate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.ToUserId))
	n += 1 + sovChat(uint64(m.FromUserId))
	l = len(m.Text)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.TypeId))
	return n
}

func (m *UserDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Sex))
	l = len(m.PassIcon)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Icon))
	n += 1 + sovChat(uint64(m.State))
	return n
}

func (m *RetChatPrivate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.UserId))
	l = len(m.Text)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Time))
	n += 1 + sovChat(uint64(m.TalkId))
	n += 1 + sovChat(uint64(m.TypeId))
	if m.ToDetail != nil {
		l = m.ToDetail.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	if m.FromDetail != nil {
		l = m.FromDetail.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *ReqChatFansClose) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.ToUserId))
	return n
}

func (m *RetChatFansClose) Size() (n int) {
	var l int
	_ = l
	n += 2
	n += 1 + sovChat(uint64(m.ToUserId))
	return n
}

func (m *RetChatClose) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *RetChatError) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.RetCode))
	return n
}

func (m *ReqChatKick) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	if len(m.UserIdList) > 0 {
		for _, e := range m.UserIdList {
			n += 1 + sovChat(uint64(e))
		}
	}
	return n
}

func (m *ReqChatFriend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.ToUserId))
	return n
}

func (m *MsgChatSynSet) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.UserId))
	n += 2
	n += 2
	return n
}

func (m *MsgChatPersonalSet) Size() (n int) {
	var l int
	_ = l
	n += 2
	n += 2
	n += 2
	n += 2
	return n
}

func (m *MsgChatTalk) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.UserId))
	if len(m.Talks) > 0 {
		for _, e := range m.Talks {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	return n
}

func (m *MsgChatTalk_Talk) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.UserId))
	l = len(m.Text)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.Time))
	n += 1 + sovChat(uint64(m.TalkId))
	return n
}

func (m *ReqChatSyn) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetChatSyn) Size() (n int) {
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			n += 1 + sovChat(uint64(e))
		}
	}
	if len(m.Talks) > 0 {
		for _, e := range m.Talks {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	if m.PersonalSet != nil {
		l = m.PersonalSet.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	n += 1 + sovChat(uint64(m.SendTime))
	if len(m.Detail) > 0 {
		for _, e := range m.Detail {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	return n
}

func (m *ReqChatPower) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.ToUserId))
	n += 1 + sovChat(uint64(m.TypeId))
	return n
}

func (m *RetChatPower) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *ReqChatRedSend) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.TypeId))
	n += 1 + sovChat(uint64(m.Nums))
	n += 1 + sovChat(uint64(m.Total))
	l = len(m.Text)
	n += 1 + l + sovChat(uint64(l))
	return n
}

func (m *MsgRedDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChat(uint64(m.UserId))
	n += 1 + sovChat(uint64(m.Loves))
	n += 1 + sovChat(uint64(m.Time))
	return n
}

func (m *ReqChatRedReceive) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.TalkId))
	return n
}

func (m *ReqChatRedSee) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.TalkId))
	return n
}

func (m *RetChatRedSee) Size() (n int) {
	var l int
	_ = l
	n += 2
	l = len(m.RoomId)
	n += 1 + l + sovChat(uint64(l))
	n += 1 + sovChat(uint64(m.TalkId))
	if len(m.Receives) > 0 {
		for _, e := range m.Receives {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	n += 1 + sovChat(uint64(m.EndTime))
	return n
}

func sovChat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChat(x uint64) (n int) {
	return sovChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqChatCreate) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			m.LastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlyStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserList = append(m.UserList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserList = append(m.UserList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickNameList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickNameList = append(m.NickNameList, &ReqChatCreate_NickName{})
			if err := m.NickNameList[len(m.NickNameList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastTime")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OnlyStr")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatCreate_NickName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NickName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NickName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlyStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &RetChatCreate_UserDetail{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatCreate_UserDetail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatChangeName) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatChangeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatChangeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatReport) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PicUrl")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatReport) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succ = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Succ")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsOpen")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsOpen")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatPersonalSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatPersonalSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatPersonalSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsOpen")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatPersonalSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatPersonalSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatPersonalSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsOpen")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatGetRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatGetRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatGetRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatGetRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatGetRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatGetRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlyStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &MsgChatUser{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succ = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatDelete) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatDelete) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChatUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatJoin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserList = append(m.UserList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserList = append(m.UserList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatLeave) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatTalk) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatTalk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatTalk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatTalk) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatTalk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatTalk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkId", wireType)
			}
			m.TalkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TalkId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatPrivate) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatPrivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatPrivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUserId", wireType)
			}
			m.ToUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUserId", wireType)
			}
			m.FromUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromUserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToUserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromUserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TypeId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatPrivate) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatPrivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatPrivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkId", wireType)
			}
			m.TalkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToDetail == nil {
				m.ToDetail = &UserDetail{}
			}
			if err := m.ToDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromDetail == nil {
				m.FromDetail = &UserDetail{}
			}
			if err := m.FromDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TalkId")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TypeId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatFansClose) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatFansClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatFansClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUserId", wireType)
			}
			m.ToUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToUserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatFansClose) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatFansClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatFansClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succ = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUserId", wireType)
			}
			m.ToUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Succ")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToUserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatClose) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatError) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatKick) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdList = append(m.UserIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdList = append(m.UserIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatFriend) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUserId", wireType)
			}
			m.ToUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToUserId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChatSynSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChatSynSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChatSynSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Top = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disturb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disturb = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Top")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Disturb")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChatPersonalSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChatPersonalSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChatPersonalSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendTalk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FriendTalk = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickTalk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QuickTalk = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BatchPush = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnReadTalk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnReadTalk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FriendTalk")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("QuickTalk")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChatTalk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChatTalk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChatTalk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Talks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Talks = append(m.Talks, &MsgChatTalk_Talk{})
			if err := m.Talks[len(m.Talks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChatTalk_Talk) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Talk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Talk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkId", wireType)
			}
			m.TalkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TalkId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatSyn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatSyn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatSyn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatSyn) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatSyn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatSyn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rooms = append(m.Rooms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rooms = append(m.Rooms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Talks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Talks = append(m.Talks, &MsgChatTalk{})
			if err := m.Talks[len(m.Talks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &MsgChatSynSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersonalSet == nil {
				m.PersonalSet = &MsgChatPersonalSet{}
			}
			if err := m.PersonalSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = append(m.Detail, &UserDetail{})
			if err := m.Detail[len(m.Detail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PersonalSet")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatPower) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUserId", wireType)
			}
			m.ToUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToUserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TypeId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatPower) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succ = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Succ")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatRedSend) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatRedSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatRedSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nums", wireType)
			}
			m.Nums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nums |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TypeId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Nums")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Total")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedDetail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loves", wireType)
			}
			m.Loves = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loves |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Loves")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatRedReceive) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatRedReceive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatRedReceive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkId", wireType)
			}
			m.TalkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TalkId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChatRedSee) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChatRedSee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChatRedSee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkId", wireType)
			}
			m.TalkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TalkId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetChatRedSee) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetChatRedSee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetChatRedSee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succ = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkId", wireType)
			}
			m.TalkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receives = append(m.Receives, &MsgRedDetail{})
			if err := m.Receives[len(m.Receives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Succ")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TalkId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EndTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("chat.proto", fileDescriptorChat) }

var fileDescriptorChat = []byte{
	// 1512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcf, 0x6e, 0x1c, 0x45,
	0x13, 0xcf, 0xfc, 0xdb, 0x1d, 0xd7, 0xda, 0xc9, 0xa4, 0xe3, 0xf8, 0xdb, 0xcf, 0x5f, 0xb4, 0xd9,
	0x6f, 0xc4, 0xc1, 0x04, 0xd8, 0x90, 0xc0, 0x09, 0x29, 0x07, 0x62, 0x27, 0x91, 0xb1, 0x63, 0x9b,
	0xd9, 0x8d, 0x38, 0x4f, 0x66, 0x3a, 0xf1, 0x28, 0xbb, 0x33, 0x9b, 0xe9, 0x5e, 0xc7, 0x2b, 0x8e,
	0x70, 0x40, 0x9c, 0x72, 0x87, 0x13, 0x12, 0x12, 0x67, 0x2e, 0x84, 0x37, 0xc8, 0x91, 0x27, 0x40,
	0x28, 0xbc, 0x01, 0x4f, 0x80, 0xaa, 0x67, 0xa6, 0xa7, 0x67, 0xff, 0x79, 0x45, 0x02, 0x12, 0x17,
	0x6b, 0xa7, 0xba, 0xba, 0xaa, 0xfa, 0x57, 0xbf, 0xae, 0xaa, 0x36, 0x40, 0x70, 0xec, 0xf3, 0xce,
	0x30, 0x4d, 0x78, 0x42, 0xea, 0x23, 0x46, 0xd3, 0x60, 0x10, 0xba, 0xdf, 0xe9, 0xb0, 0xe6, 0xd1,
	0xa7, 0xdb, 0xc7, 0x3e, 0xdf, 0x4e, 0xa9, 0xcf, 0x29, 0x69, 0x82, 0xd9, 0x1b, 0x0f, 0x69, 0x53,
	0x6b, 0xeb, 0x5b, 0xd6, 0x6d, 0xf3, 0xe5, 0xaf, 0x57, 0xcf, 0x79, 0x26, 0x1f, 0x0f, 0xc5, 0xca,
	0x81, 0x3f, 0xa0, 0x4d, 0xbd, 0xad, 0x6f, 0xad, 0x14, 0x2b, 0xb1, 0x3f, 0xa0, 0xa4, 0x0d, 0xf6,
	0xbe, 0xcf, 0x78, 0x2f, 0x1a, 0xd0, 0xa6, 0xd1, 0xd6, 0xb7, 0xd6, 0xf2, 0x55, 0xbb, 0x9f, 0x4b,
	0x49, 0x0b, 0xea, 0x87, 0x71, 0x7f, 0xdc, 0xe5, 0x69, 0xd3, 0x54, 0xb6, 0xd7, 0x93, 0x4c, 0x48,
	0x36, 0xc1, 0x7e, 0xc0, 0x68, 0xba, 0x1f, 0x31, 0xde, 0xb4, 0xda, 0xc6, 0x96, 0xe9, 0xd9, 0xa3,
	0xfc, 0x9b, 0x6c, 0xc3, 0xea, 0x41, 0x14, 0x3c, 0x41, 0xdf, 0x62, 0xbd, 0xd6, 0x36, 0xb6, 0x1a,
	0x37, 0xaf, 0x76, 0xf2, 0x33, 0x74, 0x2a, 0xf1, 0x77, 0x0a, 0x55, 0x6f, 0x35, 0x56, 0x36, 0x6d,
	0x7e, 0x04, 0x76, 0xb1, 0x42, 0xd6, 0x41, 0xdf, 0x0d, 0xc5, 0x01, 0xcd, 0x3c, 0x0e, 0x3d, 0x0a,
	0x95, 0xe3, 0x69, 0xd5, 0xe3, 0xb9, 0x3f, 0x19, 0x08, 0x12, 0x57, 0x40, 0xba, 0x02, 0x35, 0x2f,
	0x49, 0x06, 0xc2, 0x4a, 0xa9, 0x5d, 0x4b, 0x85, 0x4c, 0x42, 0x88, 0x96, 0x66, 0x43, 0x68, 0x4c,
	0xfa, 0x40, 0x80, 0xee, 0xc4, 0xa1, 0x40, 0xd0, 0x6c, 0x6b, 0x12, 0xc1, 0x3a, 0xcd, 0x84, 0x2a,
	0x80, 0x96, 0xb2, 0x59, 0x02, 0x78, 0x4b, 0x01, 0x30, 0x03, 0xe8, 0xff, 0x0a, 0x40, 0x4a, 0xec,
	0x1d, 0x54, 0xdb, 0xa1, 0xdc, 0x8f, 0xfa, 0x0a, 0xc6, 0x9b, 0x60, 0x1d, 0x3e, 0x8b, 0x69, 0xda,
	0xac, 0xb7, 0x35, 0x89, 0x8a, 0x95, 0xa0, 0x68, 0xf3, 0x85, 0x06, 0x50, 0x6e, 0x9a, 0x83, 0x5e,
	0x0b, 0xea, 0x1f, 0x07, 0x41, 0x32, 0x8a, 0x79, 0x85, 0x1f, 0x75, 0x3f, 0x13, 0x92, 0x0d, 0x30,
	0xba, 0xf4, 0xb4, 0xc2, 0x0e, 0x83, 0xd1, 0x53, 0xa4, 0xce, 0x91, 0xcf, 0xd8, 0x6e, 0x90, 0xc4,
	0xe2, 0xe0, 0xc5, 0x46, 0x7b, 0x98, 0x4b, 0x11, 0x33, 0xb1, 0x6a, 0x29, 0x5b, 0xcd, 0x08, 0x57,
	0xda, 0x65, 0x4e, 0x9b, 0x35, 0x75, 0x6f, 0x91, 0x79, 0x77, 0x0f, 0x2e, 0x16, 0xec, 0x38, 0xf6,
	0xe3, 0xc7, 0x54, 0xa4, 0x5f, 0x4d, 0x9e, 0x3e, 0x2b, 0x79, 0xb3, 0x59, 0xee, 0x7e, 0x2e, 0xaf,
	0x8a, 0x47, 0x87, 0x49, 0xca, 0xe7, 0x20, 0x51, 0x9a, 0xd7, 0x67, 0x9b, 0x17, 0xdc, 0x30, 0xa6,
	0xae, 0xd7, 0x15, 0xa8, 0x1d, 0x45, 0xc1, 0x83, 0xb4, 0x5f, 0xb9, 0x21, 0xb5, 0xa1, 0x90, 0xb9,
	0x6f, 0x4b, 0x0a, 0xe6, 0xce, 0x9b, 0x60, 0x76, 0x47, 0x41, 0x20, 0xdc, 0xdb, 0x85, 0x21, 0x36,
	0x0a, 0x02, 0xf7, 0x14, 0x20, 0x8f, 0xb3, 0x4b, 0xff, 0x86, 0x20, 0x77, 0xd9, 0xe1, 0x90, 0xc6,
	0x22, 0xc8, 0xc2, 0x6f, 0x2d, 0x12, 0x32, 0x77, 0x07, 0x3d, 0xf3, 0xc2, 0xf3, 0xfc, 0x4a, 0x52,
	0x5a, 0xd1, 0x67, 0x58, 0xd9, 0x07, 0x92, 0xc7, 0x7f, 0x44, 0x53, 0x96, 0xc4, 0x7e, 0xff, 0xb5,
	0xad, 0xf1, 0x37, 0x65, 0xad, 0x03, 0xe7, 0xf3, 0xd8, 0xee, 0x51, 0x8e, 0x08, 0x2e, 0x66, 0x93,
	0xfb, 0xb5, 0x8e, 0x1b, 0xf8, 0xd2, 0x1b, 0x94, 0xda, 0xa1, 0xff, 0x63, 0xb5, 0xe3, 0xfd, 0xa9,
	0xda, 0xb1, 0x2e, 0x6b, 0xc7, 0x7d, 0xf6, 0x18, 0x83, 0xc7, 0xf5, 0xe5, 0xca, 0x85, 0x24, 0xa6,
	0xdd, 0xd6, 0x26, 0x88, 0xf9, 0x9e, 0xbc, 0x40, 0x3b, 0xb4, 0x4f, 0xf9, 0x19, 0x37, 0x31, 0x53,
	0xe7, 0x4b, 0xab, 0xff, 0xac, 0x41, 0x43, 0x89, 0xf6, 0x5f, 0x55, 0xa7, 0xee, 0x41, 0x23, 0x47,
	0xe6, 0x93, 0x24, 0x8a, 0xcf, 0xa0, 0x88, 0xda, 0x2b, 0xf5, 0x6a, 0xaf, 0x74, 0xdf, 0x85, 0xd5,
	0xdc, 0xd0, 0x3e, 0xf5, 0x4f, 0xce, 0x82, 0xec, 0x8e, 0x74, 0xdb, 0xf3, 0xfb, 0x4f, 0x96, 0x60,
	0x26, 0x3d, 0xad, 0xc2, 0x66, 0x72, 0x7a, 0xca, 0xdd, 0x6f, 0x34, 0xb4, 0xc3, 0x55, 0x3b, 0x18,
	0xe0, 0x04, 0xfa, 0xb5, 0x91, 0x90, 0x2d, 0x51, 0x7a, 0xd0, 0x8b, 0x31, 0xe9, 0x45, 0xac, 0x64,
	0x14, 0x57, 0xf0, 0xe5, 0x51, 0x56, 0xd0, 0xd1, 0xef, 0x6e, 0x28, 0xb0, 0x97, 0xfe, 0xb8, 0x90,
	0xb9, 0xcf, 0x35, 0x79, 0x67, 0x8f, 0xd2, 0xe8, 0x04, 0xdb, 0x77, 0x1b, 0xec, 0x5e, 0x32, 0x23,
	0x44, 0x9b, 0xe7, 0x52, 0xf2, 0x16, 0xc0, 0xdd, 0x34, 0x19, 0xe4, 0x3a, 0xba, 0xa2, 0x03, 0x8f,
	0xa4, 0x7c, 0x41, 0xb0, 0x18, 0xd2, 0x78, 0x48, 0x77, 0xc3, 0x4a, 0xb8, 0x35, 0x2e, 0x64, 0xee,
	0x8f, 0xb3, 0x3b, 0xaa, 0x36, 0x9f, 0xa9, 0xda, 0x02, 0xa6, 0x6a, 0x7f, 0x9d, 0xa9, 0xda, 0x04,
	0x53, 0x37, 0xc1, 0xea, 0x72, 0x9f, 0x67, 0x34, 0x2d, 0x96, 0x2c, 0x86, 0x22, 0xf7, 0xcb, 0xb2,
	0x94, 0x15, 0x38, 0x2e, 0x4e, 0xf4, 0x5c, 0xc2, 0xc8, 0x54, 0x1a, 0x0b, 0x52, 0x69, 0x4e, 0xa7,
	0x52, 0x41, 0xd5, 0x9a, 0x46, 0x95, 0x5c, 0xc7, 0xac, 0x66, 0x90, 0x8a, 0xf8, 0x1b, 0x37, 0x2f,
	0xc9, 0x32, 0xa6, 0x0e, 0x3d, 0x3c, 0x57, 0x22, 0x1f, 0x64, 0x49, 0xce, 0xb7, 0xd4, 0xe7, 0x6f,
	0x11, 0x39, 0xcf, 0x7e, 0xbb, 0x1f, 0x82, 0x93, 0xb3, 0xe9, 0xae, 0x1f, 0xb3, 0xed, 0x7e, 0xc2,
	0x96, 0xe0, 0x93, 0x7b, 0x80, 0xbb, 0x78, 0x75, 0xd7, 0xdc, 0x0e, 0x5e, 0xb1, 0xa7, 0xcf, 0xb4,
	0x27, 0xee, 0x79, 0x36, 0xd5, 0x09, 0x5b, 0x8b, 0xef, 0x79, 0x47, 0x6a, 0xdf, 0x49, 0xd3, 0x24,
	0x45, 0x6a, 0xe1, 0x77, 0x12, 0x66, 0x0d, 0x50, 0x36, 0x8c, 0x34, 0x13, 0xba, 0x7b, 0xb2, 0x2e,
	0xec, 0x45, 0xc1, 0x59, 0x75, 0xa1, 0x95, 0x71, 0x79, 0x37, 0x54, 0x0a, 0x12, 0x8c, 0xa4, 0xc4,
	0xbd, 0x21, 0xab, 0xfe, 0xdd, 0x34, 0xa2, 0x71, 0xb8, 0x04, 0x5a, 0x5f, 0x68, 0xb0, 0x96, 0x97,
	0xf2, 0xee, 0x38, 0xc6, 0x7e, 0xbd, 0x38, 0x84, 0x92, 0x87, 0xfa, 0x0c, 0x1e, 0x6e, 0x80, 0xd1,
	0x4b, 0x86, 0x82, 0x6c, 0x05, 0xcc, 0x06, 0x4f, 0x86, 0x88, 0xc2, 0x4e, 0xc4, 0xf8, 0x28, 0x7d,
	0x58, 0x19, 0x66, 0xea, 0x61, 0x26, 0x74, 0x7f, 0xd0, 0x80, 0xe4, 0x51, 0xa8, 0xa3, 0x83, 0x28,
	0x0d, 0x78, 0x10, 0x24, 0x6a, 0x25, 0x79, 0xf0, 0x48, 0xca, 0x89, 0x0b, 0x2b, 0x9f, 0x8e, 0xa2,
	0xe0, 0x89, 0x50, 0x52, 0x27, 0x89, 0x95, 0xa7, 0x85, 0x18, 0x75, 0x6e, 0xfb, 0x3c, 0x38, 0x3e,
	0x1a, 0xb1, 0x63, 0x71, 0x8f, 0xa5, 0xce, 0xc3, 0x42, 0x8c, 0xde, 0x1e, 0xc4, 0x1e, 0xf5, 0x33,
	0x6f, 0xa6, 0xa2, 0x04, 0x23, 0x29, 0x77, 0xff, 0x28, 0x7b, 0xdf, 0x54, 0x25, 0xd7, 0x16, 0xc2,
	0xa5, 0x4d, 0xc1, 0x75, 0x1d, 0x2c, 0xb4, 0xc1, 0x9a, 0x86, 0x18, 0x05, 0xfe, 0x3b, 0x39, 0x0a,
	0xe0, 0x62, 0x07, 0xff, 0x78, 0x16, 0x5e, 0x4b, 0xb6, 0x79, 0x02, 0xe6, 0x12, 0x65, 0xff, 0x8d,
	0x57, 0x03, 0x77, 0xb5, 0x9c, 0x73, 0xc7, 0xb1, 0xfb, 0x95, 0x5e, 0x0e, 0x9f, 0xe3, 0x98, 0xac,
	0x83, 0x85, 0x08, 0xb0, 0xa6, 0x26, 0x08, 0x69, 0xe1, 0xd1, 0x19, 0xb9, 0x56, 0x9c, 0x4d, 0x9f,
	0x3d, 0xe6, 0x28, 0xc7, 0x22, 0xd7, 0xc0, 0xec, 0x52, 0x5e, 0xc0, 0xb0, 0x31, 0xa9, 0x9a, 0x11,
	0xd3, 0x33, 0x19, 0xe5, 0x8c, 0xdc, 0x82, 0x86, 0x42, 0x11, 0x11, 0x6d, 0xe3, 0xe6, 0xff, 0x26,
	0xb7, 0x28, 0x2a, 0x5e, 0x63, 0xa8, 0x50, 0xaa, 0x0d, 0x76, 0x37, 0x1f, 0xd6, 0x2a, 0x45, 0xd9,
	0x66, 0xc5, 0x08, 0xf7, 0x0e, 0xd4, 0x64, 0x65, 0x33, 0xe6, 0x95, 0xa9, 0x5a, 0x98, 0x95, 0xa8,
	0x03, 0x39, 0x04, 0x1c, 0x25, 0xcf, 0x68, 0xba, 0x44, 0xbb, 0x2b, 0x0b, 0xab, 0x3e, 0xa3, 0x5d,
	0x6d, 0xc9, 0xf2, 0x91, 0xd9, 0x9b, 0xff, 0xf4, 0xf8, 0xb6, 0xec, 0xb5, 0x1e, 0x0d, 0xf1, 0x4c,
	0x67, 0xdf, 0xdc, 0xf9, 0x8e, 0xc5, 0xc8, 0x3b, 0x1a, 0xb0, 0x2a, 0x33, 0xe2, 0xd1, 0x80, 0x61,
	0xa3, 0xea, 0x25, 0xdc, 0xef, 0x57, 0xda, 0xab, 0xc5, 0x51, 0x24, 0x99, 0x66, 0x4d, 0x0d, 0x2a,
	0x0f, 0x61, 0xf5, 0x3e, 0x7b, 0xec, 0xd1, 0x30, 0x6f, 0x00, 0x8b, 0x19, 0xbb, 0x09, 0xd6, 0x7e,
	0x72, 0x42, 0x59, 0x25, 0x34, 0xab, 0x8f, 0xa2, 0xf9, 0x9c, 0x75, 0x0f, 0xe5, 0x93, 0xd3, 0xa3,
	0xa1, 0x47, 0x03, 0x1a, 0x9d, 0x35, 0x86, 0x29, 0x34, 0xd7, 0x67, 0xd0, 0x7c, 0x4f, 0x79, 0x76,
	0x86, 0x5d, 0xfa, 0x7a, 0xc6, 0x5e, 0x68, 0xca, 0x3b, 0x52, 0x58, 0x9b, 0xdf, 0x85, 0x16, 0x0f,
	0x6a, 0xa5, 0x1f, 0x63, 0x46, 0xa7, 0xbe, 0x01, 0x76, 0x7e, 0x76, 0xd6, 0x34, 0x05, 0x63, 0x2f,
	0xab, 0xb7, 0x41, 0xa6, 0xc0, 0xb3, 0xd3, 0x5c, 0x4d, 0x7d, 0xc5, 0xa8, 0xdd, 0xbd, 0x78, 0xc5,
	0x5c, 0xfb, 0x5e, 0x87, 0xba, 0x68, 0x78, 0x83, 0x90, 0x00, 0xd4, 0xb2, 0xff, 0x66, 0x38, 0x1a,
	0xa9, 0x83, 0xd1, 0x1d, 0xc7, 0x8e, 0x8e, 0xc2, 0xec, 0x6d, 0xec, 0x18, 0x42, 0x48, 0xb9, 0x63,
	0x92, 0x0b, 0x95, 0x9b, 0xe9, 0x58, 0xa8, 0x95, 0x95, 0x6f, 0xa7, 0x46, 0x1a, 0x50, 0xcf, 0x47,
	0x19, 0xa7, 0x4e, 0x56, 0xc0, 0x12, 0xf4, 0x76, 0x6c, 0xfc, 0x29, 0xda, 0xaa, 0xb3, 0x82, 0x3f,
	0x45, 0xcf, 0x74, 0x80, 0xac, 0xc1, 0x8a, 0x6c, 0xde, 0xce, 0x65, 0xfc, 0xfc, 0x2c, 0x49, 0xfb,
	0x21, 0xc6, 0xe4, 0x6c, 0x90, 0x55, 0xb0, 0x7b, 0xd4, 0x1f, 0x88, 0xaf, 0xff, 0xa0, 0x97, 0xec,
	0xd1, 0xe2, 0x34, 0x88, 0x0d, 0x26, 0x4e, 0xf5, 0xce, 0x2a, 0x1a, 0x13, 0x63, 0xb9, 0xb3, 0x86,
	0x42, 0x84, 0xcf, 0x39, 0x8f, 0xbf, 0xb0, 0xcb, 0x3a, 0x17, 0x30, 0x9c, 0xfc, 0x91, 0xe8, 0x38,
	0xe4, 0x3c, 0x40, 0xf9, 0x3f, 0x0b, 0xe7, 0x22, 0x2e, 0xe6, 0x57, 0xca, 0x21, 0xb8, 0x58, 0xb2,
	0xcb, 0xb9, 0x94, 0x1d, 0x1d, 0xd3, 0xe9, 0xac, 0xdf, 0x76, 0x5e, 0xbe, 0x6a, 0x69, 0xbf, 0xbc,
	0x6a, 0x69, 0xbf, 0xbd, 0x6a, 0x69, 0xcf, 0x7f, 0x6f, 0x9d, 0xfb, 0x33, 0x00, 0x00, 0xff, 0xff,
	0x12, 0x93, 0xb3, 0x6a, 0xfa, 0x13, 0x00, 0x00,
}
