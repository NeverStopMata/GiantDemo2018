// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: player.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		player.proto

	It has these top-level messages:
		RetLoginMsg
		RetGateAddr
		RetIntoFRoom
		RetErrorMsg
		RetDetailInfo
		ReqCheckTeam
		RetGLevelRankList
		RetSearchUser
		RetSearchUsers
		RetFriendList
		BatchAddFollowRet
		RetAddFollow
		RetUnFollow
		RelationUser
		RetFollowList
		RetFansList
		RetCheckFollows
		RetBlackList
		BlacksData
		BlacksDataList
		MatchData
		MatchDataList
		HonorData
		HonorDataList
		AwardInfo
		UserInfo
		FriMailData
		SysMailData
		ReqMailData
		RetRelationStat
		SnsDynamicMsg
		RetUser
		UsersNearby
		RetCheckSeason
		RetBanList
		RetBanInfoList
		RetDelBanList
		RetFansNumRankList
		RetCheckConnect
		RetSetSex
		RetResetPassword
		RetShareObject
		ObjNode
		RetScoreNumRankGift
		RetNotifyMoneyMessage
		RetAddIcon
		RetGetIcons
		RetQuestionnaire
		RetPreTeamMemList
		RetUsersInviteNearby
		RetTodayTicketInfo
		MsgResInfo
		RetExchangeActCode
		RetBindChannl
		RetCheckBindChannl
		RetCheckAccPwBind
		RetMsgFriMailList
		RetMsgSysMailList
		RetMsgReqMailList
		RetMsgReadMail
		RetMsgDelMail
		MailIdInfo
		RetMsgRecvMail
		RetMsgUpdateReqMail
		RetGiftGiving
		RetAskingGift
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgType int32

const (
	MsgType_Login                   MsgType = 1
	MsgType_GateAddr                MsgType = 2
	MsgType_ReqIntoFRoom            MsgType = 3
	MsgType_ErrorMsg                MsgType = 4
	MsgType_DetailInfo              MsgType = 5
	MsgType_SearchUser              MsgType = 6
	MsgType_AddFollow               MsgType = 7
	MsgType_UnFollow                MsgType = 8
	MsgType_FollowList              MsgType = 9
	MsgType_FansList                MsgType = 10
	MsgType_BlackList               MsgType = 11
	MsgType_RelationStat            MsgType = 12
	MsgType_CheckFollows            MsgType = 13
	MsgType_AddBanList              MsgType = 14
	MsgType_GetBanList              MsgType = 15
	MsgType_DelBanList              MsgType = 16
	MsgType_AddRemark               MsgType = 17
	MsgType_GetTopScore             MsgType = 18
	MsgType_CheckConnect            MsgType = 19
	MsgType_JoinUserRoom            MsgType = 20
	MsgType_FriendList              MsgType = 21
	MsgType_RespAddFriend           MsgType = 22
	MsgType_BatchAddFollow          MsgType = 23
	MsgType_AddStar                 MsgType = 24
	MsgType_AuthCode                MsgType = 25
	MsgType_BindTel                 MsgType = 26
	MsgType_ReqResetPassword        MsgType = 27
	MsgType_SetAccount              MsgType = 28
	MsgType_SetPasswd               MsgType = 29
	MsgType_SetIcon                 MsgType = 30
	MsgType_CheckBindTel            MsgType = 31
	MsgType_SetAge                  MsgType = 32
	MsgType_SetSex                  MsgType = 33
	MsgType_ChangePasswd            MsgType = 34
	MsgType_ReqAuthCode             MsgType = 35
	MsgType_ChangeBindTelSubmitCode MsgType = 36
	MsgType_ChangeBindTelSubmitOk   MsgType = 37
	MsgType_CheckOldPassword        MsgType = 38
	MsgType_ShareData               MsgType = 39
	MsgType_FansNumRank             MsgType = 40
	MsgType_ReqScoreNumRankGift     MsgType = 43
	MsgType_NotifyMoneyMessage      MsgType = 44
	MsgType_AddIcon                 MsgType = 45
	MsgType_GetIcons                MsgType = 46
	MsgType_CheckSeason             MsgType = 47
	MsgType_Questionnaire           MsgType = 48
	MsgType_PreTeamMemList          MsgType = 49
	MsgType_SnsDetailInfo           MsgType = 59
	MsgType_SetUserSign             MsgType = 60
	MsgType_AddAudience             MsgType = 61
	MsgType_GetPhotoList            MsgType = 62
	MsgType_ShowPhoto               MsgType = 63
	MsgType_Praise                  MsgType = 64
	MsgType_DelPraise               MsgType = 65
	MsgType_DelPhoto                MsgType = 66
	MsgType_AddReport               MsgType = 67
	MsgType_MatchList               MsgType = 68
	MsgType_HonorList               MsgType = 69
	MsgType_GLevelRank              MsgType = 70
	MsgType_TodayTicketInfo         MsgType = 71
	MsgType_IsReport                MsgType = 72
	MsgType_GetReportMsg            MsgType = 73
	MsgType_ExchangeActCode         MsgType = 74
	MsgType_MailList                MsgType = 96
	MsgType_ReadMail                MsgType = 97
	MsgType_DelMail                 MsgType = 98
	MsgType_RecvMail                MsgType = 99
	MsgType_QuickRecvMail           MsgType = 100
	MsgType_QuickRecvSysMail        MsgType = 101
	MsgType_DelAllSysMail           MsgType = 102
	MsgType_UpdateReqMail           MsgType = 103
	MsgType_DelAllReqMail           MsgType = 104
	MsgType_GetMailState            MsgType = 105
	MsgType_FriendMail              MsgType = 110
	MsgType_SystemMail              MsgType = 111
	MsgType_RequestMail             MsgType = 112
	MsgType_SetApplyState           MsgType = 113
	MsgType_GiftGiving              MsgType = 200
	MsgType_AskingGift              MsgType = 201
	MsgType_CheckIdCard             MsgType = 203
	MsgType_BindChannl              MsgType = 753
	MsgType_CheckBindChannl         MsgType = 754
	MsgType_CheckAccPwBind          MsgType = 755
	MsgType_UpdateLocation          MsgType = 1000
	MsgType_GetUsersNearby          MsgType = 1001
	MsgType_UpdateLocalDesc         MsgType = 1002
	MsgType_GetNearRoom             MsgType = 1004
	MsgType_GetInviteNearby         MsgType = 1005
	MsgType_GetRecentTeamFriend     MsgType = 1006
	MsgType_ShakeOpen               MsgType = 1010
	MsgType_ShakeGetUser            MsgType = 1011
	MsgType_ShakeUpdateTime         MsgType = 1012
	MsgType_RadarOpen               MsgType = 1020
	MsgType_RadarGetUser            MsgType = 1021
	MsgType_RadarClosed             MsgType = 1022
	MsgType_FFJoinGame              MsgType = 1023
)

var MsgType_name = map[int32]string{
	1:    "Login",
	2:    "GateAddr",
	3:    "ReqIntoFRoom",
	4:    "ErrorMsg",
	5:    "DetailInfo",
	6:    "SearchUser",
	7:    "AddFollow",
	8:    "UnFollow",
	9:    "FollowList",
	10:   "FansList",
	11:   "BlackList",
	12:   "RelationStat",
	13:   "CheckFollows",
	14:   "AddBanList",
	15:   "GetBanList",
	16:   "DelBanList",
	17:   "AddRemark",
	18:   "GetTopScore",
	19:   "CheckConnect",
	20:   "JoinUserRoom",
	21:   "FriendList",
	22:   "RespAddFriend",
	23:   "BatchAddFollow",
	24:   "AddStar",
	25:   "AuthCode",
	26:   "BindTel",
	27:   "ReqResetPassword",
	28:   "SetAccount",
	29:   "SetPasswd",
	30:   "SetIcon",
	31:   "CheckBindTel",
	32:   "SetAge",
	33:   "SetSex",
	34:   "ChangePasswd",
	35:   "ReqAuthCode",
	36:   "ChangeBindTelSubmitCode",
	37:   "ChangeBindTelSubmitOk",
	38:   "CheckOldPassword",
	39:   "ShareData",
	40:   "FansNumRank",
	43:   "ReqScoreNumRankGift",
	44:   "NotifyMoneyMessage",
	45:   "AddIcon",
	46:   "GetIcons",
	47:   "CheckSeason",
	48:   "Questionnaire",
	49:   "PreTeamMemList",
	59:   "SnsDetailInfo",
	60:   "SetUserSign",
	61:   "AddAudience",
	62:   "GetPhotoList",
	63:   "ShowPhoto",
	64:   "Praise",
	65:   "DelPraise",
	66:   "DelPhoto",
	67:   "AddReport",
	68:   "MatchList",
	69:   "HonorList",
	70:   "GLevelRank",
	71:   "TodayTicketInfo",
	72:   "IsReport",
	73:   "GetReportMsg",
	74:   "ExchangeActCode",
	96:   "MailList",
	97:   "ReadMail",
	98:   "DelMail",
	99:   "RecvMail",
	100:  "QuickRecvMail",
	101:  "QuickRecvSysMail",
	102:  "DelAllSysMail",
	103:  "UpdateReqMail",
	104:  "DelAllReqMail",
	105:  "GetMailState",
	110:  "FriendMail",
	111:  "SystemMail",
	112:  "RequestMail",
	113:  "SetApplyState",
	200:  "GiftGiving",
	201:  "AskingGift",
	203:  "CheckIdCard",
	753:  "BindChannl",
	754:  "CheckBindChannl",
	755:  "CheckAccPwBind",
	1000: "UpdateLocation",
	1001: "GetUsersNearby",
	1002: "UpdateLocalDesc",
	1004: "GetNearRoom",
	1005: "GetInviteNearby",
	1006: "GetRecentTeamFriend",
	1010: "ShakeOpen",
	1011: "ShakeGetUser",
	1012: "ShakeUpdateTime",
	1020: "RadarOpen",
	1021: "RadarGetUser",
	1022: "RadarClosed",
	1023: "FFJoinGame",
}
var MsgType_value = map[string]int32{
	"Login":                   1,
	"GateAddr":                2,
	"ReqIntoFRoom":            3,
	"ErrorMsg":                4,
	"DetailInfo":              5,
	"SearchUser":              6,
	"AddFollow":               7,
	"UnFollow":                8,
	"FollowList":              9,
	"FansList":                10,
	"BlackList":               11,
	"RelationStat":            12,
	"CheckFollows":            13,
	"AddBanList":              14,
	"GetBanList":              15,
	"DelBanList":              16,
	"AddRemark":               17,
	"GetTopScore":             18,
	"CheckConnect":            19,
	"JoinUserRoom":            20,
	"FriendList":              21,
	"RespAddFriend":           22,
	"BatchAddFollow":          23,
	"AddStar":                 24,
	"AuthCode":                25,
	"BindTel":                 26,
	"ReqResetPassword":        27,
	"SetAccount":              28,
	"SetPasswd":               29,
	"SetIcon":                 30,
	"CheckBindTel":            31,
	"SetAge":                  32,
	"SetSex":                  33,
	"ChangePasswd":            34,
	"ReqAuthCode":             35,
	"ChangeBindTelSubmitCode": 36,
	"ChangeBindTelSubmitOk":   37,
	"CheckOldPassword":        38,
	"ShareData":               39,
	"FansNumRank":             40,
	"ReqScoreNumRankGift":     43,
	"NotifyMoneyMessage":      44,
	"AddIcon":                 45,
	"GetIcons":                46,
	"CheckSeason":             47,
	"Questionnaire":           48,
	"PreTeamMemList":          49,
	"SnsDetailInfo":           59,
	"SetUserSign":             60,
	"AddAudience":             61,
	"GetPhotoList":            62,
	"ShowPhoto":               63,
	"Praise":                  64,
	"DelPraise":               65,
	"DelPhoto":                66,
	"AddReport":               67,
	"MatchList":               68,
	"HonorList":               69,
	"GLevelRank":              70,
	"TodayTicketInfo":         71,
	"IsReport":                72,
	"GetReportMsg":            73,
	"ExchangeActCode":         74,
	"MailList":                96,
	"ReadMail":                97,
	"DelMail":                 98,
	"RecvMail":                99,
	"QuickRecvMail":           100,
	"QuickRecvSysMail":        101,
	"DelAllSysMail":           102,
	"UpdateReqMail":           103,
	"DelAllReqMail":           104,
	"GetMailState":            105,
	"FriendMail":              110,
	"SystemMail":              111,
	"RequestMail":             112,
	"SetApplyState":           113,
	"GiftGiving":              200,
	"AskingGift":              201,
	"CheckIdCard":             203,
	"BindChannl":              753,
	"CheckBindChannl":         754,
	"CheckAccPwBind":          755,
	"UpdateLocation":          1000,
	"GetUsersNearby":          1001,
	"UpdateLocalDesc":         1002,
	"GetNearRoom":             1004,
	"GetInviteNearby":         1005,
	"GetRecentTeamFriend":     1006,
	"ShakeOpen":               1010,
	"ShakeGetUser":            1011,
	"ShakeUpdateTime":         1012,
	"RadarOpen":               1020,
	"RadarGetUser":            1021,
	"RadarClosed":             1022,
	"FFJoinGame":              1023,
}

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}
func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (x *MsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgType_value, data, "MsgType")
	if err != nil {
		return err
	}
	*x = MsgType(value)
	return nil
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{0} }

// 启动 //share?type=4&id=玩家id&dev=设备号&device=android|ios&phonetype=手机型号&mobile=手机号&operation=激活成功=1&custid=渠道编号
// 请求登录 /msg?c=Login?a=帐号&p=密码&ver=版本号&dev=设备号&device=android|ios&r=1注册,0或不填登录&jb=是否越狱的设备&phonetype=手机型号&custid=渠道编号&channl=?&accid=?&switchacc=1
type RetLoginMsg struct {
	Account  string `protobuf:"bytes,1,req,name=Account,json=account" json:"Account"`
	Id       uint64 `protobuf:"varint,2,req,name=Id,json=id" json:"Id"`
	IsNewbie bool   `protobuf:"varint,3,req,name=IsNewbie,json=isNewbie" json:"IsNewbie"`
	Password string `protobuf:"bytes,4,req,name=Password,json=password" json:"Password"`
	Location uint32 `protobuf:"varint,6,req,name=Location,json=location" json:"Location"`
	TimeNow  int64  `protobuf:"varint,7,opt,name=TimeNow,json=timeNow" json:"TimeNow"`
	Sex      uint32 `protobuf:"varint,8,opt,name=sex" json:"sex"`
	Age      uint32 `protobuf:"varint,9,opt,name=age" json:"age"`
	Tel      string `protobuf:"bytes,10,opt,name=tel" json:"tel"`
	Icon     uint32 `protobuf:"varint,11,opt,name=icon" json:"icon"`
	Nick     string `protobuf:"bytes,12,opt,name=nick" json:"nick"`
	Channl   uint32 `protobuf:"varint,13,opt,name=channl" json:"channl"`
	Isregist uint32 `protobuf:"varint,14,opt,name=isregist" json:"isregist"`
	PassIcon string `protobuf:"bytes,15,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	MaxLevel uint32 `protobuf:"varint,16,opt,name=MaxLevel,json=maxLevel" json:"MaxLevel"`
	Idcard   string `protobuf:"bytes,17,opt,name=idcard" json:"idcard"`
	RegTime  uint32 `protobuf:"varint,18,opt,name=RegTime,json=regTime" json:"RegTime"`
}

func (m *RetLoginMsg) Reset()                    { *m = RetLoginMsg{} }
func (m *RetLoginMsg) String() string            { return proto.CompactTextString(m) }
func (*RetLoginMsg) ProtoMessage()               {}
func (*RetLoginMsg) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{0} }

func (m *RetLoginMsg) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetLoginMsg) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetLoginMsg) GetIsNewbie() bool {
	if m != nil {
		return m.IsNewbie
	}
	return false
}

func (m *RetLoginMsg) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RetLoginMsg) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *RetLoginMsg) GetTimeNow() int64 {
	if m != nil {
		return m.TimeNow
	}
	return 0
}

func (m *RetLoginMsg) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetLoginMsg) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RetLoginMsg) GetTel() string {
	if m != nil {
		return m.Tel
	}
	return ""
}

func (m *RetLoginMsg) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetLoginMsg) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *RetLoginMsg) GetChannl() uint32 {
	if m != nil {
		return m.Channl
	}
	return 0
}

func (m *RetLoginMsg) GetIsregist() uint32 {
	if m != nil {
		return m.Isregist
	}
	return 0
}

func (m *RetLoginMsg) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetLoginMsg) GetMaxLevel() uint32 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

func (m *RetLoginMsg) GetIdcard() string {
	if m != nil {
		return m.Idcard
	}
	return ""
}

func (m *RetLoginMsg) GetRegTime() uint32 {
	if m != nil {
		return m.RegTime
	}
	return 0
}

// 获取网关地址 /msg?c=GateAddr
type RetGateAddr struct {
	Address string `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	Key     string `protobuf:"bytes,2,req,name=Key,json=key" json:"Key"`
}

func (m *RetGateAddr) Reset()                    { *m = RetGateAddr{} }
func (m *RetGateAddr) String() string            { return proto.CompactTextString(m) }
func (*RetGateAddr) ProtoMessage()               {}
func (*RetGateAddr) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{1} }

func (m *RetGateAddr) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RetGateAddr) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// 请求进入房间 /msg?c=ReqIntoFRoom&ver=版本号&model=0个人|1加入|2观战|4组队|5闪电战&oid=好友id&ticket=门票数&ucoo=0普通1纯净2纯净非语音&ticketnum=
type RetIntoFRoom struct {
	Err       uint32 `protobuf:"varint,1,req,name=Err,json=err" json:"Err"`
	Addr      string `protobuf:"bytes,2,opt,name=Addr,json=addr" json:"Addr"`
	Key       string `protobuf:"bytes,3,opt,name=Key,json=key" json:"Key"`
	UId       uint64 `protobuf:"varint,4,opt,name=UId,json=uId" json:"UId"`
	Tips      uint32 `protobuf:"varint,5,opt,name=Tips,json=tips" json:"Tips"`
	RoomId    uint32 `protobuf:"varint,6,opt,name=RoomId,json=roomId" json:"RoomId"`
	Priv      uint32 `protobuf:"varint,7,opt,name=Priv,json=priv" json:"Priv"`
	Model     uint32 `protobuf:"varint,8,opt,name=Model,json=model" json:"Model"`
	SceneId   uint32 `protobuf:"varint,9,opt,name=SceneId,json=sceneId" json:"SceneId"`
	Ticketnum uint32 `protobuf:"varint,10,opt,name=ticketnum" json:"ticketnum"`
}

func (m *RetIntoFRoom) Reset()                    { *m = RetIntoFRoom{} }
func (m *RetIntoFRoom) String() string            { return proto.CompactTextString(m) }
func (*RetIntoFRoom) ProtoMessage()               {}
func (*RetIntoFRoom) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{2} }

func (m *RetIntoFRoom) GetErr() uint32 {
	if m != nil {
		return m.Err
	}
	return 0
}

func (m *RetIntoFRoom) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *RetIntoFRoom) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RetIntoFRoom) GetUId() uint64 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *RetIntoFRoom) GetTips() uint32 {
	if m != nil {
		return m.Tips
	}
	return 0
}

func (m *RetIntoFRoom) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RetIntoFRoom) GetPriv() uint32 {
	if m != nil {
		return m.Priv
	}
	return 0
}

func (m *RetIntoFRoom) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *RetIntoFRoom) GetSceneId() uint32 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

func (m *RetIntoFRoom) GetTicketnum() uint32 {
	if m != nil {
		return m.Ticketnum
	}
	return 0
}

// 返回统一错误码
type RetErrorMsg struct {
	RetCode   uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
	Params    uint64 `protobuf:"varint,2,opt,name=Params,json=params" json:"Params"`
	JsonParam string `protobuf:"bytes,3,opt,name=JsonParam,json=jsonParam" json:"JsonParam"`
}

func (m *RetErrorMsg) Reset()                    { *m = RetErrorMsg{} }
func (m *RetErrorMsg) String() string            { return proto.CompactTextString(m) }
func (*RetErrorMsg) ProtoMessage()               {}
func (*RetErrorMsg) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{3} }

func (m *RetErrorMsg) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RetErrorMsg) GetParams() uint64 {
	if m != nil {
		return m.Params
	}
	return 0
}

func (m *RetErrorMsg) GetJsonParam() string {
	if m != nil {
		return m.JsonParam
	}
	return ""
}

// 返回玩家详细数据 /msg?c=DetailInfo&u=玩家id
type RetDetailInfo struct {
	Id          uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account     string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon        uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex         uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	PassIcon    string `protobuf:"bytes,5,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Level       uint32 `protobuf:"varint,10,opt,name=Level,json=level" json:"Level"`
	Scores      uint32 `protobuf:"varint,11,opt,name=Scores,json=scores" json:"Scores"`
	HideScores  uint32 `protobuf:"varint,12,opt,name=HideScores,json=hideScores" json:"HideScores"`
	JiangGuo    uint32 `protobuf:"varint,21,opt,name=JiangGuo,json=jiangGuo" json:"JiangGuo"`
	ActCodeFigt uint32 `protobuf:"varint,22,opt,name=ActCodeFigt,json=actCodeFigt" json:"ActCodeFigt"`
	Speaker     uint32 `protobuf:"varint,23,opt,name=Speaker,json=speaker" json:"Speaker"`
}

func (m *RetDetailInfo) Reset()                    { *m = RetDetailInfo{} }
func (m *RetDetailInfo) String() string            { return proto.CompactTextString(m) }
func (*RetDetailInfo) ProtoMessage()               {}
func (*RetDetailInfo) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{4} }

func (m *RetDetailInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetDetailInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetDetailInfo) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetDetailInfo) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetDetailInfo) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetDetailInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetDetailInfo) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *RetDetailInfo) GetHideScores() uint32 {
	if m != nil {
		return m.HideScores
	}
	return 0
}

func (m *RetDetailInfo) GetJiangGuo() uint32 {
	if m != nil {
		return m.JiangGuo
	}
	return 0
}

func (m *RetDetailInfo) GetActCodeFigt() uint32 {
	if m != nil {
		return m.ActCodeFigt
	}
	return 0
}

func (m *RetDetailInfo) GetSpeaker() uint32 {
	if m != nil {
		return m.Speaker
	}
	return 0
}

// 检查服务器开启时间 /msg?c=CheckTeam
type ReqCheckTeam struct {
	OpenTime uint32 `protobuf:"varint,1,req,name=OpenTime,json=openTime" json:"OpenTime"`
}

func (m *ReqCheckTeam) Reset()                    { *m = ReqCheckTeam{} }
func (m *ReqCheckTeam) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckTeam) ProtoMessage()               {}
func (*ReqCheckTeam) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{5} }

func (m *ReqCheckTeam) GetOpenTime() uint32 {
	if m != nil {
		return m.OpenTime
	}
	return 0
}

// 返回段位排行榜 /msg?c=GLevelRank&t=当前(1)地区(2)总(3)
type RetGLevelRankList struct {
	Players  []*RetGLevelRankList_LevelUser `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
	SelfInfo *RetGLevelRankList_LevelUser   `protobuf:"bytes,2,opt,name=SelfInfo,json=selfInfo" json:"SelfInfo,omitempty"`
}

func (m *RetGLevelRankList) Reset()                    { *m = RetGLevelRankList{} }
func (m *RetGLevelRankList) String() string            { return proto.CompactTextString(m) }
func (*RetGLevelRankList) ProtoMessage()               {}
func (*RetGLevelRankList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{6} }

func (m *RetGLevelRankList) GetPlayers() []*RetGLevelRankList_LevelUser {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RetGLevelRankList) GetSelfInfo() *RetGLevelRankList_LevelUser {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

type RetGLevelRankList_LevelUser struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	Level    uint32 `protobuf:"varint,6,req,name=Level,json=level" json:"Level"`
	Stars    uint32 `protobuf:"varint,7,req,name=Stars,json=stars" json:"Stars"`
	Rank     uint32 `protobuf:"varint,8,req,name=Rank,json=rank" json:"Rank"`
	PassIcon string `protobuf:"bytes,9,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	MaxLevel uint32 `protobuf:"varint,10,opt,name=MaxLevel,json=maxLevel" json:"MaxLevel"`
	MaxStars uint32 `protobuf:"varint,11,opt,name=MaxStars,json=maxStars" json:"MaxStars"`
	IsFollow bool   `protobuf:"varint,12,opt,name=IsFollow,json=isFollow" json:"IsFollow"`
}

func (m *RetGLevelRankList_LevelUser) Reset()         { *m = RetGLevelRankList_LevelUser{} }
func (m *RetGLevelRankList_LevelUser) String() string { return proto.CompactTextString(m) }
func (*RetGLevelRankList_LevelUser) ProtoMessage()    {}
func (*RetGLevelRankList_LevelUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{6, 0}
}

func (m *RetGLevelRankList_LevelUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetGLevelRankList_LevelUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetStars() uint32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetGLevelRankList_LevelUser) GetMaxLevel() uint32 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetMaxStars() uint32 {
	if m != nil {
		return m.MaxStars
	}
	return 0
}

func (m *RetGLevelRankList_LevelUser) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

// ===========================
// 	好友系统
// ===========================
// 搜索玩家 /msg?c=SearchUser&account=玩家账号
type RetSearchUser struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,req,name=Sex,json=sex" json:"Sex"`
	Age      uint32 `protobuf:"varint,4,opt,name=Age,json=age" json:"Age"`
	Icon     uint32 `protobuf:"varint,5,req,name=Icon,json=icon" json:"Icon"`
	PassIcon string `protobuf:"bytes,6,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	IsFriend bool   `protobuf:"varint,7,req,name=IsFriend,json=isFriend" json:"IsFriend"`
	Location uint32 `protobuf:"varint,8,req,name=Location,json=location" json:"Location"`
}

func (m *RetSearchUser) Reset()                    { *m = RetSearchUser{} }
func (m *RetSearchUser) String() string            { return proto.CompactTextString(m) }
func (*RetSearchUser) ProtoMessage()               {}
func (*RetSearchUser) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{7} }

func (m *RetSearchUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetSearchUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetSearchUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetSearchUser) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RetSearchUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetSearchUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetSearchUser) GetIsFriend() bool {
	if m != nil {
		return m.IsFriend
	}
	return false
}

func (m *RetSearchUser) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

type RetSearchUsers struct {
	Players []*RetSearchUser `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
}

func (m *RetSearchUsers) Reset()                    { *m = RetSearchUsers{} }
func (m *RetSearchUsers) String() string            { return proto.CompactTextString(m) }
func (*RetSearchUsers) ProtoMessage()               {}
func (*RetSearchUsers) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{8} }

func (m *RetSearchUsers) GetPlayers() []*RetSearchUser {
	if m != nil {
		return m.Players
	}
	return nil
}

// 请求好友列表 /msg?c=FriendList
type RetFriendList struct {
	Players []*RetFriendList_FriendData `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
}

func (m *RetFriendList) Reset()                    { *m = RetFriendList{} }
func (m *RetFriendList) String() string            { return proto.CompactTextString(m) }
func (*RetFriendList) ProtoMessage()               {}
func (*RetFriendList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{9} }

func (m *RetFriendList) GetPlayers() []*RetFriendList_FriendData {
	if m != nil {
		return m.Players
	}
	return nil
}

type RetFriendList_FriendData struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	State    uint32 `protobuf:"varint,5,req,name=State,json=state" json:"State"`
	PassIcon string `protobuf:"bytes,6,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	PrizeCup uint32 `protobuf:"varint,7,opt,name=PrizeCup,json=prizeCup" json:"PrizeCup"`
}

func (m *RetFriendList_FriendData) Reset()         { *m = RetFriendList_FriendData{} }
func (m *RetFriendList_FriendData) String() string { return proto.CompactTextString(m) }
func (*RetFriendList_FriendData) ProtoMessage()    {}
func (*RetFriendList_FriendData) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{9, 0}
}

func (m *RetFriendList_FriendData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetFriendList_FriendData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetFriendList_FriendData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetFriendList_FriendData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetFriendList_FriendData) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetFriendList_FriendData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetFriendList_FriendData) GetPrizeCup() uint32 {
	if m != nil {
		return m.PrizeCup
	}
	return 0
}

// ===========================
// 	关注系统
// ===========================
// 批量关注/msg?c=BatchAddFollow&uids=1|2|3 返回BatchAddFollowRet
type BatchAddFollowRet struct {
	RetFollow []*BatchAddFollowRet_RetAddFollow `protobuf:"bytes,1,rep,name=RetFollow,json=retFollow" json:"RetFollow,omitempty"`
}

func (m *BatchAddFollowRet) Reset()                    { *m = BatchAddFollowRet{} }
func (m *BatchAddFollowRet) String() string            { return proto.CompactTextString(m) }
func (*BatchAddFollowRet) ProtoMessage()               {}
func (*BatchAddFollowRet) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{10} }

func (m *BatchAddFollowRet) GetRetFollow() []*BatchAddFollowRet_RetAddFollow {
	if m != nil {
		return m.RetFollow
	}
	return nil
}

type BatchAddFollowRet_RetAddFollow struct {
	UID     uint64 `protobuf:"varint,1,req,name=UID,json=uID" json:"UID"`
	RelType uint32 `protobuf:"varint,2,req,name=RelType,json=relType" json:"RelType"`
}

func (m *BatchAddFollowRet_RetAddFollow) Reset()         { *m = BatchAddFollowRet_RetAddFollow{} }
func (m *BatchAddFollowRet_RetAddFollow) String() string { return proto.CompactTextString(m) }
func (*BatchAddFollowRet_RetAddFollow) ProtoMessage()    {}
func (*BatchAddFollowRet_RetAddFollow) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{10, 0}
}

func (m *BatchAddFollowRet_RetAddFollow) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *BatchAddFollowRet_RetAddFollow) GetRelType() uint32 {
	if m != nil {
		return m.RelType
	}
	return 0
}

// 请求点赞 /msg?c=AddStar&u=玩家id
// 请求关注 /msg?c=AddFollow&u=玩家id&a=玩家账号 (任选一个)&ft=0(1通过扫码关注,2摇一摇关注)
type RetAddFollow struct {
	Ret uint32 `protobuf:"varint,1,opt,name=Ret,json=ret" json:"Ret"`
	Uid uint64 `protobuf:"varint,2,opt,name=Uid,json=uid" json:"Uid"`
}

func (m *RetAddFollow) Reset()                    { *m = RetAddFollow{} }
func (m *RetAddFollow) String() string            { return proto.CompactTextString(m) }
func (*RetAddFollow) ProtoMessage()               {}
func (*RetAddFollow) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{11} }

func (m *RetAddFollow) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RetAddFollow) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 请求取消关注 /msg?c=UnFollow&u=玩家id
type RetUnFollow struct {
	Ret uint32 `protobuf:"varint,1,opt,name=Ret,json=ret" json:"Ret"`
	Uid uint64 `protobuf:"varint,2,opt,name=Uid,json=uid" json:"Uid"`
}

func (m *RetUnFollow) Reset()                    { *m = RetUnFollow{} }
func (m *RetUnFollow) String() string            { return proto.CompactTextString(m) }
func (*RetUnFollow) ProtoMessage()               {}
func (*RetUnFollow) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{12} }

func (m *RetUnFollow) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RetUnFollow) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 关系数据
type RelationUser struct {
	Id         uint64  `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account    string  `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon       uint32  `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex        uint32  `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	Msg        string  `protobuf:"bytes,5,req,name=Msg,json=msg" json:"Msg"`
	State      uint32  `protobuf:"varint,6,req,name=State,json=state" json:"State"`
	PassIcon   string  `protobuf:"bytes,7,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Longitude  float64 `protobuf:"fixed64,10,opt,name=Longitude,json=longitude" json:"Longitude"`
	Latitude   float64 `protobuf:"fixed64,11,opt,name=Latitude,json=latitude" json:"Latitude"`
	Level      uint32  `protobuf:"varint,12,opt,name=Level,json=level" json:"Level"`
	Scores     uint32  `protobuf:"varint,13,opt,name=Scores,json=scores" json:"Scores"`
	IsNew      uint32  `protobuf:"varint,14,opt,name=IsNew,json=isNew" json:"IsNew"`
	Age        uint32  `protobuf:"varint,15,opt,name=Age,json=age" json:"Age"`
	Sign       string  `protobuf:"bytes,16,opt,name=Sign,json=sign" json:"Sign"`
	Follows    uint32  `protobuf:"varint,17,opt,name=Follows,json=follows" json:"Follows"`
	Fans       uint32  `protobuf:"varint,18,opt,name=Fans,json=fans" json:"Fans"`
	RelType    uint32  `protobuf:"varint,19,opt,name=RelType,json=relType" json:"RelType"`
	OrderId    uint32  `protobuf:"varint,20,opt,name=OrderId,json=orderId" json:"OrderId"`
	Remark     string  `protobuf:"bytes,23,opt,name=Remark,json=remark" json:"Remark"`
	IsBan      uint32  `protobuf:"varint,24,opt,name=IsBan,json=isBan" json:"IsBan"`
	FollowTime uint32  `protobuf:"varint,25,opt,name=FollowTime,json=followTime" json:"FollowTime"`
}

func (m *RelationUser) Reset()                    { *m = RelationUser{} }
func (m *RelationUser) String() string            { return proto.CompactTextString(m) }
func (*RelationUser) ProtoMessage()               {}
func (*RelationUser) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{13} }

func (m *RelationUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RelationUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RelationUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RelationUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RelationUser) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RelationUser) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RelationUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RelationUser) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *RelationUser) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *RelationUser) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RelationUser) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *RelationUser) GetIsNew() uint32 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *RelationUser) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RelationUser) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *RelationUser) GetFollows() uint32 {
	if m != nil {
		return m.Follows
	}
	return 0
}

func (m *RelationUser) GetFans() uint32 {
	if m != nil {
		return m.Fans
	}
	return 0
}

func (m *RelationUser) GetRelType() uint32 {
	if m != nil {
		return m.RelType
	}
	return 0
}

func (m *RelationUser) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RelationUser) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *RelationUser) GetIsBan() uint32 {
	if m != nil {
		return m.IsBan
	}
	return 0
}

func (m *RelationUser) GetFollowTime() uint32 {
	if m != nil {
		return m.FollowTime
	}
	return 0
}

// 返回关注列表 /msg?c=FollowList&u=玩家id&p=最小记录,最大记录
type RetFollowList struct {
	Players []*RelationUser `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
	MyLongi float64         `protobuf:"fixed64,2,opt,name=MyLongi,json=myLongi" json:"MyLongi"`
	MyLati  float64         `protobuf:"fixed64,3,opt,name=MyLati,json=myLati" json:"MyLati"`
}

func (m *RetFollowList) Reset()                    { *m = RetFollowList{} }
func (m *RetFollowList) String() string            { return proto.CompactTextString(m) }
func (*RetFollowList) ProtoMessage()               {}
func (*RetFollowList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{14} }

func (m *RetFollowList) GetPlayers() []*RelationUser {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RetFollowList) GetMyLongi() float64 {
	if m != nil {
		return m.MyLongi
	}
	return 0
}

func (m *RetFollowList) GetMyLati() float64 {
	if m != nil {
		return m.MyLati
	}
	return 0
}

// 返回粉丝列表 /msg?c=FansList&u=玩家id&p=最小记录,最大记录
type RetFansList struct {
	Players []*RetFansList_FanUser `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (m *RetFansList) Reset()                    { *m = RetFansList{} }
func (m *RetFansList) String() string            { return proto.CompactTextString(m) }
func (*RetFansList) ProtoMessage()               {}
func (*RetFansList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{15} }

func (m *RetFansList) GetPlayers() []*RetFansList_FanUser {
	if m != nil {
		return m.Players
	}
	return nil
}

type RetFansList_FanUser struct {
	Id         uint64  `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account    string  `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon       uint32  `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex        uint32  `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	State      uint32  `protobuf:"varint,5,req,name=State,json=state" json:"State"`
	PassIcon   string  `protobuf:"bytes,6,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	IsNew      uint32  `protobuf:"varint,7,opt,name=IsNew,json=isNew" json:"IsNew"`
	RelType    uint32  `protobuf:"varint,8,opt,name=RelType,json=relType" json:"RelType"`
	Level      uint32  `protobuf:"varint,9,opt,name=Level,json=level" json:"Level"`
	Scores     uint32  `protobuf:"varint,10,opt,name=Scores,json=scores" json:"Scores"`
	Follows    uint32  `protobuf:"varint,11,opt,name=Follows,json=follows" json:"Follows"`
	Fans       uint32  `protobuf:"varint,12,opt,name=Fans,json=fans" json:"Fans"`
	Sign       string  `protobuf:"bytes,13,opt,name=Sign,json=sign" json:"Sign"`
	MyLongi    float64 `protobuf:"fixed64,14,opt,name=MyLongi,json=myLongi" json:"MyLongi"`
	MyLati     float64 `protobuf:"fixed64,15,opt,name=MyLati,json=myLati" json:"MyLati"`
	Remark     string  `protobuf:"bytes,18,opt,name=Remark,json=remark" json:"Remark"`
	Distance   uint32  `protobuf:"varint,19,opt,name=Distance,json=distance" json:"Distance"`
	FollowTime uint32  `protobuf:"varint,20,opt,name=FollowTime,json=followTime" json:"FollowTime"`
}

func (m *RetFansList_FanUser) Reset()                    { *m = RetFansList_FanUser{} }
func (m *RetFansList_FanUser) String() string            { return proto.CompactTextString(m) }
func (*RetFansList_FanUser) ProtoMessage()               {}
func (*RetFansList_FanUser) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{15, 0} }

func (m *RetFansList_FanUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetFansList_FanUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetFansList_FanUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetFansList_FanUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetFansList_FanUser) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetFansList_FanUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetFansList_FanUser) GetIsNew() uint32 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *RetFansList_FanUser) GetRelType() uint32 {
	if m != nil {
		return m.RelType
	}
	return 0
}

func (m *RetFansList_FanUser) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetFansList_FanUser) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *RetFansList_FanUser) GetFollows() uint32 {
	if m != nil {
		return m.Follows
	}
	return 0
}

func (m *RetFansList_FanUser) GetFans() uint32 {
	if m != nil {
		return m.Fans
	}
	return 0
}

func (m *RetFansList_FanUser) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *RetFansList_FanUser) GetMyLongi() float64 {
	if m != nil {
		return m.MyLongi
	}
	return 0
}

func (m *RetFansList_FanUser) GetMyLati() float64 {
	if m != nil {
		return m.MyLati
	}
	return 0
}

func (m *RetFansList_FanUser) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *RetFansList_FanUser) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RetFansList_FanUser) GetFollowTime() uint32 {
	if m != nil {
		return m.FollowTime
	}
	return 0
}

// 返回关标识 /msg?c=CheckFollows&u=被关注者id&f=注者id1,注者id2,...
type RetCheckFollows struct {
	Follows []*RetCheckFollows_FollowFlag `protobuf:"bytes,1,rep,name=Follows,json=follows" json:"Follows,omitempty"`
}

func (m *RetCheckFollows) Reset()                    { *m = RetCheckFollows{} }
func (m *RetCheckFollows) String() string            { return proto.CompactTextString(m) }
func (*RetCheckFollows) ProtoMessage()               {}
func (*RetCheckFollows) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{16} }

func (m *RetCheckFollows) GetFollows() []*RetCheckFollows_FollowFlag {
	if m != nil {
		return m.Follows
	}
	return nil
}

type RetCheckFollows_FollowFlag struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	IsFollow bool   `protobuf:"varint,2,req,name=IsFollow,json=isFollow" json:"IsFollow"`
	FType    uint32 `protobuf:"varint,3,opt,name=FType,json=fType" json:"FType"`
}

func (m *RetCheckFollows_FollowFlag) Reset()         { *m = RetCheckFollows_FollowFlag{} }
func (m *RetCheckFollows_FollowFlag) String() string { return proto.CompactTextString(m) }
func (*RetCheckFollows_FollowFlag) ProtoMessage()    {}
func (*RetCheckFollows_FollowFlag) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{16, 0}
}

func (m *RetCheckFollows_FollowFlag) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetCheckFollows_FollowFlag) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

func (m *RetCheckFollows_FollowFlag) GetFType() uint32 {
	if m != nil {
		return m.FType
	}
	return 0
}

// 返回坏人列表 /msg?c=BlackList&u=玩家id
type RetBlackList struct {
	Players []*RetBlackList_BlackUser `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (m *RetBlackList) Reset()                    { *m = RetBlackList{} }
func (m *RetBlackList) String() string            { return proto.CompactTextString(m) }
func (*RetBlackList) ProtoMessage()               {}
func (*RetBlackList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{17} }

func (m *RetBlackList) GetPlayers() []*RetBlackList_BlackUser {
	if m != nil {
		return m.Players
	}
	return nil
}

type RetBlackList_BlackUser struct {
	Id        uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account   string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon      uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex       uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	BeEatNum  uint32 `protobuf:"varint,5,req,name=BeEatNum,json=beEatNum" json:"BeEatNum"`
	State     uint32 `protobuf:"varint,6,req,name=State,json=state" json:"State"`
	PassIcon  string `protobuf:"bytes,7,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	RelType   uint32 `protobuf:"varint,8,opt,name=RelType,json=relType" json:"RelType"`
	Sign      string `protobuf:"bytes,9,opt,name=Sign,json=sign" json:"Sign"`
	IsNew     uint32 `protobuf:"varint,10,opt,name=IsNew,json=isNew" json:"IsNew"`
	OrderId   uint32 `protobuf:"varint,11,opt,name=OrderId,json=orderId" json:"OrderId"`
	Remark    string `protobuf:"bytes,14,opt,name=Remark,json=remark" json:"Remark"`
	BeEatTime uint32 `protobuf:"varint,15,opt,name=BeEatTime,json=beEatTime" json:"BeEatTime"`
}

func (m *RetBlackList_BlackUser) Reset()                    { *m = RetBlackList_BlackUser{} }
func (m *RetBlackList_BlackUser) String() string            { return proto.CompactTextString(m) }
func (*RetBlackList_BlackUser) ProtoMessage()               {}
func (*RetBlackList_BlackUser) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{17, 0} }

func (m *RetBlackList_BlackUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetBlackList_BlackUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetBeEatNum() uint32 {
	if m != nil {
		return m.BeEatNum
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetBlackList_BlackUser) GetRelType() uint32 {
	if m != nil {
		return m.RelType
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *RetBlackList_BlackUser) GetIsNew() uint32 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RetBlackList_BlackUser) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *RetBlackList_BlackUser) GetBeEatTime() uint32 {
	if m != nil {
		return m.BeEatTime
	}
	return 0
}

// 坏人数据
type BlacksData struct {
	Id        uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	BeEatNum  uint32 `protobuf:"varint,2,req,name=BeEatNum,json=beEatNum" json:"BeEatNum"`
	BeEatTime uint32 `protobuf:"varint,3,req,name=BeEatTime,json=beEatTime" json:"BeEatTime"`
}

func (m *BlacksData) Reset()                    { *m = BlacksData{} }
func (m *BlacksData) String() string            { return proto.CompactTextString(m) }
func (*BlacksData) ProtoMessage()               {}
func (*BlacksData) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{18} }

func (m *BlacksData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BlacksData) GetBeEatNum() uint32 {
	if m != nil {
		return m.BeEatNum
	}
	return 0
}

func (m *BlacksData) GetBeEatTime() uint32 {
	if m != nil {
		return m.BeEatTime
	}
	return 0
}

// 坏人列表
type BlacksDataList struct {
	Datas []*BlacksData `protobuf:"bytes,1,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *BlacksDataList) Reset()                    { *m = BlacksDataList{} }
func (m *BlacksDataList) String() string            { return proto.CompactTextString(m) }
func (*BlacksDataList) ProtoMessage()               {}
func (*BlacksDataList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{19} }

func (m *BlacksDataList) GetDatas() []*BlacksData {
	if m != nil {
		return m.Datas
	}
	return nil
}

// 比赛数据
type MatchData struct {
	Icon     uint32 `protobuf:"varint,1,req,name=Icon,json=icon" json:"Icon"`
	NickName string `protobuf:"bytes,2,req,name=NickName,json=nickName" json:"NickName"`
	Time     uint32 `protobuf:"varint,3,req,name=Time,json=time" json:"Time"`
	Rank     uint32 `protobuf:"varint,4,req,name=Rank,json=rank" json:"Rank"`
	Score    uint32 `protobuf:"varint,5,req,name=Score,json=score" json:"Score"`
	AnimalID uint32 `protobuf:"varint,6,req,name=AnimalID,json=animalID" json:"AnimalID"`
	JiangGuo uint32 `protobuf:"varint,7,req,name=JiangGuo,json=jiangGuo" json:"JiangGuo"`
	SceneID  uint32 `protobuf:"varint,8,req,name=SceneID,json=sceneID" json:"SceneID"`
	PassIcon string `protobuf:"bytes,9,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
}

func (m *MatchData) Reset()                    { *m = MatchData{} }
func (m *MatchData) String() string            { return proto.CompactTextString(m) }
func (*MatchData) ProtoMessage()               {}
func (*MatchData) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{20} }

func (m *MatchData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *MatchData) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *MatchData) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MatchData) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *MatchData) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *MatchData) GetAnimalID() uint32 {
	if m != nil {
		return m.AnimalID
	}
	return 0
}

func (m *MatchData) GetJiangGuo() uint32 {
	if m != nil {
		return m.JiangGuo
	}
	return 0
}

func (m *MatchData) GetSceneID() uint32 {
	if m != nil {
		return m.SceneID
	}
	return 0
}

func (m *MatchData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

// 比赛列表
type MatchDataList struct {
	Datas []*MatchData `protobuf:"bytes,1,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *MatchDataList) Reset()                    { *m = MatchDataList{} }
func (m *MatchDataList) String() string            { return proto.CompactTextString(m) }
func (*MatchDataList) ProtoMessage()               {}
func (*MatchDataList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{21} }

func (m *MatchDataList) GetDatas() []*MatchData {
	if m != nil {
		return m.Datas
	}
	return nil
}

// 荣誉数据
type HonorData struct {
	Season   uint32 `protobuf:"varint,1,req,name=Season,json=season" json:"Season"`
	Level    uint32 `protobuf:"varint,3,req,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,4,req,name=Scores,json=scores" json:"Scores"`
	MRound   uint32 `protobuf:"varint,5,opt,name=MRound,json=mRound" json:"MRound"`
	KillNum  uint32 `protobuf:"varint,6,opt,name=KillNum,json=killNum" json:"KillNum"`
	FirstCnt uint32 `protobuf:"varint,7,opt,name=FirstCnt,json=firstCnt" json:"FirstCnt"`
	MaxExp   uint32 `protobuf:"varint,8,opt,name=MaxExp,json=maxExp" json:"MaxExp"`
	SceneID  uint32 `protobuf:"varint,9,opt,name=SceneID,json=sceneID" json:"SceneID"`
	AnimalID uint32 `protobuf:"varint,10,opt,name=AnimalID,json=animalID" json:"AnimalID"`
	Fans     uint32 `protobuf:"varint,11,opt,name=Fans,json=fans" json:"Fans"`
}

func (m *HonorData) Reset()                    { *m = HonorData{} }
func (m *HonorData) String() string            { return proto.CompactTextString(m) }
func (*HonorData) ProtoMessage()               {}
func (*HonorData) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{22} }

func (m *HonorData) GetSeason() uint32 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *HonorData) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HonorData) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *HonorData) GetMRound() uint32 {
	if m != nil {
		return m.MRound
	}
	return 0
}

func (m *HonorData) GetKillNum() uint32 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

func (m *HonorData) GetFirstCnt() uint32 {
	if m != nil {
		return m.FirstCnt
	}
	return 0
}

func (m *HonorData) GetMaxExp() uint32 {
	if m != nil {
		return m.MaxExp
	}
	return 0
}

func (m *HonorData) GetSceneID() uint32 {
	if m != nil {
		return m.SceneID
	}
	return 0
}

func (m *HonorData) GetAnimalID() uint32 {
	if m != nil {
		return m.AnimalID
	}
	return 0
}

func (m *HonorData) GetFans() uint32 {
	if m != nil {
		return m.Fans
	}
	return 0
}

// 荣誉列表
type HonorDataList struct {
	Datas []*HonorData `protobuf:"bytes,1,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *HonorDataList) Reset()                    { *m = HonorDataList{} }
func (m *HonorDataList) String() string            { return proto.CompactTextString(m) }
func (*HonorDataList) ProtoMessage()               {}
func (*HonorDataList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{23} }

func (m *HonorDataList) GetDatas() []*HonorData {
	if m != nil {
		return m.Datas
	}
	return nil
}

// 奖励信息
type AwardInfo struct {
	ItemId uint32 `protobuf:"varint,1,req,name=ItemId,json=itemId" json:"ItemId"`
	Num    uint32 `protobuf:"varint,2,req,name=Num,json=num" json:"Num"`
}

func (m *AwardInfo) Reset()                    { *m = AwardInfo{} }
func (m *AwardInfo) String() string            { return proto.CompactTextString(m) }
func (*AwardInfo) ProtoMessage()               {}
func (*AwardInfo) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{24} }

func (m *AwardInfo) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *AwardInfo) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type UserInfo struct {
	Id       uint64 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,opt,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,3,opt,name=Sex,json=sex" json:"Sex"`
	PassIcon string `protobuf:"bytes,4,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Icon     uint32 `protobuf:"varint,5,opt,name=Icon,json=icon" json:"Icon"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{25} }

func (m *UserInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UserInfo) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserInfo) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *UserInfo) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

// 好友邮件数据
type FriMailData struct {
	MailId     string       `protobuf:"bytes,1,req,name=MailId,json=mailId" json:"MailId"`
	Type       uint32       `protobuf:"varint,2,req,name=Type,json=type" json:"Type"`
	Title      string       `protobuf:"bytes,3,req,name=Title,json=title" json:"Title"`
	Content    string       `protobuf:"bytes,4,req,name=Content,json=content" json:"Content"`
	FromDetail *UserInfo    `protobuf:"bytes,5,req,name=FromDetail,json=fromDetail" json:"FromDetail,omitempty"`
	Attr       []*AwardInfo `protobuf:"bytes,6,rep,name=Attr,json=attr" json:"Attr,omitempty"`
	CreateTime uint64       `protobuf:"varint,7,req,name=CreateTime,json=createTime" json:"CreateTime"`
	State      uint32       `protobuf:"varint,8,req,name=State,json=state" json:"State"`
}

func (m *FriMailData) Reset()                    { *m = FriMailData{} }
func (m *FriMailData) String() string            { return proto.CompactTextString(m) }
func (*FriMailData) ProtoMessage()               {}
func (*FriMailData) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{26} }

func (m *FriMailData) GetMailId() string {
	if m != nil {
		return m.MailId
	}
	return ""
}

func (m *FriMailData) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *FriMailData) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FriMailData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *FriMailData) GetFromDetail() *UserInfo {
	if m != nil {
		return m.FromDetail
	}
	return nil
}

func (m *FriMailData) GetAttr() []*AwardInfo {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *FriMailData) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *FriMailData) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 系统邮件数据
type SysMailData struct {
	MailId     string       `protobuf:"bytes,1,req,name=MailId,json=mailId" json:"MailId"`
	Type       uint32       `protobuf:"varint,2,req,name=Type,json=type" json:"Type"`
	Title      string       `protobuf:"bytes,3,req,name=Title,json=title" json:"Title"`
	Content    string       `protobuf:"bytes,4,req,name=Content,json=content" json:"Content"`
	Attr       []*AwardInfo `protobuf:"bytes,5,rep,name=Attr,json=attr" json:"Attr,omitempty"`
	CreateTime uint64       `protobuf:"varint,6,req,name=CreateTime,json=createTime" json:"CreateTime"`
	State      uint32       `protobuf:"varint,7,req,name=State,json=state" json:"State"`
}

func (m *SysMailData) Reset()                    { *m = SysMailData{} }
func (m *SysMailData) String() string            { return proto.CompactTextString(m) }
func (*SysMailData) ProtoMessage()               {}
func (*SysMailData) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{27} }

func (m *SysMailData) GetMailId() string {
	if m != nil {
		return m.MailId
	}
	return ""
}

func (m *SysMailData) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SysMailData) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SysMailData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SysMailData) GetAttr() []*AwardInfo {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SysMailData) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SysMailData) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 索要消息
type ReqMailData struct {
	MailId     string    `protobuf:"bytes,1,req,name=MailId,json=mailId" json:"MailId"`
	Type       uint32    `protobuf:"varint,2,req,name=Type,json=type" json:"Type"`
	FromDetail *UserInfo `protobuf:"bytes,3,req,name=FromDetail,json=fromDetail" json:"FromDetail,omitempty"`
	State      uint32    `protobuf:"varint,4,req,name=State,json=state" json:"State"`
	ItemId     uint32    `protobuf:"varint,5,req,name=ItemId,json=itemId" json:"ItemId"`
	RespState  uint32    `protobuf:"varint,6,req,name=RespState,json=respState" json:"RespState"`
	CreateTime uint64    `protobuf:"varint,7,req,name=CreateTime,json=createTime" json:"CreateTime"`
}

func (m *ReqMailData) Reset()                    { *m = ReqMailData{} }
func (m *ReqMailData) String() string            { return proto.CompactTextString(m) }
func (*ReqMailData) ProtoMessage()               {}
func (*ReqMailData) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{28} }

func (m *ReqMailData) GetMailId() string {
	if m != nil {
		return m.MailId
	}
	return ""
}

func (m *ReqMailData) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqMailData) GetFromDetail() *UserInfo {
	if m != nil {
		return m.FromDetail
	}
	return nil
}

func (m *ReqMailData) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ReqMailData) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ReqMailData) GetRespState() uint32 {
	if m != nil {
		return m.RespState
	}
	return 0
}

func (m *ReqMailData) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

// 返回关系统计和红点 /msg?c=RelationStat&u=玩家id
type RetRelationStat struct {
	FollowNum     uint32         `protobuf:"varint,1,req,name=FollowNum,json=followNum" json:"FollowNum"`
	FollowAddNum  uint32         `protobuf:"varint,2,req,name=FollowAddNum,json=followAddNum" json:"FollowAddNum"`
	FansNum       uint32         `protobuf:"varint,3,req,name=FansNum,json=fansNum" json:"FansNum"`
	FansAddNum    uint32         `protobuf:"varint,4,req,name=FansAddNum,json=fansAddNum" json:"FansAddNum"`
	BlackNum      uint32         `protobuf:"varint,5,req,name=BlackNum,json=blackNum" json:"BlackNum"`
	BlackAddNum   uint32         `protobuf:"varint,6,req,name=BlackAddNum,json=blackAddNum" json:"BlackAddNum"`
	StarNum       uint32         `protobuf:"varint,7,req,name=StarNum,json=starNum" json:"StarNum"`
	StarAddNum    uint32         `protobuf:"varint,8,req,name=StarAddNum,json=starAddNum" json:"StarAddNum"`
	MsgAddNum     uint32         `protobuf:"varint,9,opt,name=MsgAddNum,json=msgAddNum" json:"MsgAddNum"`
	BansNum       uint32         `protobuf:"varint,10,opt,name=BansNum,json=bansNum" json:"BansNum"`
	BansAddNum    uint32         `protobuf:"varint,11,opt,name=BansAddNum,json=bansAddNum" json:"BansAddNum"`
	FriendNum     uint32         `protobuf:"varint,12,opt,name=FriendNum,json=friendNum" json:"FriendNum"`
	SnsMsg        *SnsDynamicMsg `protobuf:"bytes,13,opt,name=SnsMsg,json=snsMsg" json:"SnsMsg,omitempty"`
	Reward        uint32         `protobuf:"varint,15,opt,name=Reward,json=reward" json:"Reward"`
	NewLeaderFlag uint32         `protobuf:"varint,16,opt,name=NewLeaderFlag,json=newLeaderFlag" json:"NewLeaderFlag"`
}

func (m *RetRelationStat) Reset()                    { *m = RetRelationStat{} }
func (m *RetRelationStat) String() string            { return proto.CompactTextString(m) }
func (*RetRelationStat) ProtoMessage()               {}
func (*RetRelationStat) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{29} }

func (m *RetRelationStat) GetFollowNum() uint32 {
	if m != nil {
		return m.FollowNum
	}
	return 0
}

func (m *RetRelationStat) GetFollowAddNum() uint32 {
	if m != nil {
		return m.FollowAddNum
	}
	return 0
}

func (m *RetRelationStat) GetFansNum() uint32 {
	if m != nil {
		return m.FansNum
	}
	return 0
}

func (m *RetRelationStat) GetFansAddNum() uint32 {
	if m != nil {
		return m.FansAddNum
	}
	return 0
}

func (m *RetRelationStat) GetBlackNum() uint32 {
	if m != nil {
		return m.BlackNum
	}
	return 0
}

func (m *RetRelationStat) GetBlackAddNum() uint32 {
	if m != nil {
		return m.BlackAddNum
	}
	return 0
}

func (m *RetRelationStat) GetStarNum() uint32 {
	if m != nil {
		return m.StarNum
	}
	return 0
}

func (m *RetRelationStat) GetStarAddNum() uint32 {
	if m != nil {
		return m.StarAddNum
	}
	return 0
}

func (m *RetRelationStat) GetMsgAddNum() uint32 {
	if m != nil {
		return m.MsgAddNum
	}
	return 0
}

func (m *RetRelationStat) GetBansNum() uint32 {
	if m != nil {
		return m.BansNum
	}
	return 0
}

func (m *RetRelationStat) GetBansAddNum() uint32 {
	if m != nil {
		return m.BansAddNum
	}
	return 0
}

func (m *RetRelationStat) GetFriendNum() uint32 {
	if m != nil {
		return m.FriendNum
	}
	return 0
}

func (m *RetRelationStat) GetSnsMsg() *SnsDynamicMsg {
	if m != nil {
		return m.SnsMsg
	}
	return nil
}

func (m *RetRelationStat) GetReward() uint32 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *RetRelationStat) GetNewLeaderFlag() uint32 {
	if m != nil {
		return m.NewLeaderFlag
	}
	return 0
}

type SnsDynamicMsg struct {
	LoveNum      uint32 `protobuf:"varint,1,opt,name=LoveNum,json=loveNum" json:"LoveNum"`
	FollowNum    uint32 `protobuf:"varint,2,opt,name=FollowNum,json=followNum" json:"FollowNum"`
	LeaveMsgNum  uint32 `protobuf:"varint,3,opt,name=LeaveMsgNum,json=leaveMsgNum" json:"LeaveMsgNum"`
	StarPhoneNum uint32 `protobuf:"varint,4,opt,name=StarPhoneNum,json=starPhoneNum" json:"StarPhoneNum"`
	MsgReplyNum  uint32 `protobuf:"varint,5,opt,name=MsgReplyNum,json=msgReplyNum" json:"MsgReplyNum"`
}

func (m *SnsDynamicMsg) Reset()                    { *m = SnsDynamicMsg{} }
func (m *SnsDynamicMsg) String() string            { return proto.CompactTextString(m) }
func (*SnsDynamicMsg) ProtoMessage()               {}
func (*SnsDynamicMsg) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{30} }

func (m *SnsDynamicMsg) GetLoveNum() uint32 {
	if m != nil {
		return m.LoveNum
	}
	return 0
}

func (m *SnsDynamicMsg) GetFollowNum() uint32 {
	if m != nil {
		return m.FollowNum
	}
	return 0
}

func (m *SnsDynamicMsg) GetLeaveMsgNum() uint32 {
	if m != nil {
		return m.LeaveMsgNum
	}
	return 0
}

func (m *SnsDynamicMsg) GetStarPhoneNum() uint32 {
	if m != nil {
		return m.StarPhoneNum
	}
	return 0
}

func (m *SnsDynamicMsg) GetMsgReplyNum() uint32 {
	if m != nil {
		return m.MsgReplyNum
	}
	return 0
}

// 返回附近的玩家
type RetUser struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	Name     string `protobuf:"bytes,5,opt,name=Name,json=name" json:"Name"`
	State    uint32 `protobuf:"varint,6,opt,name=State,json=state" json:"State"`
	IsLeader bool   `protobuf:"varint,7,opt,name=IsLeader,json=isLeader" json:"IsLeader"`
	PassIcon string `protobuf:"bytes,8,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	IsNewbie bool   `protobuf:"varint,9,opt,name=IsNewbie,json=isNewbie" json:"IsNewbie"`
	// required double Distance = 10;//距离
	Longitude float64 `protobuf:"fixed64,10,opt,name=Longitude,json=longitude" json:"Longitude"`
	Latitude  float64 `protobuf:"fixed64,11,opt,name=Latitude,json=latitude" json:"Latitude"`
	Level     uint32  `protobuf:"varint,12,opt,name=Level,json=level" json:"Level"`
	Scores    uint32  `protobuf:"varint,13,opt,name=Scores,json=scores" json:"Scores"`
	RelType   uint32  `protobuf:"varint,14,opt,name=RelType,json=relType" json:"RelType"`
	YaoPlay   uint32  `protobuf:"varint,15,opt,name=YaoPlay,json=yaoPlay" json:"YaoPlay"`
	Distance  uint32  `protobuf:"varint,18,opt,name=Distance,json=distance" json:"Distance"`
	Age       uint32  `protobuf:"varint,19,opt,name=Age,json=age" json:"Age"`
	IsFriend  bool    `protobuf:"varint,20,opt,name=IsFriend,json=isFriend" json:"IsFriend"`
}

func (m *RetUser) Reset()                    { *m = RetUser{} }
func (m *RetUser) String() string            { return proto.CompactTextString(m) }
func (*RetUser) ProtoMessage()               {}
func (*RetUser) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{31} }

func (m *RetUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetUser) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetUser) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func (m *RetUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetUser) GetIsNewbie() bool {
	if m != nil {
		return m.IsNewbie
	}
	return false
}

func (m *RetUser) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *RetUser) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *RetUser) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetUser) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *RetUser) GetRelType() uint32 {
	if m != nil {
		return m.RelType
	}
	return 0
}

func (m *RetUser) GetYaoPlay() uint32 {
	if m != nil {
		return m.YaoPlay
	}
	return 0
}

func (m *RetUser) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RetUser) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RetUser) GetIsFriend() bool {
	if m != nil {
		return m.IsFriend
	}
	return false
}

type UsersNearby struct {
	MyLongi float64    `protobuf:"fixed64,1,req,name=MyLongi,json=myLongi" json:"MyLongi"`
	MyLati  float64    `protobuf:"fixed64,2,req,name=MyLati,json=myLati" json:"MyLati"`
	Users   []*RetUser `protobuf:"bytes,3,rep,name=Users,json=users" json:"Users,omitempty"`
}

func (m *UsersNearby) Reset()                    { *m = UsersNearby{} }
func (m *UsersNearby) String() string            { return proto.CompactTextString(m) }
func (*UsersNearby) ProtoMessage()               {}
func (*UsersNearby) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{32} }

func (m *UsersNearby) GetMyLongi() float64 {
	if m != nil {
		return m.MyLongi
	}
	return 0
}

func (m *UsersNearby) GetMyLati() float64 {
	if m != nil {
		return m.MyLati
	}
	return 0
}

func (m *UsersNearby) GetUsers() []*RetUser {
	if m != nil {
		return m.Users
	}
	return nil
}

// 返回赛季奖励 /msg?c=CheckSeason
type RetCheckSeason struct {
	OldSeason uint32     `protobuf:"varint,1,req,name=OldSeason,json=oldSeason" json:"OldSeason"`
	OldLevel  uint32     `protobuf:"varint,2,req,name=OldLevel,json=oldLevel" json:"OldLevel"`
	OldScores uint32     `protobuf:"varint,3,req,name=OldScores,json=oldScores" json:"OldScores"`
	NewLevel  uint32     `protobuf:"varint,4,req,name=NewLevel,json=newLevel" json:"NewLevel"`
	NewScores uint32     `protobuf:"varint,5,req,name=NewScores,json=newScores" json:"NewScores"`
	Objs      []*ObjNode `protobuf:"bytes,6,rep,name=Objs,json=objs" json:"Objs,omitempty"`
}

func (m *RetCheckSeason) Reset()                    { *m = RetCheckSeason{} }
func (m *RetCheckSeason) String() string            { return proto.CompactTextString(m) }
func (*RetCheckSeason) ProtoMessage()               {}
func (*RetCheckSeason) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{33} }

func (m *RetCheckSeason) GetOldSeason() uint32 {
	if m != nil {
		return m.OldSeason
	}
	return 0
}

func (m *RetCheckSeason) GetOldLevel() uint32 {
	if m != nil {
		return m.OldLevel
	}
	return 0
}

func (m *RetCheckSeason) GetOldScores() uint32 {
	if m != nil {
		return m.OldScores
	}
	return 0
}

func (m *RetCheckSeason) GetNewLevel() uint32 {
	if m != nil {
		return m.NewLevel
	}
	return 0
}

func (m *RetCheckSeason) GetNewScores() uint32 {
	if m != nil {
		return m.NewScores
	}
	return 0
}

func (m *RetCheckSeason) GetObjs() []*ObjNode {
	if m != nil {
		return m.Objs
	}
	return nil
}

// 增加黑名单 /msg?c=AddBanList&toid=用户ID&admin=123 如果admin不为空则超管增加黑名单
type RetBanList struct {
	Ret uint32 `protobuf:"varint,1,opt,name=Ret,json=ret" json:"Ret"`
	Uid uint64 `protobuf:"varint,2,opt,name=Uid,json=uid" json:"Uid"`
}

func (m *RetBanList) Reset()                    { *m = RetBanList{} }
func (m *RetBanList) String() string            { return proto.CompactTextString(m) }
func (*RetBanList) ProtoMessage()               {}
func (*RetBanList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{34} }

func (m *RetBanList) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RetBanList) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 获取黑名单 /msg?c=GetBanList
type RetBanInfoList struct {
	Data []*RetBanInfoList_BanInfoMsg `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *RetBanInfoList) Reset()                    { *m = RetBanInfoList{} }
func (m *RetBanInfoList) String() string            { return proto.CompactTextString(m) }
func (*RetBanInfoList) ProtoMessage()               {}
func (*RetBanInfoList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{35} }

func (m *RetBanInfoList) GetData() []*RetBanInfoList_BanInfoMsg {
	if m != nil {
		return m.Data
	}
	return nil
}

type RetBanInfoList_BanInfoMsg struct {
	Id       string `protobuf:"bytes,1,req,name=Id,json=id" json:"Id"`
	ToId     uint64 `protobuf:"varint,2,req,name=ToId,json=toId" json:"ToId"`
	Account  string `protobuf:"bytes,3,opt,name=Account,json=account" json:"Account"`
	Sex      uint32 `protobuf:"varint,4,opt,name=Sex,json=sex" json:"Sex"`
	Time     int64  `protobuf:"varint,5,opt,name=Time,json=time" json:"Time"`
	State    uint32 `protobuf:"varint,6,opt,name=State,json=state" json:"State"`
	Icon     uint32 `protobuf:"varint,7,opt,name=Icon,json=icon" json:"Icon"`
	PassIcon string `protobuf:"bytes,8,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Remark   string `protobuf:"bytes,11,opt,name=Remark,json=remark" json:"Remark"`
}

func (m *RetBanInfoList_BanInfoMsg) Reset()         { *m = RetBanInfoList_BanInfoMsg{} }
func (m *RetBanInfoList_BanInfoMsg) String() string { return proto.CompactTextString(m) }
func (*RetBanInfoList_BanInfoMsg) ProtoMessage()    {}
func (*RetBanInfoList_BanInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{35, 0}
}

func (m *RetBanInfoList_BanInfoMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RetBanInfoList_BanInfoMsg) GetToId() uint64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *RetBanInfoList_BanInfoMsg) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetBanInfoList_BanInfoMsg) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetBanInfoList_BanInfoMsg) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RetBanInfoList_BanInfoMsg) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetBanInfoList_BanInfoMsg) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetBanInfoList_BanInfoMsg) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetBanInfoList_BanInfoMsg) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 删除黑名单 /msg?c=DelBanList&toid=用户id&admin=123  如果admin不为空则为超管删除黑名单
type RetDelBanList struct {
	Ret uint32 `protobuf:"varint,1,opt,name=Ret,json=ret" json:"Ret"`
	Uid uint64 `protobuf:"varint,2,opt,name=Uid,json=uid" json:"Uid"`
}

func (m *RetDelBanList) Reset()                    { *m = RetDelBanList{} }
func (m *RetDelBanList) String() string            { return proto.CompactTextString(m) }
func (*RetDelBanList) ProtoMessage()               {}
func (*RetDelBanList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{36} }

func (m *RetDelBanList) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RetDelBanList) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 返回粉丝排行榜 /msg?c=FansNumRank&t=天(1)周(2)月(3)&p=1,10
type RetFansNumRankList struct {
	Players  []*RetFansNumRankList_FansUser `protobuf:"bytes,1,rep,name=Players,json=players" json:"Players,omitempty"`
	SelfInfo *RetFansNumRankList_FansUser   `protobuf:"bytes,2,opt,name=SelfInfo,json=selfInfo" json:"SelfInfo,omitempty"`
}

func (m *RetFansNumRankList) Reset()                    { *m = RetFansNumRankList{} }
func (m *RetFansNumRankList) String() string            { return proto.CompactTextString(m) }
func (*RetFansNumRankList) ProtoMessage()               {}
func (*RetFansNumRankList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{37} }

func (m *RetFansNumRankList) GetPlayers() []*RetFansNumRankList_FansUser {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RetFansNumRankList) GetSelfInfo() *RetFansNumRankList_FansUser {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

type RetFansNumRankList_FansUser struct {
	Rank       uint32 `protobuf:"varint,1,req,name=Rank,json=rank" json:"Rank"`
	Id         uint64 `protobuf:"varint,2,req,name=Id,json=id" json:"Id"`
	Account    string `protobuf:"bytes,3,req,name=Account,json=account" json:"Account"`
	Icon       uint32 `protobuf:"varint,4,req,name=Icon,json=icon" json:"Icon"`
	Sex        uint32 `protobuf:"varint,5,req,name=Sex,json=sex" json:"Sex"`
	IncFanNum  uint32 `protobuf:"varint,6,req,name=IncFanNum,json=incFanNum" json:"IncFanNum"`
	AllFanNum  uint32 `protobuf:"varint,7,req,name=AllFanNum,json=allFanNum" json:"AllFanNum"`
	PassIcon   string `protobuf:"bytes,8,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	RankChange int32  `protobuf:"varint,9,opt,name=RankChange,json=rankChange" json:"RankChange"`
	IsFollow   bool   `protobuf:"varint,10,opt,name=IsFollow,json=isFollow" json:"IsFollow"`
}

func (m *RetFansNumRankList_FansUser) Reset()         { *m = RetFansNumRankList_FansUser{} }
func (m *RetFansNumRankList_FansUser) String() string { return proto.CompactTextString(m) }
func (*RetFansNumRankList_FansUser) ProtoMessage()    {}
func (*RetFansNumRankList_FansUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{37, 0}
}

func (m *RetFansNumRankList_FansUser) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RetFansNumRankList_FansUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetFansNumRankList_FansUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetFansNumRankList_FansUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetFansNumRankList_FansUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetFansNumRankList_FansUser) GetIncFanNum() uint32 {
	if m != nil {
		return m.IncFanNum
	}
	return 0
}

func (m *RetFansNumRankList_FansUser) GetAllFanNum() uint32 {
	if m != nil {
		return m.AllFanNum
	}
	return 0
}

func (m *RetFansNumRankList_FansUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetFansNumRankList_FansUser) GetRankChange() int32 {
	if m != nil {
		return m.RankChange
	}
	return 0
}

func (m *RetFansNumRankList_FansUser) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

// 添加备注 /msg?c=AddRemark&u=玩家id&t=备注
// 请求检查是否需要重连 /msg?c=CheckConnect
type RetCheckConnect struct {
	NeedConn bool   `protobuf:"varint,1,req,name=NeedConn,json=needConn" json:"NeedConn"`
	Model    uint32 `protobuf:"varint,2,opt,name=Model,json=model" json:"Model"`
	ETime    uint32 `protobuf:"varint,3,opt,name=ETime,json=eTime" json:"ETime"`
	RoomId   uint32 `protobuf:"varint,4,opt,name=RoomId,json=roomId" json:"RoomId"`
	Sceneid  uint32 `protobuf:"varint,5,opt,name=Sceneid,json=sceneid" json:"Sceneid"`
}

func (m *RetCheckConnect) Reset()                    { *m = RetCheckConnect{} }
func (m *RetCheckConnect) String() string            { return proto.CompactTextString(m) }
func (*RetCheckConnect) ProtoMessage()               {}
func (*RetCheckConnect) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{38} }

func (m *RetCheckConnect) GetNeedConn() bool {
	if m != nil {
		return m.NeedConn
	}
	return false
}

func (m *RetCheckConnect) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *RetCheckConnect) GetETime() uint32 {
	if m != nil {
		return m.ETime
	}
	return 0
}

func (m *RetCheckConnect) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RetCheckConnect) GetSceneid() uint32 {
	if m != nil {
		return m.Sceneid
	}
	return 0
}

// 返回设置性别
type RetSetSex struct {
	Sex uint32 `protobuf:"varint,1,req,name=sex" json:"sex"`
}

func (m *RetSetSex) Reset()                    { *m = RetSetSex{} }
func (m *RetSetSex) String() string            { return proto.CompactTextString(m) }
func (*RetSetSex) ProtoMessage()               {}
func (*RetSetSex) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{39} }

func (m *RetSetSex) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

// 获取验证码 /msg?c=AuthCode&tel=手机号   注册时用
// 请求验证码 /msg?c=ReqAuthCode&tel=手机号&d=设备号&index=  非注册时用
// 绑定手机 /msg?c=BindTel&a=帐号&p=密码&tel=手机号&code=验证码
// 请求设置账号 /msg?c=SetAccount&a=帐号
// 请求设置密码 /msg?c=SetPasswd&old=密码&new=密码&a=帐号
// 重置密码 /msg?c=ReqResetPassword&d=设备号&tel=手机号&code=验证码&p=密码
// 请求换头象 /msg?c=SetIcon&u=玩家id&i=icon对应的id&p=photoid
// 请求电话是否有被绑定 /msg?c=CheckBindTel&tel=手机号
// 修改年龄 /msg?c=SetAge&a=帐号&newage=年龄
// 修改性别 /msg?c=SetSex&a=帐号&newsex=性别
// 更换绑定手机 /msg?c=ChangeBindTelSubmitCode&tel=手机号&code=验证码
// 更换绑定手机 /msg?c=ChangeBindTelSubmitOk&tel=手机号&code=验证码
// 修改密码 /msg?c=ChangePasswd&old=密码&new=密码&a=帐号
// 检查旧密码 /msg?c=CheckOldPassword&p=密码&a=帐号
type RetResetPassword struct {
	Account string `protobuf:"bytes,1,req,name=Account,json=account" json:"Account"`
}

func (m *RetResetPassword) Reset()                    { *m = RetResetPassword{} }
func (m *RetResetPassword) String() string            { return proto.CompactTextString(m) }
func (*RetResetPassword) ProtoMessage()               {}
func (*RetResetPassword) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{40} }

func (m *RetResetPassword) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// 查看当天和累计获得的奖励个数 /share?type=3&id=
type RetShareObject struct {
	Daynum   uint32 `protobuf:"varint,1,opt,name=daynum" json:"daynum"`
	Totalnum uint32 `protobuf:"varint,2,opt,name=totalnum" json:"totalnum"`
}

func (m *RetShareObject) Reset()                    { *m = RetShareObject{} }
func (m *RetShareObject) String() string            { return proto.CompactTextString(m) }
func (*RetShareObject) ProtoMessage()               {}
func (*RetShareObject) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{41} }

func (m *RetShareObject) GetDaynum() uint32 {
	if m != nil {
		return m.Daynum
	}
	return 0
}

func (m *RetShareObject) GetTotalnum() uint32 {
	if m != nil {
		return m.Totalnum
	}
	return 0
}

// 道具信息
type ObjNode struct {
	Id  uint32 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Num uint32 `protobuf:"varint,2,req,name=Num,json=num" json:"Num"`
}

func (m *ObjNode) Reset()                    { *m = ObjNode{} }
func (m *ObjNode) String() string            { return proto.CompactTextString(m) }
func (*ObjNode) ProtoMessage()               {}
func (*ObjNode) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{42} }

func (m *ObjNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ObjNode) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 请求分数排行榜奖励 /msg?c=ReqScoreNumRankGift
type RetScoreNumRankGift struct {
	Players []*RetScoreNumRankGift_ScoreUser `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (m *RetScoreNumRankGift) Reset()                    { *m = RetScoreNumRankGift{} }
func (m *RetScoreNumRankGift) String() string            { return proto.CompactTextString(m) }
func (*RetScoreNumRankGift) ProtoMessage()               {}
func (*RetScoreNumRankGift) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{43} }

func (m *RetScoreNumRankGift) GetPlayers() []*RetScoreNumRankGift_ScoreUser {
	if m != nil {
		return m.Players
	}
	return nil
}

type RetScoreNumRankGift_ScoreUser struct {
	Id       uint64 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,opt,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,opt,name=Icon,json=icon" json:"Icon"`
	PassIcon string `protobuf:"bytes,4,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Rank     uint32 `protobuf:"varint,5,opt,name=Rank,json=rank" json:"Rank"`
	Score    uint32 `protobuf:"varint,6,opt,name=Score,json=score" json:"Score"`
	IsFollow bool   `protobuf:"varint,7,opt,name=IsFollow,json=isFollow" json:"IsFollow"`
	Kind     uint32 `protobuf:"varint,8,opt,name=Kind,json=kind" json:"Kind"`
	Itemid   uint32 `protobuf:"varint,9,opt,name=itemid" json:"itemid"`
	Itemnum  uint32 `protobuf:"varint,10,opt,name=itemnum" json:"itemnum"`
}

func (m *RetScoreNumRankGift_ScoreUser) Reset()         { *m = RetScoreNumRankGift_ScoreUser{} }
func (m *RetScoreNumRankGift_ScoreUser) String() string { return proto.CompactTextString(m) }
func (*RetScoreNumRankGift_ScoreUser) ProtoMessage()    {}
func (*RetScoreNumRankGift_ScoreUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{43, 0}
}

func (m *RetScoreNumRankGift_ScoreUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetScoreNumRankGift_ScoreUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetScoreNumRankGift_ScoreUser) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetScoreNumRankGift_ScoreUser) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetScoreNumRankGift_ScoreUser) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RetScoreNumRankGift_ScoreUser) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RetScoreNumRankGift_ScoreUser) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

func (m *RetScoreNumRankGift_ScoreUser) GetKind() uint32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *RetScoreNumRankGift_ScoreUser) GetItemid() uint32 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *RetScoreNumRankGift_ScoreUser) GetItemnum() uint32 {
	if m != nil {
		return m.Itemnum
	}
	return 0
}

// 上线通知获得奖励	/msg?c=NotifyMoneyMessage
type RetNotifyMoneyMessage struct {
	Itemid  uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid"`
	Itemnum uint32 `protobuf:"varint,2,opt,name=itemnum" json:"itemnum"`
	Leftnum uint32 `protobuf:"varint,3,opt,name=leftnum" json:"leftnum"`
}

func (m *RetNotifyMoneyMessage) Reset()                    { *m = RetNotifyMoneyMessage{} }
func (m *RetNotifyMoneyMessage) String() string            { return proto.CompactTextString(m) }
func (*RetNotifyMoneyMessage) ProtoMessage()               {}
func (*RetNotifyMoneyMessage) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{44} }

func (m *RetNotifyMoneyMessage) GetItemid() uint32 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *RetNotifyMoneyMessage) GetItemnum() uint32 {
	if m != nil {
		return m.Itemnum
	}
	return 0
}

func (m *RetNotifyMoneyMessage) GetLeftnum() uint32 {
	if m != nil {
		return m.Leftnum
	}
	return 0
}

// 添加图像 /msg?c=AddIcon&iconid=
type RetAddIcon struct {
	Icons []uint32 `protobuf:"varint,1,rep,name=icons" json:"icons,omitempty"`
}

func (m *RetAddIcon) Reset()                    { *m = RetAddIcon{} }
func (m *RetAddIcon) String() string            { return proto.CompactTextString(m) }
func (*RetAddIcon) ProtoMessage()               {}
func (*RetAddIcon) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{45} }

func (m *RetAddIcon) GetIcons() []uint32 {
	if m != nil {
		return m.Icons
	}
	return nil
}

// 查看有哪些图像	/msg?c=GetIcons
type RetGetIcons struct {
	Icons []uint32 `protobuf:"varint,1,rep,name=icons" json:"icons,omitempty"`
}

func (m *RetGetIcons) Reset()                    { *m = RetGetIcons{} }
func (m *RetGetIcons) String() string            { return proto.CompactTextString(m) }
func (*RetGetIcons) ProtoMessage()               {}
func (*RetGetIcons) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{46} }

func (m *RetGetIcons) GetIcons() []uint32 {
	if m != nil {
		return m.Icons
	}
	return nil
}

// 问卷调查 /msg?c=Questionnaire&type=0,1   0查1领取
type RetQuestionnaire struct {
	Itemid   uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid"`
	Itemnum  uint32 `protobuf:"varint,2,opt,name=itemnum" json:"itemnum"`
	Complete bool   `protobuf:"varint,3,opt,name=complete" json:"complete"`
}

func (m *RetQuestionnaire) Reset()                    { *m = RetQuestionnaire{} }
func (m *RetQuestionnaire) String() string            { return proto.CompactTextString(m) }
func (*RetQuestionnaire) ProtoMessage()               {}
func (*RetQuestionnaire) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{47} }

func (m *RetQuestionnaire) GetItemid() uint32 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *RetQuestionnaire) GetItemnum() uint32 {
	if m != nil {
		return m.Itemnum
	}
	return 0
}

func (m *RetQuestionnaire) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

// 近期队友列表 /msg?c=PreTeamMemList
type RetPreTeamMemList struct {
	TeamMems []*RetPreTeamMemList_TeamMem `protobuf:"bytes,1,rep,name=TeamMems,json=teamMems" json:"TeamMems,omitempty"`
}

func (m *RetPreTeamMemList) Reset()                    { *m = RetPreTeamMemList{} }
func (m *RetPreTeamMemList) String() string            { return proto.CompactTextString(m) }
func (*RetPreTeamMemList) ProtoMessage()               {}
func (*RetPreTeamMemList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{48} }

func (m *RetPreTeamMemList) GetTeamMems() []*RetPreTeamMemList_TeamMem {
	if m != nil {
		return m.TeamMems
	}
	return nil
}

type RetPreTeamMemList_TeamMem struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	State    uint32 `protobuf:"varint,5,req,name=State,json=state" json:"State"`
	PassIcon string `protobuf:"bytes,6,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Level    uint32 `protobuf:"varint,7,opt,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,8,opt,name=Scores,json=scores" json:"Scores"`
}

func (m *RetPreTeamMemList_TeamMem) Reset()         { *m = RetPreTeamMemList_TeamMem{} }
func (m *RetPreTeamMemList_TeamMem) String() string { return proto.CompactTextString(m) }
func (*RetPreTeamMemList_TeamMem) ProtoMessage()    {}
func (*RetPreTeamMemList_TeamMem) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{48, 0}
}

func (m *RetPreTeamMemList_TeamMem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetPreTeamMemList_TeamMem) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetPreTeamMemList_TeamMem) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetPreTeamMemList_TeamMem) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetPreTeamMemList_TeamMem) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetPreTeamMemList_TeamMem) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetPreTeamMemList_TeamMem) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetPreTeamMemList_TeamMem) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

// 获取附近邀请 /msg?c=GetInviteNearby&Longitude=12.111&Latitude=23.123&City=上海&CityCode=123456
type RetUsersInviteNearby struct {
	InvMems []*RetUsersInviteNearby_InviteMem `protobuf:"bytes,1,rep,name=InvMems,json=invMems" json:"InvMems,omitempty"`
}

func (m *RetUsersInviteNearby) Reset()                    { *m = RetUsersInviteNearby{} }
func (m *RetUsersInviteNearby) String() string            { return proto.CompactTextString(m) }
func (*RetUsersInviteNearby) ProtoMessage()               {}
func (*RetUsersInviteNearby) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{49} }

func (m *RetUsersInviteNearby) GetInvMems() []*RetUsersInviteNearby_InviteMem {
	if m != nil {
		return m.InvMems
	}
	return nil
}

type RetUsersInviteNearby_InviteMem struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,req,name=Icon,json=icon" json:"Icon"`
	Sex      uint32 `protobuf:"varint,4,req,name=Sex,json=sex" json:"Sex"`
	State    uint32 `protobuf:"varint,5,req,name=State,json=state" json:"State"`
	PassIcon string `protobuf:"bytes,6,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Level    uint32 `protobuf:"varint,7,opt,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,8,opt,name=Scores,json=scores" json:"Scores"`
}

func (m *RetUsersInviteNearby_InviteMem) Reset()         { *m = RetUsersInviteNearby_InviteMem{} }
func (m *RetUsersInviteNearby_InviteMem) String() string { return proto.CompactTextString(m) }
func (*RetUsersInviteNearby_InviteMem) ProtoMessage()    {}
func (*RetUsersInviteNearby_InviteMem) Descriptor() ([]byte, []int) {
	return fileDescriptorPlayer, []int{49, 0}
}

func (m *RetUsersInviteNearby_InviteMem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetUsersInviteNearby_InviteMem) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetUsersInviteNearby_InviteMem) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetUsersInviteNearby_InviteMem) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetUsersInviteNearby_InviteMem) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetUsersInviteNearby_InviteMem) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetUsersInviteNearby_InviteMem) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetUsersInviteNearby_InviteMem) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

// 查看或领取当天的入场券 msg?c=TodayTicketInfo&flag=false, true   false 表示查看  true 表示领取
type RetTodayTicketInfo struct {
	Free bool `protobuf:"varint,1,opt,name=free" json:"free"`
	Exch bool `protobuf:"varint,2,opt,name=exch" json:"exch"`
	Flag bool `protobuf:"varint,3,opt,name=flag" json:"flag"`
}

func (m *RetTodayTicketInfo) Reset()                    { *m = RetTodayTicketInfo{} }
func (m *RetTodayTicketInfo) String() string            { return proto.CompactTextString(m) }
func (*RetTodayTicketInfo) ProtoMessage()               {}
func (*RetTodayTicketInfo) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{50} }

func (m *RetTodayTicketInfo) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *RetTodayTicketInfo) GetExch() bool {
	if m != nil {
		return m.Exch
	}
	return false
}

func (m *RetTodayTicketInfo) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

// 资源信息
type MsgResInfo struct {
	Baseid uint32 `protobuf:"varint,1,req,name=Baseid,json=baseid" json:"Baseid"`
	Num    uint32 `protobuf:"varint,2,req,name=Num,json=num" json:"Num"`
}

func (m *MsgResInfo) Reset()                    { *m = MsgResInfo{} }
func (m *MsgResInfo) String() string            { return proto.CompactTextString(m) }
func (*MsgResInfo) ProtoMessage()               {}
func (*MsgResInfo) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{51} }

func (m *MsgResInfo) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *MsgResInfo) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 兑换激活码msg?c=ExchangeActCode&actcode=
type RetExchangeActCode struct {
	Ret bool `protobuf:"varint,1,opt,name=Ret,json=ret" json:"Ret"`
}

func (m *RetExchangeActCode) Reset()                    { *m = RetExchangeActCode{} }
func (m *RetExchangeActCode) String() string            { return proto.CompactTextString(m) }
func (*RetExchangeActCode) ProtoMessage()               {}
func (*RetExchangeActCode) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{52} }

func (m *RetExchangeActCode) GetRet() bool {
	if m != nil {
		return m.Ret
	}
	return false
}

// 绑定渠道msg?c=BindChannl&openid=&acc=
type RetBindChannl struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code"`
}

func (m *RetBindChannl) Reset()                    { *m = RetBindChannl{} }
func (m *RetBindChannl) String() string            { return proto.CompactTextString(m) }
func (*RetBindChannl) ProtoMessage()               {}
func (*RetBindChannl) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{53} }

func (m *RetBindChannl) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// 检查openid是否有绑定 msg?c=CheckBindChannl&openid
type RetCheckBindChannl struct {
	Acc string `protobuf:"bytes,1,opt,name=acc" json:"acc"`
}

func (m *RetCheckBindChannl) Reset()                    { *m = RetCheckBindChannl{} }
func (m *RetCheckBindChannl) String() string            { return proto.CompactTextString(m) }
func (*RetCheckBindChannl) ProtoMessage()               {}
func (*RetCheckBindChannl) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{54} }

func (m *RetCheckBindChannl) GetAcc() string {
	if m != nil {
		return m.Acc
	}
	return ""
}

type RetCheckAccPwBind struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code"`
}

func (m *RetCheckAccPwBind) Reset()                    { *m = RetCheckAccPwBind{} }
func (m *RetCheckAccPwBind) String() string            { return proto.CompactTextString(m) }
func (*RetCheckAccPwBind) ProtoMessage()               {}
func (*RetCheckAccPwBind) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{55} }

func (m *RetCheckAccPwBind) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// ////////////////邮件相关
// 邮件列表msg?c=MailList&t=1,2,3 -- 1 好友 2 系统 3 索求
type RetMsgFriMailList struct {
	Datas []*FriMailData `protobuf:"bytes,1,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *RetMsgFriMailList) Reset()                    { *m = RetMsgFriMailList{} }
func (m *RetMsgFriMailList) String() string            { return proto.CompactTextString(m) }
func (*RetMsgFriMailList) ProtoMessage()               {}
func (*RetMsgFriMailList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{56} }

func (m *RetMsgFriMailList) GetDatas() []*FriMailData {
	if m != nil {
		return m.Datas
	}
	return nil
}

// 系统邮件列表
type RetMsgSysMailList struct {
	Datas []*SysMailData `protobuf:"bytes,1,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *RetMsgSysMailList) Reset()                    { *m = RetMsgSysMailList{} }
func (m *RetMsgSysMailList) String() string            { return proto.CompactTextString(m) }
func (*RetMsgSysMailList) ProtoMessage()               {}
func (*RetMsgSysMailList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{57} }

func (m *RetMsgSysMailList) GetDatas() []*SysMailData {
	if m != nil {
		return m.Datas
	}
	return nil
}

// 索要消息
type RetMsgReqMailList struct {
	Datas []*ReqMailData `protobuf:"bytes,1,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *RetMsgReqMailList) Reset()                    { *m = RetMsgReqMailList{} }
func (m *RetMsgReqMailList) String() string            { return proto.CompactTextString(m) }
func (*RetMsgReqMailList) ProtoMessage()               {}
func (*RetMsgReqMailList) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{58} }

func (m *RetMsgReqMailList) GetDatas() []*ReqMailData {
	if m != nil {
		return m.Datas
	}
	return nil
}

// 读取邮件msg?c=ReadMail&m=55623&t=1,2,3 -- 1 好友 2 系统 3 索求
type RetMsgReadMail struct {
	Ret    uint32 `protobuf:"varint,1,req,name=Ret,json=ret" json:"Ret"`
	Mailid string `protobuf:"bytes,2,req,name=Mailid,json=mailid" json:"Mailid"`
}

func (m *RetMsgReadMail) Reset()                    { *m = RetMsgReadMail{} }
func (m *RetMsgReadMail) String() string            { return proto.CompactTextString(m) }
func (*RetMsgReadMail) ProtoMessage()               {}
func (*RetMsgReadMail) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{59} }

func (m *RetMsgReadMail) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RetMsgReadMail) GetMailid() string {
	if m != nil {
		return m.Mailid
	}
	return ""
}

// 删除邮件msg?c=DelMail&m=55623	//系统邮件
// 删除所有已读系统邮件信息 msg?c=DelAllSysMail
// 删除所有的索要邮件 msg?c=DelAllReqMail
type RetMsgDelMail struct {
	Ret uint32 `protobuf:"varint,1,req,name=Ret,json=ret" json:"Ret"`
}

func (m *RetMsgDelMail) Reset()                    { *m = RetMsgDelMail{} }
func (m *RetMsgDelMail) String() string            { return proto.CompactTextString(m) }
func (*RetMsgDelMail) ProtoMessage()               {}
func (*RetMsgDelMail) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{60} }

func (m *RetMsgDelMail) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

// 返回邮件列表
type MailIdInfo struct {
	Id string `protobuf:"bytes,1,req,name=Id,json=id" json:"Id"`
}

func (m *MailIdInfo) Reset()                    { *m = MailIdInfo{} }
func (m *MailIdInfo) String() string            { return proto.CompactTextString(m) }
func (*MailIdInfo) ProtoMessage()               {}
func (*MailIdInfo) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{61} }

func (m *MailIdInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// 领取邮件msg?c=RecvMail&m=55623&t=1,2 -- 1 好友 2 系统
// 快速领取好友邮件 msg?c=QuickRecvMail&t=1
// 快速领取系统邮件附件msg?c=QuickRecvMail&t=2
type RetMsgRecvMail struct {
	Ret     uint32        `protobuf:"varint,1,req,name=Ret,json=ret" json:"Ret"`
	MailIds []*MailIdInfo `protobuf:"bytes,2,rep,name=MailIds,json=mailIds" json:"MailIds,omitempty"`
}

func (m *RetMsgRecvMail) Reset()                    { *m = RetMsgRecvMail{} }
func (m *RetMsgRecvMail) String() string            { return proto.CompactTextString(m) }
func (*RetMsgRecvMail) ProtoMessage()               {}
func (*RetMsgRecvMail) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{62} }

func (m *RetMsgRecvMail) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RetMsgRecvMail) GetMailIds() []*MailIdInfo {
	if m != nil {
		return m.MailIds
	}
	return nil
}

// 更新索要邮件的反馈状态 msg?c=UpdateReqMail&m=56721&t=1 取消 2支付
type RetMsgUpdateReqMail struct {
	Ret uint32 `protobuf:"varint,1,req,name=Ret,json=ret" json:"Ret"`
}

func (m *RetMsgUpdateReqMail) Reset()                    { *m = RetMsgUpdateReqMail{} }
func (m *RetMsgUpdateReqMail) String() string            { return proto.CompactTextString(m) }
func (*RetMsgUpdateReqMail) ProtoMessage()               {}
func (*RetMsgUpdateReqMail) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{63} }

func (m *RetMsgUpdateReqMail) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

// msg?c=GiftGiving&u=赠送玩家id&a=赠送玩家账号&itemid=赠送的道具id
type RetGiftGiving struct {
	Ret    uint32 `protobuf:"varint,2,req,name=ret" json:"ret"`
	Itemid uint32 `protobuf:"varint,1,req,name=itemid" json:"itemid"`
}

func (m *RetGiftGiving) Reset()                    { *m = RetGiftGiving{} }
func (m *RetGiftGiving) String() string            { return proto.CompactTextString(m) }
func (*RetGiftGiving) ProtoMessage()               {}
func (*RetGiftGiving) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{64} }

func (m *RetGiftGiving) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RetGiftGiving) GetItemid() uint32 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

// msg?c=AskingGift&u=索要玩家id&a=索要玩家账号&itemid=索要的道具id
type RetAskingGift struct {
	Ret uint32 `protobuf:"varint,2,req,name=ret" json:"ret"`
}

func (m *RetAskingGift) Reset()                    { *m = RetAskingGift{} }
func (m *RetAskingGift) String() string            { return proto.CompactTextString(m) }
func (*RetAskingGift) ProtoMessage()               {}
func (*RetAskingGift) Descriptor() ([]byte, []int) { return fileDescriptorPlayer, []int{65} }

func (m *RetAskingGift) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func init() {
	proto.RegisterType((*RetLoginMsg)(nil), "usercmd.RetLoginMsg")
	proto.RegisterType((*RetGateAddr)(nil), "usercmd.RetGateAddr")
	proto.RegisterType((*RetIntoFRoom)(nil), "usercmd.RetIntoFRoom")
	proto.RegisterType((*RetErrorMsg)(nil), "usercmd.RetErrorMsg")
	proto.RegisterType((*RetDetailInfo)(nil), "usercmd.RetDetailInfo")
	proto.RegisterType((*ReqCheckTeam)(nil), "usercmd.ReqCheckTeam")
	proto.RegisterType((*RetGLevelRankList)(nil), "usercmd.RetGLevelRankList")
	proto.RegisterType((*RetGLevelRankList_LevelUser)(nil), "usercmd.RetGLevelRankList.LevelUser")
	proto.RegisterType((*RetSearchUser)(nil), "usercmd.RetSearchUser")
	proto.RegisterType((*RetSearchUsers)(nil), "usercmd.RetSearchUsers")
	proto.RegisterType((*RetFriendList)(nil), "usercmd.RetFriendList")
	proto.RegisterType((*RetFriendList_FriendData)(nil), "usercmd.RetFriendList.FriendData")
	proto.RegisterType((*BatchAddFollowRet)(nil), "usercmd.BatchAddFollowRet")
	proto.RegisterType((*BatchAddFollowRet_RetAddFollow)(nil), "usercmd.BatchAddFollowRet.RetAddFollow")
	proto.RegisterType((*RetAddFollow)(nil), "usercmd.RetAddFollow")
	proto.RegisterType((*RetUnFollow)(nil), "usercmd.RetUnFollow")
	proto.RegisterType((*RelationUser)(nil), "usercmd.RelationUser")
	proto.RegisterType((*RetFollowList)(nil), "usercmd.RetFollowList")
	proto.RegisterType((*RetFansList)(nil), "usercmd.RetFansList")
	proto.RegisterType((*RetFansList_FanUser)(nil), "usercmd.RetFansList.FanUser")
	proto.RegisterType((*RetCheckFollows)(nil), "usercmd.RetCheckFollows")
	proto.RegisterType((*RetCheckFollows_FollowFlag)(nil), "usercmd.RetCheckFollows.FollowFlag")
	proto.RegisterType((*RetBlackList)(nil), "usercmd.RetBlackList")
	proto.RegisterType((*RetBlackList_BlackUser)(nil), "usercmd.RetBlackList.BlackUser")
	proto.RegisterType((*BlacksData)(nil), "usercmd.BlacksData")
	proto.RegisterType((*BlacksDataList)(nil), "usercmd.BlacksDataList")
	proto.RegisterType((*MatchData)(nil), "usercmd.MatchData")
	proto.RegisterType((*MatchDataList)(nil), "usercmd.MatchDataList")
	proto.RegisterType((*HonorData)(nil), "usercmd.HonorData")
	proto.RegisterType((*HonorDataList)(nil), "usercmd.HonorDataList")
	proto.RegisterType((*AwardInfo)(nil), "usercmd.AwardInfo")
	proto.RegisterType((*UserInfo)(nil), "usercmd.UserInfo")
	proto.RegisterType((*FriMailData)(nil), "usercmd.FriMailData")
	proto.RegisterType((*SysMailData)(nil), "usercmd.SysMailData")
	proto.RegisterType((*ReqMailData)(nil), "usercmd.ReqMailData")
	proto.RegisterType((*RetRelationStat)(nil), "usercmd.RetRelationStat")
	proto.RegisterType((*SnsDynamicMsg)(nil), "usercmd.SnsDynamicMsg")
	proto.RegisterType((*RetUser)(nil), "usercmd.RetUser")
	proto.RegisterType((*UsersNearby)(nil), "usercmd.UsersNearby")
	proto.RegisterType((*RetCheckSeason)(nil), "usercmd.RetCheckSeason")
	proto.RegisterType((*RetBanList)(nil), "usercmd.RetBanList")
	proto.RegisterType((*RetBanInfoList)(nil), "usercmd.RetBanInfoList")
	proto.RegisterType((*RetBanInfoList_BanInfoMsg)(nil), "usercmd.RetBanInfoList.BanInfoMsg")
	proto.RegisterType((*RetDelBanList)(nil), "usercmd.RetDelBanList")
	proto.RegisterType((*RetFansNumRankList)(nil), "usercmd.RetFansNumRankList")
	proto.RegisterType((*RetFansNumRankList_FansUser)(nil), "usercmd.RetFansNumRankList.FansUser")
	proto.RegisterType((*RetCheckConnect)(nil), "usercmd.RetCheckConnect")
	proto.RegisterType((*RetSetSex)(nil), "usercmd.RetSetSex")
	proto.RegisterType((*RetResetPassword)(nil), "usercmd.RetResetPassword")
	proto.RegisterType((*RetShareObject)(nil), "usercmd.RetShareObject")
	proto.RegisterType((*ObjNode)(nil), "usercmd.ObjNode")
	proto.RegisterType((*RetScoreNumRankGift)(nil), "usercmd.RetScoreNumRankGift")
	proto.RegisterType((*RetScoreNumRankGift_ScoreUser)(nil), "usercmd.RetScoreNumRankGift.ScoreUser")
	proto.RegisterType((*RetNotifyMoneyMessage)(nil), "usercmd.RetNotifyMoneyMessage")
	proto.RegisterType((*RetAddIcon)(nil), "usercmd.RetAddIcon")
	proto.RegisterType((*RetGetIcons)(nil), "usercmd.RetGetIcons")
	proto.RegisterType((*RetQuestionnaire)(nil), "usercmd.RetQuestionnaire")
	proto.RegisterType((*RetPreTeamMemList)(nil), "usercmd.RetPreTeamMemList")
	proto.RegisterType((*RetPreTeamMemList_TeamMem)(nil), "usercmd.RetPreTeamMemList.TeamMem")
	proto.RegisterType((*RetUsersInviteNearby)(nil), "usercmd.RetUsersInviteNearby")
	proto.RegisterType((*RetUsersInviteNearby_InviteMem)(nil), "usercmd.RetUsersInviteNearby.InviteMem")
	proto.RegisterType((*RetTodayTicketInfo)(nil), "usercmd.RetTodayTicketInfo")
	proto.RegisterType((*MsgResInfo)(nil), "usercmd.MsgResInfo")
	proto.RegisterType((*RetExchangeActCode)(nil), "usercmd.RetExchangeActCode")
	proto.RegisterType((*RetBindChannl)(nil), "usercmd.RetBindChannl")
	proto.RegisterType((*RetCheckBindChannl)(nil), "usercmd.RetCheckBindChannl")
	proto.RegisterType((*RetCheckAccPwBind)(nil), "usercmd.RetCheckAccPwBind")
	proto.RegisterType((*RetMsgFriMailList)(nil), "usercmd.RetMsgFriMailList")
	proto.RegisterType((*RetMsgSysMailList)(nil), "usercmd.RetMsgSysMailList")
	proto.RegisterType((*RetMsgReqMailList)(nil), "usercmd.RetMsgReqMailList")
	proto.RegisterType((*RetMsgReadMail)(nil), "usercmd.RetMsgReadMail")
	proto.RegisterType((*RetMsgDelMail)(nil), "usercmd.RetMsgDelMail")
	proto.RegisterType((*MailIdInfo)(nil), "usercmd.MailIdInfo")
	proto.RegisterType((*RetMsgRecvMail)(nil), "usercmd.RetMsgRecvMail")
	proto.RegisterType((*RetMsgUpdateReqMail)(nil), "usercmd.RetMsgUpdateReqMail")
	proto.RegisterType((*RetGiftGiving)(nil), "usercmd.RetGiftGiving")
	proto.RegisterType((*RetAskingGift)(nil), "usercmd.RetAskingGift")
	proto.RegisterEnum("usercmd.MsgType", MsgType_name, MsgType_value)
}
func (m *RetLoginMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetLoginMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x18
	i++
	if m.IsNewbie {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x22
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Password)))
	i += copy(dAtA[i:], m.Password)
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Location))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.TimeNow))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x52
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Tel)))
	i += copy(dAtA[i:], m.Tel)
	dAtA[i] = 0x58
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x62
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x68
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Channl))
	dAtA[i] = 0x70
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Isregist))
	dAtA[i] = 0x7a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.MaxLevel))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Idcard)))
	i += copy(dAtA[i:], m.Idcard)
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RegTime))
	return i, nil
}

func (m *RetGateAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetGateAddr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	return i, nil
}

func (m *RetIntoFRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetIntoFRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Err))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Addr)))
	i += copy(dAtA[i:], m.Addr)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.UId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Tips))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Priv))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.SceneId))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ticketnum))
	return i, nil
}

func (m *RetErrorMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RetCode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Params))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.JsonParam)))
	i += copy(dAtA[i:], m.JsonParam)
	return i, nil
}

func (m *RetDetailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetDetailInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.HideScores))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.JiangGuo))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.ActCodeFigt))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Speaker))
	return i, nil
}

func (m *ReqCheckTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCheckTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.OpenTime))
	return i, nil
}

func (m *RetGLevelRankList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetGLevelRankList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SelfInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(m.SelfInfo.Size()))
		n1, err := m.SelfInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RetGLevelRankList_LevelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetGLevelRankList_LevelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Stars))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.MaxLevel))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.MaxStars))
	dAtA[i] = 0x60
	i++
	if m.IsFollow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetSearchUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSearchUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x32
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	if m.IsFriend {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Location))
	return i, nil
}

func (m *RetSearchUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSearchUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetFriendList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetFriendList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetFriendList_FriendData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetFriendList_FriendData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x32
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.PrizeCup))
	return i, nil
}

func (m *BatchAddFollowRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchAddFollowRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RetFollow) > 0 {
		for _, msg := range m.RetFollow {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BatchAddFollowRet_RetAddFollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchAddFollowRet_RetAddFollow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.UID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RelType))
	return i, nil
}

func (m *RetAddFollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetAddFollow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Uid))
	return i, nil
}

func (m *RetUnFollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUnFollow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Uid))
	return i, nil
}

func (m *RelationUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x51
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.Longitude))))
	dAtA[i] = 0x59
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.Latitude))))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x68
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x70
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.IsNew))
	dAtA[i] = 0x78
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Follows))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Fans))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RelType))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.OrderId))
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Remark)))
	i += copy(dAtA[i:], m.Remark)
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.IsBan))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FollowTime))
	return i, nil
}

func (m *RetFollowList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetFollowList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.MyLongi))))
	dAtA[i] = 0x19
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.MyLati))))
	return i, nil
}

func (m *RetFansList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetFansList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetFansList_FanUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetFansList_FanUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x32
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.IsNew))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RelType))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Follows))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Fans))
	dAtA[i] = 0x6a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x71
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.MyLongi))))
	dAtA[i] = 0x79
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.MyLati))))
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Remark)))
	i += copy(dAtA[i:], m.Remark)
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Distance))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FollowTime))
	return i, nil
}

func (m *RetCheckFollows) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCheckFollows) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Follows) > 0 {
		for _, msg := range m.Follows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetCheckFollows_FollowFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCheckFollows_FollowFlag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	if m.IsFollow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FType))
	return i, nil
}

func (m *RetBlackList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBlackList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetBlackList_BlackUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBlackList_BlackUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BeEatNum))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RelType))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.IsNew))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.OrderId))
	dAtA[i] = 0x72
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Remark)))
	i += copy(dAtA[i:], m.Remark)
	dAtA[i] = 0x78
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BeEatTime))
	return i, nil
}

func (m *BlacksData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacksData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BeEatNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BeEatTime))
	return i, nil
}

func (m *BlacksDataList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacksDataList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MatchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Score))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.AnimalID))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.JiangGuo))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.SceneID))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	return i, nil
}

func (m *MatchDataList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchDataList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HonorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HonorData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Season))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.MRound))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.KillNum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FirstCnt))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.MaxExp))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.SceneID))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.AnimalID))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Fans))
	return i, nil
}

func (m *HonorDataList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HonorDataList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AwardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.ItemId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x22
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	return i, nil
}

func (m *FriMailData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriMailData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.MailId)))
	i += copy(dAtA[i:], m.MailId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Title)))
	i += copy(dAtA[i:], m.Title)
	dAtA[i] = 0x22
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	if m.FromDetail == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromDetail")
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(m.FromDetail.Size()))
		n2, err := m.FromDetail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Attr) > 0 {
		for _, msg := range m.Attr {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.CreateTime))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *SysMailData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysMailData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.MailId)))
	i += copy(dAtA[i:], m.MailId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Title)))
	i += copy(dAtA[i:], m.Title)
	dAtA[i] = 0x22
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	if len(m.Attr) > 0 {
		for _, msg := range m.Attr {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.CreateTime))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *ReqMailData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMailData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.MailId)))
	i += copy(dAtA[i:], m.MailId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Type))
	if m.FromDetail == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromDetail")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(m.FromDetail.Size()))
		n3, err := m.FromDetail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.ItemId))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RespState))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.CreateTime))
	return i, nil
}

func (m *RetRelationStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRelationStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FollowNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FollowAddNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FansNum))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FansAddNum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BlackNum))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BlackAddNum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.StarNum))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.StarAddNum))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.MsgAddNum))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BansNum))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.BansAddNum))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FriendNum))
	if m.SnsMsg != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(m.SnsMsg.Size()))
		n4, err := m.SnsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	dAtA[i] = 0x78
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Reward))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.NewLeaderFlag))
	return i, nil
}

func (m *SnsDynamicMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnsDynamicMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.LoveNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.FollowNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.LeaveMsgNum))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.StarPhoneNum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.MsgReplyNum))
	return i, nil
}

func (m *RetUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x38
	i++
	if m.IsLeader {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x42
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x48
	i++
	if m.IsNewbie {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x51
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.Longitude))))
	dAtA[i] = 0x59
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.Latitude))))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x68
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x70
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RelType))
	dAtA[i] = 0x78
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.YaoPlay))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Distance))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Age))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	if m.IsFriend {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *UsersNearby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersNearby) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x9
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.MyLongi))))
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Player(dAtA, i, uint64(math.Float64bits(float64(m.MyLati))))
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetCheckSeason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCheckSeason) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.OldSeason))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.OldLevel))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.OldScores))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.NewLevel))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.NewScores))
	if len(m.Objs) > 0 {
		for _, msg := range m.Objs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetBanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBanList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Uid))
	return i, nil
}

func (m *RetBanInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBanInfoList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetBanInfoList_BanInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBanInfoList_BanInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.ToId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x42
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Remark)))
	i += copy(dAtA[i:], m.Remark)
	return i, nil
}

func (m *RetDelBanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetDelBanList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Uid))
	return i, nil
}

func (m *RetFansNumRankList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetFansNumRankList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SelfInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(m.SelfInfo.Size()))
		n5, err := m.SelfInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *RetFansNumRankList_FansUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetFansNumRankList_FansUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.IncFanNum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.AllFanNum))
	dAtA[i] = 0x42
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x48
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RankChange))
	dAtA[i] = 0x50
	i++
	if m.IsFollow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetCheckConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCheckConnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.NeedConn {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.ETime))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.RoomId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sceneid))
	return i, nil
}

func (m *RetSetSex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSetSex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	return i, nil
}

func (m *RetResetPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetResetPassword) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	return i, nil
}

func (m *RetShareObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetShareObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Daynum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Totalnum))
	return i, nil
}

func (m *ObjNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *RetScoreNumRankGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetScoreNumRankGift) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetScoreNumRankGift_ScoreUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetScoreNumRankGift_ScoreUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x22
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Score))
	dAtA[i] = 0x38
	i++
	if m.IsFollow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Kind))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Itemid))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Itemnum))
	return i, nil
}

func (m *RetNotifyMoneyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetNotifyMoneyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Itemid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Itemnum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Leftnum))
	return i, nil
}

func (m *RetAddIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetAddIcon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Icons) > 0 {
		for _, num := range m.Icons {
			dAtA[i] = 0x8
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RetGetIcons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetGetIcons) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Icons) > 0 {
		for _, num := range m.Icons {
			dAtA[i] = 0x8
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RetQuestionnaire) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetQuestionnaire) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Itemid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Itemnum))
	dAtA[i] = 0x18
	i++
	if m.Complete {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetPreTeamMemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetPreTeamMemList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamMems) > 0 {
		for _, msg := range m.TeamMems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetPreTeamMemList_TeamMem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetPreTeamMemList_TeamMem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x32
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Scores))
	return i, nil
}

func (m *RetUsersInviteNearby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUsersInviteNearby) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InvMems) > 0 {
		for _, msg := range m.InvMems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetUsersInviteNearby_InviteMem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUsersInviteNearby_InviteMem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.State))
	dAtA[i] = 0x32
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x38
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Scores))
	return i, nil
}

func (m *RetTodayTicketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTodayTicketInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Free {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	if m.Exch {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x18
	i++
	if m.Flag {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *MsgResInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Baseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *RetExchangeActCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetExchangeActCode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Ret {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetBindChannl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBindChannl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Code))
	return i, nil
}

func (m *RetCheckBindChannl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCheckBindChannl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Acc)))
	i += copy(dAtA[i:], m.Acc)
	return i, nil
}

func (m *RetCheckAccPwBind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetCheckAccPwBind) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Code))
	return i, nil
}

func (m *RetMsgFriMailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMsgFriMailList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetMsgSysMailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMsgSysMailList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetMsgReqMailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMsgReqMailList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetMsgReadMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMsgReadMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Mailid)))
	i += copy(dAtA[i:], m.Mailid)
	return i, nil
}

func (m *RetMsgDelMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMsgDelMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	return i, nil
}

func (m *MailIdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailIdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	return i, nil
}

func (m *RetMsgRecvMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMsgRecvMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	if len(m.MailIds) > 0 {
		for _, msg := range m.MailIds {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPlayer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetMsgUpdateReqMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMsgUpdateReqMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	return i, nil
}

func (m *RetGiftGiving) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetGiftGiving) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Itemid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	return i, nil
}

func (m *RetAskingGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetAskingGift) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintPlayer(dAtA, i, uint64(m.Ret))
	return i, nil
}

func encodeFixed64Player(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Player(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPlayer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RetLoginMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Id))
	n += 2
	l = len(m.Password)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Location))
	n += 1 + sovPlayer(uint64(m.TimeNow))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.Age))
	l = len(m.Tel)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	l = len(m.Nick)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Channl))
	n += 1 + sovPlayer(uint64(m.Isregist))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 2 + sovPlayer(uint64(m.MaxLevel))
	l = len(m.Idcard)
	n += 2 + l + sovPlayer(uint64(l))
	n += 2 + sovPlayer(uint64(m.RegTime))
	return n
}

func (m *RetGateAddr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovPlayer(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *RetIntoFRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Err))
	l = len(m.Addr)
	n += 1 + l + sovPlayer(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.UId))
	n += 1 + sovPlayer(uint64(m.Tips))
	n += 1 + sovPlayer(uint64(m.RoomId))
	n += 1 + sovPlayer(uint64(m.Priv))
	n += 1 + sovPlayer(uint64(m.Model))
	n += 1 + sovPlayer(uint64(m.SceneId))
	n += 1 + sovPlayer(uint64(m.Ticketnum))
	return n
}

func (m *RetErrorMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.RetCode))
	n += 1 + sovPlayer(uint64(m.Params))
	l = len(m.JsonParam)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *RetDetailInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Scores))
	n += 1 + sovPlayer(uint64(m.HideScores))
	n += 2 + sovPlayer(uint64(m.JiangGuo))
	n += 2 + sovPlayer(uint64(m.ActCodeFigt))
	n += 2 + sovPlayer(uint64(m.Speaker))
	return n
}

func (m *ReqCheckTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.OpenTime))
	return n
}

func (m *RetGLevelRankList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func (m *RetGLevelRankList_LevelUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Stars))
	n += 1 + sovPlayer(uint64(m.Rank))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.MaxLevel))
	n += 1 + sovPlayer(uint64(m.MaxStars))
	n += 2
	return n
}

func (m *RetSearchUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.Age))
	n += 1 + sovPlayer(uint64(m.Icon))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 2
	n += 1 + sovPlayer(uint64(m.Location))
	return n
}

func (m *RetSearchUsers) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetFriendList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetFriendList_FriendData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.State))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.PrizeCup))
	return n
}

func (m *BatchAddFollowRet) Size() (n int) {
	var l int
	_ = l
	if len(m.RetFollow) > 0 {
		for _, e := range m.RetFollow {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *BatchAddFollowRet_RetAddFollow) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.UID))
	n += 1 + sovPlayer(uint64(m.RelType))
	return n
}

func (m *RetAddFollow) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	n += 1 + sovPlayer(uint64(m.Uid))
	return n
}

func (m *RetUnFollow) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	n += 1 + sovPlayer(uint64(m.Uid))
	return n
}

func (m *RelationUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	l = len(m.Msg)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.State))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 9
	n += 9
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Scores))
	n += 1 + sovPlayer(uint64(m.IsNew))
	n += 1 + sovPlayer(uint64(m.Age))
	l = len(m.Sign)
	n += 2 + l + sovPlayer(uint64(l))
	n += 2 + sovPlayer(uint64(m.Follows))
	n += 2 + sovPlayer(uint64(m.Fans))
	n += 2 + sovPlayer(uint64(m.RelType))
	n += 2 + sovPlayer(uint64(m.OrderId))
	l = len(m.Remark)
	n += 2 + l + sovPlayer(uint64(l))
	n += 2 + sovPlayer(uint64(m.IsBan))
	n += 2 + sovPlayer(uint64(m.FollowTime))
	return n
}

func (m *RetFollowList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	n += 9
	n += 9
	return n
}

func (m *RetFansList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetFansList_FanUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.State))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.IsNew))
	n += 1 + sovPlayer(uint64(m.RelType))
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Scores))
	n += 1 + sovPlayer(uint64(m.Follows))
	n += 1 + sovPlayer(uint64(m.Fans))
	l = len(m.Sign)
	n += 1 + l + sovPlayer(uint64(l))
	n += 9
	n += 9
	l = len(m.Remark)
	n += 2 + l + sovPlayer(uint64(l))
	n += 2 + sovPlayer(uint64(m.Distance))
	n += 2 + sovPlayer(uint64(m.FollowTime))
	return n
}

func (m *RetCheckFollows) Size() (n int) {
	var l int
	_ = l
	if len(m.Follows) > 0 {
		for _, e := range m.Follows {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetCheckFollows_FollowFlag) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	n += 2
	n += 1 + sovPlayer(uint64(m.FType))
	return n
}

func (m *RetBlackList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetBlackList_BlackUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.BeEatNum))
	n += 1 + sovPlayer(uint64(m.State))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.RelType))
	l = len(m.Sign)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.IsNew))
	n += 1 + sovPlayer(uint64(m.OrderId))
	l = len(m.Remark)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.BeEatTime))
	return n
}

func (m *BlacksData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	n += 1 + sovPlayer(uint64(m.BeEatNum))
	n += 1 + sovPlayer(uint64(m.BeEatTime))
	return n
}

func (m *BlacksDataList) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *MatchData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Icon))
	l = len(m.NickName)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Time))
	n += 1 + sovPlayer(uint64(m.Rank))
	n += 1 + sovPlayer(uint64(m.Score))
	n += 1 + sovPlayer(uint64(m.AnimalID))
	n += 1 + sovPlayer(uint64(m.JiangGuo))
	n += 1 + sovPlayer(uint64(m.SceneID))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *MatchDataList) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *HonorData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Season))
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Scores))
	n += 1 + sovPlayer(uint64(m.MRound))
	n += 1 + sovPlayer(uint64(m.KillNum))
	n += 1 + sovPlayer(uint64(m.FirstCnt))
	n += 1 + sovPlayer(uint64(m.MaxExp))
	n += 1 + sovPlayer(uint64(m.SceneID))
	n += 1 + sovPlayer(uint64(m.AnimalID))
	n += 1 + sovPlayer(uint64(m.Fans))
	return n
}

func (m *HonorDataList) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *AwardInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.ItemId))
	n += 1 + sovPlayer(uint64(m.Num))
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Sex))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	return n
}

func (m *FriMailData) Size() (n int) {
	var l int
	_ = l
	l = len(m.MailId)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Type))
	l = len(m.Title)
	n += 1 + l + sovPlayer(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovPlayer(uint64(l))
	if m.FromDetail != nil {
		l = m.FromDetail.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	if len(m.Attr) > 0 {
		for _, e := range m.Attr {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	n += 1 + sovPlayer(uint64(m.CreateTime))
	n += 1 + sovPlayer(uint64(m.State))
	return n
}

func (m *SysMailData) Size() (n int) {
	var l int
	_ = l
	l = len(m.MailId)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Type))
	l = len(m.Title)
	n += 1 + l + sovPlayer(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovPlayer(uint64(l))
	if len(m.Attr) > 0 {
		for _, e := range m.Attr {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	n += 1 + sovPlayer(uint64(m.CreateTime))
	n += 1 + sovPlayer(uint64(m.State))
	return n
}

func (m *ReqMailData) Size() (n int) {
	var l int
	_ = l
	l = len(m.MailId)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Type))
	if m.FromDetail != nil {
		l = m.FromDetail.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	n += 1 + sovPlayer(uint64(m.State))
	n += 1 + sovPlayer(uint64(m.ItemId))
	n += 1 + sovPlayer(uint64(m.RespState))
	n += 1 + sovPlayer(uint64(m.CreateTime))
	return n
}

func (m *RetRelationStat) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.FollowNum))
	n += 1 + sovPlayer(uint64(m.FollowAddNum))
	n += 1 + sovPlayer(uint64(m.FansNum))
	n += 1 + sovPlayer(uint64(m.FansAddNum))
	n += 1 + sovPlayer(uint64(m.BlackNum))
	n += 1 + sovPlayer(uint64(m.BlackAddNum))
	n += 1 + sovPlayer(uint64(m.StarNum))
	n += 1 + sovPlayer(uint64(m.StarAddNum))
	n += 1 + sovPlayer(uint64(m.MsgAddNum))
	n += 1 + sovPlayer(uint64(m.BansNum))
	n += 1 + sovPlayer(uint64(m.BansAddNum))
	n += 1 + sovPlayer(uint64(m.FriendNum))
	if m.SnsMsg != nil {
		l = m.SnsMsg.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	n += 1 + sovPlayer(uint64(m.Reward))
	n += 2 + sovPlayer(uint64(m.NewLeaderFlag))
	return n
}

func (m *SnsDynamicMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.LoveNum))
	n += 1 + sovPlayer(uint64(m.FollowNum))
	n += 1 + sovPlayer(uint64(m.LeaveMsgNum))
	n += 1 + sovPlayer(uint64(m.StarPhoneNum))
	n += 1 + sovPlayer(uint64(m.MsgReplyNum))
	return n
}

func (m *RetUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	l = len(m.Name)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.State))
	n += 2
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 2
	n += 9
	n += 9
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Scores))
	n += 1 + sovPlayer(uint64(m.RelType))
	n += 1 + sovPlayer(uint64(m.YaoPlay))
	n += 2 + sovPlayer(uint64(m.Distance))
	n += 2 + sovPlayer(uint64(m.Age))
	n += 3
	return n
}

func (m *UsersNearby) Size() (n int) {
	var l int
	_ = l
	n += 9
	n += 9
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetCheckSeason) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.OldSeason))
	n += 1 + sovPlayer(uint64(m.OldLevel))
	n += 1 + sovPlayer(uint64(m.OldScores))
	n += 1 + sovPlayer(uint64(m.NewLevel))
	n += 1 + sovPlayer(uint64(m.NewScores))
	if len(m.Objs) > 0 {
		for _, e := range m.Objs {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetBanList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	n += 1 + sovPlayer(uint64(m.Uid))
	return n
}

func (m *RetBanInfoList) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetBanInfoList_BanInfoMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.ToId))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.Time))
	n += 1 + sovPlayer(uint64(m.State))
	n += 1 + sovPlayer(uint64(m.Icon))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	l = len(m.Remark)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *RetDelBanList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	n += 1 + sovPlayer(uint64(m.Uid))
	return n
}

func (m *RetFansNumRankList) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func (m *RetFansNumRankList_FansUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Rank))
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.IncFanNum))
	n += 1 + sovPlayer(uint64(m.AllFanNum))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.RankChange))
	n += 2
	return n
}

func (m *RetCheckConnect) Size() (n int) {
	var l int
	_ = l
	n += 2
	n += 1 + sovPlayer(uint64(m.Model))
	n += 1 + sovPlayer(uint64(m.ETime))
	n += 1 + sovPlayer(uint64(m.RoomId))
	n += 1 + sovPlayer(uint64(m.Sceneid))
	return n
}

func (m *RetSetSex) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Sex))
	return n
}

func (m *RetResetPassword) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *RetShareObject) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Daynum))
	n += 1 + sovPlayer(uint64(m.Totalnum))
	return n
}

func (m *ObjNode) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	n += 1 + sovPlayer(uint64(m.Num))
	return n
}

func (m *RetScoreNumRankGift) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetScoreNumRankGift_ScoreUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Rank))
	n += 1 + sovPlayer(uint64(m.Score))
	n += 2
	n += 1 + sovPlayer(uint64(m.Kind))
	n += 1 + sovPlayer(uint64(m.Itemid))
	n += 1 + sovPlayer(uint64(m.Itemnum))
	return n
}

func (m *RetNotifyMoneyMessage) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Itemid))
	n += 1 + sovPlayer(uint64(m.Itemnum))
	n += 1 + sovPlayer(uint64(m.Leftnum))
	return n
}

func (m *RetAddIcon) Size() (n int) {
	var l int
	_ = l
	if len(m.Icons) > 0 {
		for _, e := range m.Icons {
			n += 1 + sovPlayer(uint64(e))
		}
	}
	return n
}

func (m *RetGetIcons) Size() (n int) {
	var l int
	_ = l
	if len(m.Icons) > 0 {
		for _, e := range m.Icons {
			n += 1 + sovPlayer(uint64(e))
		}
	}
	return n
}

func (m *RetQuestionnaire) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Itemid))
	n += 1 + sovPlayer(uint64(m.Itemnum))
	n += 2
	return n
}

func (m *RetPreTeamMemList) Size() (n int) {
	var l int
	_ = l
	if len(m.TeamMems) > 0 {
		for _, e := range m.TeamMems {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetPreTeamMemList_TeamMem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.State))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Scores))
	return n
}

func (m *RetUsersInviteNearby) Size() (n int) {
	var l int
	_ = l
	if len(m.InvMems) > 0 {
		for _, e := range m.InvMems {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetUsersInviteNearby_InviteMem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Icon))
	n += 1 + sovPlayer(uint64(m.Sex))
	n += 1 + sovPlayer(uint64(m.State))
	l = len(m.PassIcon)
	n += 1 + l + sovPlayer(uint64(l))
	n += 1 + sovPlayer(uint64(m.Level))
	n += 1 + sovPlayer(uint64(m.Scores))
	return n
}

func (m *RetTodayTicketInfo) Size() (n int) {
	var l int
	_ = l
	n += 2
	n += 2
	n += 2
	return n
}

func (m *MsgResInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Baseid))
	n += 1 + sovPlayer(uint64(m.Num))
	return n
}

func (m *RetExchangeActCode) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *RetBindChannl) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Code))
	return n
}

func (m *RetCheckBindChannl) Size() (n int) {
	var l int
	_ = l
	l = len(m.Acc)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *RetCheckAccPwBind) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Code))
	return n
}

func (m *RetMsgFriMailList) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetMsgSysMailList) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetMsgReqMailList) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetMsgReadMail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	l = len(m.Mailid)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *RetMsgDelMail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	return n
}

func (m *MailIdInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func (m *RetMsgRecvMail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	if len(m.MailIds) > 0 {
		for _, e := range m.MailIds {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	return n
}

func (m *RetMsgUpdateReqMail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	return n
}

func (m *RetGiftGiving) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Itemid))
	n += 1 + sovPlayer(uint64(m.Ret))
	return n
}

func (m *RetAskingGift) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPlayer(uint64(m.Ret))
	return n
}

func sovPlayer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPlayer(x uint64) (n int) {
	return sovPlayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RetLoginMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetLoginMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetLoginMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewbie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewbie = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNow", wireType)
			}
			m.TimeNow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNow |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channl", wireType)
			}
			m.Channl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isregist", wireType)
			}
			m.Isregist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Isregist |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idcard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idcard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegTime", wireType)
			}
			m.RegTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsNewbie")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Password")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Location")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetGateAddr) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetGateAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetGateAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetIntoFRoom) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetIntoFRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetIntoFRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tips", wireType)
			}
			m.Tips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tips |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priv", wireType)
			}
			m.Priv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			m.SceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticketnum", wireType)
			}
			m.Ticketnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticketnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Err")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetErrorMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetErrorMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetErrorMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			m.Params = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Params |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetDetailInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetDetailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetDetailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideScores", wireType)
			}
			m.HideScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HideScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiangGuo", wireType)
			}
			m.JiangGuo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JiangGuo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActCodeFigt", wireType)
			}
			m.ActCodeFigt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActCodeFigt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speaker", wireType)
			}
			m.Speaker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speaker |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCheckTeam) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCheckTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCheckTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTime", wireType)
			}
			m.OpenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OpenTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetGLevelRankList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetGLevelRankList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetGLevelRankList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetGLevelRankList_LevelUser{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RetGLevelRankList_LevelUser{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetGLevelRankList_LevelUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stars", wireType)
			}
			m.Stars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stars |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStars", wireType)
			}
			m.MaxStars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStars |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Level")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Stars")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rank")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSearchUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSearchUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSearchUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFriend = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsFriend")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Location")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSearchUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSearchUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSearchUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetSearchUser{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetFriendList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetFriendList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetFriendList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetFriendList_FriendData{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetFriendList_FriendData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeCup", wireType)
			}
			m.PrizeCup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeCup |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchAddFollowRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchAddFollowRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchAddFollowRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetFollow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetFollow = append(m.RetFollow, &BatchAddFollowRet_RetAddFollow{})
			if err := m.RetFollow[len(m.RetFollow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchAddFollowRet_RetAddFollow) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetAddFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetAddFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelType", wireType)
			}
			m.RelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RelType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetAddFollow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetAddFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetAddFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUnFollow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetUnFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetUnFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			m.IsNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNew |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follows", wireType)
			}
			m.Follows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follows |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelType", wireType)
			}
			m.RelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			m.IsBan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowTime", wireType)
			}
			m.FollowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Msg")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetFollowList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetFollowList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetFollowList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RelationUser{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLongi", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MyLongi = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLati", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MyLati = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetFansList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetFansList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetFansList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetFansList_FanUser{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetFansList_FanUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FanUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FanUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			m.IsNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNew |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelType", wireType)
			}
			m.RelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follows", wireType)
			}
			m.Follows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follows |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLongi", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MyLongi = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLati", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MyLati = float64(math.Float64frombits(v))
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			m.Distance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distance |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowTime", wireType)
			}
			m.FollowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCheckFollows) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetCheckFollows: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetCheckFollows: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Follows = append(m.Follows, &RetCheckFollows_FollowFlag{})
			if err := m.Follows[len(m.Follows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCheckFollows_FollowFlag) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FType", wireType)
			}
			m.FType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsFollow")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBlackList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetBlackList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetBlackList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetBlackList_BlackUser{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBlackList_BlackUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlackUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlackUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeEatNum", wireType)
			}
			m.BeEatNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeEatNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelType", wireType)
			}
			m.RelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			m.IsNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNew |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeEatTime", wireType)
			}
			m.BeEatTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeEatTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("BeEatNum")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacksData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacksData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacksData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeEatNum", wireType)
			}
			m.BeEatNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeEatNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeEatTime", wireType)
			}
			m.BeEatTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeEatTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("BeEatNum")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("BeEatTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacksDataList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacksDataList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacksDataList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &BlacksData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimalID", wireType)
			}
			m.AnimalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnimalID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiangGuo", wireType)
			}
			m.JiangGuo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JiangGuo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneID", wireType)
			}
			m.SceneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NickName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rank")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Score")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AnimalID")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("JiangGuo")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SceneID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchDataList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchDataList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchDataList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &MatchData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HonorData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HonorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HonorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MRound", wireType)
			}
			m.MRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MRound |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstCnt", wireType)
			}
			m.FirstCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExp", wireType)
			}
			m.MaxExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxExp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneID", wireType)
			}
			m.SceneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimalID", wireType)
			}
			m.AnimalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnimalID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Season")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Level")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Scores")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HonorDataList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HonorDataList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HonorDataList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &HonorData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ItemId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriMailData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriMailData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriMailData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromDetail == nil {
				m.FromDetail = &UserInfo{}
			}
			if err := m.FromDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attr = append(m.Attr, &AwardInfo{})
			if err := m.Attr[len(m.Attr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MailId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Title")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Content")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromDetail")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreateTime")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysMailData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysMailData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysMailData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attr = append(m.Attr, &AwardInfo{})
			if err := m.Attr[len(m.Attr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MailId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Title")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Content")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreateTime")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMailData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMailData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMailData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromDetail == nil {
				m.FromDetail = &UserInfo{}
			}
			if err := m.FromDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespState", wireType)
			}
			m.RespState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RespState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MailId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromDetail")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ItemId")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RespState")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreateTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRelationStat) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRelationStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRelationStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowNum", wireType)
			}
			m.FollowNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowAddNum", wireType)
			}
			m.FollowAddNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowAddNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansNum", wireType)
			}
			m.FansNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansAddNum", wireType)
			}
			m.FansAddNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansAddNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackNum", wireType)
			}
			m.BlackNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlackNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackAddNum", wireType)
			}
			m.BlackAddNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlackAddNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarNum", wireType)
			}
			m.StarNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarAddNum", wireType)
			}
			m.StarAddNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarAddNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgAddNum", wireType)
			}
			m.MsgAddNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgAddNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BansNum", wireType)
			}
			m.BansNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BansNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BansAddNum", wireType)
			}
			m.BansAddNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BansAddNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendNum", wireType)
			}
			m.FriendNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnsMsg == nil {
				m.SnsMsg = &SnsDynamicMsg{}
			}
			if err := m.SnsMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLeaderFlag", wireType)
			}
			m.NewLeaderFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewLeaderFlag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FollowNum")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FollowAddNum")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FansNum")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FansAddNum")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("BlackNum")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("BlackAddNum")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("StarNum")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("StarAddNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnsDynamicMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnsDynamicMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnsDynamicMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoveNum", wireType)
			}
			m.LoveNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoveNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowNum", wireType)
			}
			m.FollowNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveMsgNum", wireType)
			}
			m.LeaveMsgNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaveMsgNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarPhoneNum", wireType)
			}
			m.StarPhoneNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarPhoneNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgReplyNum", wireType)
			}
			m.MsgReplyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgReplyNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewbie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewbie = bool(v != 0)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelType", wireType)
			}
			m.RelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YaoPlay", wireType)
			}
			m.YaoPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YaoPlay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			m.Distance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distance |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFriend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersNearby) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersNearby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersNearby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLongi", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MyLongi = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLati", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MyLati = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &RetUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MyLongi")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MyLati")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCheckSeason) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetCheckSeason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetCheckSeason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSeason", wireType)
			}
			m.OldSeason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldSeason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLevel", wireType)
			}
			m.OldLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldScores", wireType)
			}
			m.OldScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLevel", wireType)
			}
			m.NewLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewScores", wireType)
			}
			m.NewScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objs = append(m.Objs, &ObjNode{})
			if err := m.Objs[len(m.Objs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OldSeason")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OldLevel")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OldScores")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NewLevel")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NewScores")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetBanList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetBanList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBanInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetBanInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetBanInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RetBanInfoList_BanInfoMsg{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBanInfoList_BanInfoMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BanInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BanInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetDelBanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetDelBanList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetDelBanList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetFansNumRankList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetFansNumRankList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetFansNumRankList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetFansNumRankList_FansUser{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RetFansNumRankList_FansUser{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetFansNumRankList_FansUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncFanNum", wireType)
			}
			m.IncFanNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncFanNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllFanNum", wireType)
			}
			m.AllFanNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllFanNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankChange", wireType)
			}
			m.RankChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankChange |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rank")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IncFanNum")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AllFanNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCheckConnect) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetCheckConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetCheckConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedConn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedConn = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETime", wireType)
			}
			m.ETime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ETime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sceneid", wireType)
			}
			m.Sceneid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sceneid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NeedConn")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSetSex) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSetSex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSetSex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetResetPassword) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetResetPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetResetPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetShareObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetShareObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetShareObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daynum", wireType)
			}
			m.Daynum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Daynum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalnum", wireType)
			}
			m.Totalnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjNode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetScoreNumRankGift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetScoreNumRankGift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetScoreNumRankGift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &RetScoreNumRankGift_ScoreUser{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetScoreNumRankGift_ScoreUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemnum", wireType)
			}
			m.Itemnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetNotifyMoneyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetNotifyMoneyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetNotifyMoneyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemnum", wireType)
			}
			m.Itemnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leftnum", wireType)
			}
			m.Leftnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leftnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetAddIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetAddIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetAddIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Icons = append(m.Icons, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlayer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Icons = append(m.Icons, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Icons", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetGetIcons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetGetIcons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetGetIcons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Icons = append(m.Icons, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlayer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Icons = append(m.Icons, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Icons", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetQuestionnaire) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetQuestionnaire: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetQuestionnaire: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemnum", wireType)
			}
			m.Itemnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetPreTeamMemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetPreTeamMemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetPreTeamMemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMems = append(m.TeamMems, &RetPreTeamMemList_TeamMem{})
			if err := m.TeamMems[len(m.TeamMems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetPreTeamMemList_TeamMem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUsersInviteNearby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetUsersInviteNearby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetUsersInviteNearby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvMems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvMems = append(m.InvMems, &RetUsersInviteNearby_InviteMem{})
			if err := m.InvMems[len(m.InvMems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUsersInviteNearby_InviteMem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteMem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteMem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTodayTicketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTodayTicketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTodayTicketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exch = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Baseid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetExchangeActCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetExchangeActCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetExchangeActCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBindChannl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetBindChannl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetBindChannl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCheckBindChannl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetCheckBindChannl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetCheckBindChannl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetCheckAccPwBind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetCheckAccPwBind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetCheckAccPwBind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMsgFriMailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMsgFriMailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMsgFriMailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &FriMailData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMsgSysMailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMsgSysMailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMsgSysMailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &SysMailData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMsgReqMailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMsgReqMailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMsgReqMailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &ReqMailData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMsgReadMail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMsgReadMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMsgReadMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mailid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Ret")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Mailid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMsgDelMail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMsgDelMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMsgDelMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Ret")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailIdInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailIdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailIdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMsgRecvMail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMsgRecvMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMsgRecvMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailIds = append(m.MailIds, &MailIdInfo{})
			if err := m.MailIds[len(m.MailIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Ret")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMsgUpdateReqMail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMsgUpdateReqMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMsgUpdateReqMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Ret")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetGiftGiving) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetGiftGiving: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetGiftGiving: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("itemid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ret")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetAskingGift) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetAskingGift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetAskingGift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ret")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPlayer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlayer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlayer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("player.proto", fileDescriptorPlayer) }

var fileDescriptorPlayer = []byte{
	// 4278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0x4d, 0x8c, 0x1c, 0xc7,
	0x75, 0xf6, 0xfc, 0xf6, 0x4c, 0xcd, 0xee, 0xb2, 0xd8, 0x5c, 0xae, 0x5a, 0x6b, 0x86, 0x5a, 0xb7,
	0x18, 0x8a, 0x56, 0xcc, 0x95, 0xac, 0x43, 0x02, 0x43, 0xd6, 0xcf, 0xec, 0xaf, 0x46, 0xe2, 0x2e,
	0x37, 0x33, 0x4b, 0x04, 0xb9, 0xb9, 0xb6, 0xbb, 0x66, 0xb6, 0xb9, 0x3d, 0xdd, 0xc3, 0xae, 0x1e,
	0x92, 0x93, 0x43, 0x4e, 0x01, 0x0c, 0x24, 0x97, 0x1c, 0x72, 0x75, 0x0e, 0xce, 0xc9, 0x87, 0x5c,
	0x72, 0x77, 0x72, 0x8c, 0x82, 0xc0, 0x48, 0x0e, 0x01, 0x7c, 0x0b, 0x02, 0x19, 0x0e, 0xe2, 0x38,
	0x09, 0x10, 0xdb, 0xb9, 0x39, 0x3f, 0x78, 0xaf, 0xaa, 0xbb, 0xab, 0x7a, 0x66, 0x87, 0x94, 0x04,
	0xd0, 0x50, 0x80, 0x05, 0x76, 0xfa, 0xab, 0x57, 0xaf, 0xab, 0x5e, 0xbd, 0xff, 0x2e, 0xb2, 0x32,
	0x09, 0xd9, 0x8c, 0x27, 0xdb, 0x93, 0x24, 0x4e, 0x63, 0xdb, 0x9a, 0x0a, 0x9e, 0x78, 0x63, 0x7f,
	0xf3, 0xee, 0x28, 0x48, 0xcf, 0xa7, 0x67, 0xdb, 0x5e, 0x3c, 0x7e, 0x63, 0x14, 0x8f, 0xe2, 0x37,
	0x70, 0xfc, 0x6c, 0x3a, 0xc4, 0x27, 0x7c, 0xc0, 0x5f, 0x72, 0x9e, 0xfb, 0xed, 0x3a, 0xe9, 0xf4,
	0x79, 0x7a, 0x2f, 0x1e, 0x05, 0xd1, 0x91, 0x18, 0xd9, 0x37, 0x89, 0xd5, 0xf5, 0xbc, 0x78, 0x1a,
	0xa5, 0x4e, 0x65, 0xab, 0x7a, 0xa7, 0xbd, 0x53, 0xff, 0xf8, 0x1f, 0x5f, 0xf9, 0x52, 0xdf, 0x62,
	0x12, 0xb4, 0xd7, 0x49, 0xb5, 0xe7, 0x3b, 0xd5, 0xad, 0xea, 0x9d, 0xba, 0x1a, 0xaa, 0x06, 0xbe,
	0xbd, 0x45, 0x5a, 0x3d, 0x71, 0xcc, 0x9f, 0x9c, 0x05, 0xdc, 0xa9, 0x6d, 0x55, 0xef, 0xb4, 0xd4,
	0x58, 0x2b, 0x50, 0x28, 0x50, 0x9c, 0x30, 0x21, 0x9e, 0xc4, 0x89, 0xef, 0xd4, 0x35, 0xc6, 0xad,
	0x89, 0x42, 0x81, 0xe2, 0x5e, 0xec, 0xb1, 0x34, 0x88, 0x23, 0xa7, 0xb9, 0x55, 0xbd, 0xb3, 0x9a,
	0x51, 0x84, 0x0a, 0x85, 0xb5, 0x9d, 0x06, 0x63, 0x7e, 0x1c, 0x3f, 0x71, 0xac, 0xad, 0xca, 0x9d,
	0x5a, 0xb6, 0xb6, 0x54, 0x82, 0xf6, 0x06, 0xa9, 0x09, 0xfe, 0xd4, 0x69, 0x6d, 0x55, 0xf2, 0xc9,
	0x00, 0x00, 0xce, 0x46, 0xdc, 0x69, 0xeb, 0x38, 0x1b, 0x71, 0xc0, 0x53, 0x1e, 0x3a, 0x64, 0xab,
	0x92, 0x2f, 0x07, 0x00, 0xdb, 0x21, 0xf5, 0xc0, 0x8b, 0x23, 0xa7, 0xa3, 0x4d, 0x40, 0x04, 0x46,
	0xa2, 0xc0, 0xbb, 0x70, 0x56, 0xb4, 0x29, 0x88, 0xd8, 0x37, 0x48, 0xd3, 0x3b, 0x67, 0x51, 0x14,
	0x3a, 0xab, 0xda, 0x2c, 0x85, 0xc1, 0xde, 0x02, 0x91, 0xf0, 0x51, 0x20, 0x52, 0x67, 0x4d, 0x1b,
	0xcf, 0xd1, 0x4c, 0x3e, 0x3d, 0x78, 0xef, 0x15, 0x8d, 0x3b, 0xca, 0x07, 0x50, 0xa0, 0x38, 0x62,
	0x4f, 0xef, 0xf1, 0xc7, 0x3c, 0x74, 0xa8, 0xce, 0x63, 0xac, 0x50, 0x58, 0x43, 0xe0, 0x7b, 0x2c,
	0xf1, 0x9d, 0xab, 0x1a, 0x07, 0x85, 0x81, 0xf4, 0xfa, 0x7c, 0x04, 0x02, 0x74, 0x6c, 0x6d, 0xba,
	0x95, 0x48, 0xd0, 0xdd, 0x47, 0x45, 0x38, 0x64, 0x29, 0xef, 0xfa, 0x7e, 0x82, 0x8a, 0xe0, 0xfb,
	0x09, 0x17, 0xa2, 0xa4, 0x08, 0x12, 0x04, 0xe1, 0x7d, 0xc4, 0x67, 0xa8, 0x09, 0xb9, 0xf0, 0x2e,
	0xf8, 0xcc, 0xfd, 0x6e, 0x95, 0xac, 0xf4, 0x79, 0xda, 0x8b, 0xd2, 0xf8, 0xa0, 0x1f, 0xc7, 0x63,
	0x20, 0xdc, 0x4f, 0x12, 0x64, 0x92, 0x4b, 0x9f, 0x27, 0x09, 0xc8, 0x12, 0x5e, 0xe0, 0x54, 0x75,
	0x59, 0x02, 0xf7, 0x8c, 0x75, 0x4d, 0x3f, 0x97, 0x0b, 0x3e, 0x03, 0xfc, 0x41, 0x0f, 0xd4, 0xa7,
	0x92, 0x2b, 0x5f, 0x6d, 0xda, 0xf3, 0x81, 0xd3, 0x69, 0x30, 0x11, 0x4e, 0x43, 0x3f, 0xaf, 0x34,
	0x98, 0x08, 0x90, 0x08, 0xac, 0xa1, 0xe7, 0x3b, 0x4d, 0xfd, 0x54, 0x12, 0xc4, 0x60, 0xde, 0x49,
	0x12, 0x3c, 0x46, 0x65, 0xca, 0xe7, 0x4d, 0x92, 0xe0, 0xb1, 0xbd, 0x49, 0x1a, 0x47, 0xb1, 0xcf,
	0x43, 0x43, 0x97, 0x1a, 0x63, 0x80, 0x40, 0x30, 0x03, 0x8f, 0x47, 0xbc, 0xe7, 0x1b, 0x1a, 0x65,
	0x09, 0x09, 0xda, 0x2e, 0x69, 0xa7, 0x81, 0x77, 0xc1, 0xd3, 0x68, 0x3a, 0x46, 0xdd, 0xca, 0x28,
	0x0a, 0xd8, 0x8d, 0x51, 0xd6, 0xfb, 0x49, 0x12, 0x27, 0xca, 0xe8, 0xfa, 0x3c, 0xdd, 0x8d, 0x7d,
	0x6e, 0x88, 0xc9, 0x4a, 0x24, 0x08, 0xdb, 0x38, 0x61, 0x09, 0x1b, 0x0b, 0x14, 0x56, 0xb6, 0xf7,
	0xe6, 0x04, 0x31, 0x78, 0xe1, 0x87, 0x22, 0x8e, 0x90, 0xc2, 0x10, 0x5a, 0xfb, 0x61, 0x06, 0xbb,
	0x3f, 0xaa, 0x92, 0xd5, 0x3e, 0x4f, 0xf7, 0x78, 0xca, 0x82, 0xb0, 0x17, 0x0d, 0x63, 0x65, 0xc8,
	0x95, 0x92, 0x21, 0x6b, 0xe6, 0x5f, 0x5d, 0x64, 0xfe, 0x0e, 0xa9, 0xa3, 0x8a, 0xd6, 0xb4, 0x65,
	0x4a, 0xd3, 0xd8, 0x20, 0xb5, 0x01, 0x7f, 0x8a, 0xb6, 0x6d, 0x18, 0x9f, 0xae, 0xd8, 0x8d, 0x85,
	0x8a, 0xbd, 0x49, 0x1a, 0x52, 0xab, 0x75, 0x61, 0x35, 0xc2, 0x4c, 0xa5, 0x07, 0x5e, 0x9c, 0x70,
	0x61, 0x18, 0x63, 0x53, 0x20, 0x66, 0xdf, 0x22, 0xe4, 0x83, 0xc0, 0xe7, 0x8a, 0x62, 0x45, 0xa3,
	0x20, 0xe7, 0x39, 0x0e, 0x2b, 0xf8, 0x30, 0x60, 0xd1, 0xe8, 0x70, 0x1a, 0x3b, 0xd7, 0x75, 0xc3,
	0x79, 0xa8, 0x50, 0xfb, 0x36, 0xe9, 0x74, 0x3d, 0x14, 0xf5, 0x41, 0x30, 0x4a, 0x9d, 0x0d, 0x8d,
	0xa8, 0xc3, 0x8a, 0x01, 0x3c, 0xfa, 0x09, 0x67, 0x17, 0x3c, 0x71, 0x5e, 0x32, 0x8e, 0x5e, 0x82,
	0xee, 0x9b, 0xa0, 0xfa, 0x8f, 0x76, 0xcf, 0xb9, 0x77, 0x71, 0xca, 0xd9, 0x18, 0xde, 0x7c, 0x7f,
	0xc2, 0x23, 0xb4, 0x39, 0xfd, 0x60, 0x5b, 0xb1, 0x42, 0xdd, 0x1f, 0xd7, 0xc8, 0x55, 0xb0, 0x3a,
	0x14, 0x40, 0x9f, 0x45, 0x17, 0xf7, 0xc0, 0x19, 0xbc, 0x4b, 0xac, 0x13, 0x74, 0xee, 0x60, 0x7b,
	0xb5, 0x3b, 0x9d, 0xb7, 0x6e, 0x6d, 0x2b, 0xf7, 0xbe, 0x3d, 0x47, 0xbc, 0x8d, 0x4f, 0x0f, 0x04,
	0x4f, 0xfa, 0x96, 0x8c, 0x08, 0xc2, 0x7e, 0x9f, 0xb4, 0x06, 0x3c, 0x1c, 0xc2, 0x39, 0xa3, 0xc6,
	0x3c, 0x2f, 0x83, 0x96, 0x50, 0xb3, 0x36, 0x7f, 0x50, 0x25, 0xed, 0x1c, 0x7f, 0x61, 0xba, 0x92,
	0x6b, 0x82, 0xee, 0xff, 0x95, 0x26, 0x6c, 0x92, 0xc6, 0x20, 0x65, 0x89, 0x70, 0x2c, 0x7d, 0x4c,
	0x00, 0x04, 0x6f, 0x82, 0xdd, 0x38, 0x2d, 0xfd, 0x4d, 0x09, 0x8b, 0x2e, 0x0c, 0xed, 0x6b, 0x3f,
	0xd3, 0xad, 0x92, 0x85, 0x6e, 0x55, 0x52, 0xc8, 0x97, 0x77, 0x4a, 0x14, 0x88, 0xca, 0xf0, 0x77,
	0x10, 0x87, 0x61, 0xfc, 0x04, 0xb5, 0x50, 0x0b, 0x7f, 0x12, 0x75, 0xff, 0xab, 0x82, 0xf6, 0x37,
	0xe0, 0x2c, 0xf1, 0xce, 0x3f, 0x87, 0x4c, 0x95, 0xe4, 0x6a, 0x65, 0xc9, 0x6d, 0x90, 0x5a, 0x77,
	0xc4, 0xd1, 0x35, 0x1a, 0x21, 0x2e, 0x3b, 0x83, 0xc6, 0xdc, 0x19, 0xe8, 0x92, 0x69, 0x5e, 0x26,
	0x99, 0x9e, 0x38, 0x48, 0x02, 0x1e, 0xf9, 0x28, 0x74, 0x7d, 0x57, 0x88, 0x1a, 0x21, 0xbb, 0xb5,
	0x28, 0x64, 0xbb, 0x3b, 0x64, 0xcd, 0xd8, 0xb6, 0xb0, 0xdf, 0x2c, 0xeb, 0xf6, 0x86, 0xae, 0x9a,
	0x05, 0x65, 0xae, 0xcd, 0xee, 0x9f, 0x49, 0xdf, 0x25, 0xdf, 0x89, 0xf6, 0xf1, 0x76, 0x99, 0xc7,
	0x57, 0x74, 0x1e, 0x05, 0xe1, 0xb6, 0xfc, 0xb9, 0xc7, 0x52, 0x96, 0xb3, 0xdb, 0xfc, 0x87, 0x0a,
	0x21, 0x05, 0xfe, 0x22, 0x75, 0x7b, 0x90, 0xb2, 0x94, 0x1b, 0x47, 0x01, 0xfa, 0x9b, 0xf2, 0xe7,
	0x3b, 0x8b, 0x93, 0x24, 0xf8, 0x3d, 0xbe, 0x3b, 0x9d, 0x18, 0xe1, 0xaa, 0x35, 0x51, 0xa8, 0xfb,
	0xdd, 0x0a, 0xb9, 0xba, 0xc3, 0x52, 0xef, 0xbc, 0xeb, 0xfb, 0x52, 0xe9, 0xfa, 0x3c, 0xb5, 0xf7,
	0x49, 0x1b, 0x24, 0x22, 0x55, 0x53, 0xca, 0xea, 0xb5, 0x5c, 0x56, 0x73, 0xe4, 0x20, 0xbd, 0xe2,
	0xb9, 0x9d, 0x64, 0x33, 0x37, 0x0f, 0x30, 0xa6, 0xe7, 0x43, 0x32, 0x12, 0xef, 0x19, 0x52, 0xab,
	0x4d, 0x7b, 0x7b, 0x32, 0x90, 0x85, 0xa7, 0xb3, 0x09, 0x47, 0xb1, 0x69, 0x81, 0x0c, 0x41, 0xf7,
	0xdd, 0x79, 0x3e, 0x7d, 0x0e, 0x99, 0xa6, 0xa6, 0xb6, 0x09, 0x47, 0x35, 0x7f, 0x10, 0xf8, 0x46,
	0xb4, 0xab, 0x4d, 0x03, 0xdf, 0x7d, 0x07, 0xe3, 0xe6, 0x83, 0xe8, 0x33, 0x4e, 0xff, 0x45, 0x1d,
	0xde, 0x1f, 0xa2, 0x6a, 0xbe, 0x50, 0xc7, 0xb6, 0x41, 0x6a, 0x47, 0x62, 0x84, 0x47, 0x9f, 0x67,
	0x34, 0x63, 0x31, 0x2a, 0x94, 0xa2, 0xb9, 0x5c, 0x29, 0xac, 0x85, 0x4a, 0xe1, 0x92, 0xf6, 0xbd,
	0x38, 0x1a, 0x05, 0xe9, 0xd4, 0xe7, 0xe8, 0xbb, 0x2a, 0x59, 0xe0, 0x0f, 0x33, 0x18, 0x4d, 0x94,
	0xa5, 0x92, 0xa4, 0xa3, 0x91, 0xb4, 0x42, 0x85, 0x16, 0x4e, 0x77, 0x65, 0x59, 0xf8, 0x5d, 0x5d,
	0x10, 0x7e, 0x37, 0x49, 0x03, 0xb3, 0x7e, 0x23, 0xa5, 0x6d, 0x60, 0xca, 0x9f, 0x39, 0xa4, 0x2b,
	0x0b, 0x1c, 0xd2, 0x20, 0x18, 0x45, 0x98, 0xc1, 0xe6, 0x59, 0x9f, 0x08, 0x46, 0x98, 0xdd, 0xcb,
	0x63, 0x15, 0x98, 0xbe, 0xe6, 0xba, 0x33, 0x94, 0x20, 0xcc, 0x3c, 0x60, 0x91, 0x30, 0x92, 0xd7,
	0xfa, 0x90, 0x45, 0x42, 0xd7, 0xba, 0x6b, 0x66, 0x66, 0x8b, 0x20, 0x8c, 0xdf, 0x4f, 0x7c, 0x9e,
	0xf4, 0x7c, 0x67, 0x5d, 0x1f, 0x8f, 0x25, 0x88, 0x59, 0x22, 0x1f, 0xb3, 0xe4, 0x02, 0xa3, 0x7a,
	0x9e, 0x37, 0x27, 0x88, 0xc9, 0x5d, 0xee, 0xb0, 0xc8, 0x71, 0xcc, 0x5d, 0xee, 0xb0, 0x08, 0x12,
	0x10, 0xb9, 0x66, 0x0c, 0xf1, 0x2f, 0xeb, 0x09, 0xc8, 0x30, 0xc7, 0xdd, 0xdf, 0x97, 0xfe, 0x0b,
	0x01, 0xf4, 0x5f, 0x6f, 0x94, 0xfd, 0xd7, 0x75, 0xcd, 0x7f, 0x15, 0xea, 0x59, 0x04, 0xf4, 0x9b,
	0xc4, 0x3a, 0x9a, 0xe1, 0x59, 0xa3, 0x52, 0x67, 0x87, 0x68, 0x8d, 0x25, 0x08, 0x3b, 0x38, 0x9a,
	0xc1, 0x39, 0x63, 0xfe, 0x97, 0x0d, 0x37, 0xc7, 0x88, 0xb9, 0x3f, 0x96, 0x35, 0x1e, 0x48, 0x0f,
	0x5f, 0xff, 0x9b, 0x24, 0x63, 0xac, 0x5e, 0x7f, 0xc3, 0x70, 0x9f, 0x8a, 0x6c, 0xfb, 0x80, 0x99,
	0xab, 0xd8, 0xfc, 0x4e, 0x9d, 0x58, 0x0a, 0xfc, 0x82, 0xb8, 0xcd, 0x5c, 0x43, 0xad, 0x79, 0x0d,
	0xd5, 0xb4, 0xa6, 0xb5, 0x48, 0x6b, 0x72, 0xbb, 0x68, 0x2f, 0xb3, 0x0b, 0xb2, 0xc0, 0x2e, 0x34,
	0x4d, 0xee, 0x2c, 0xd3, 0xe4, 0x95, 0x39, 0x4d, 0xce, 0xac, 0x63, 0x75, 0x91, 0x75, 0x64, 0x1a,
	0xb0, 0xb6, 0x5c, 0x03, 0xae, 0xcc, 0x6b, 0x80, 0xa6, 0xe1, 0xf6, 0x02, 0x0d, 0xdf, 0x22, 0xad,
	0xbd, 0x40, 0xa4, 0x2c, 0xf2, 0x4c, 0x03, 0x6a, 0xf9, 0x0a, 0x2d, 0xe9, 0xf9, 0xfa, 0x25, 0x7a,
	0xfe, 0x17, 0x15, 0x72, 0x05, 0xea, 0x18, 0xc8, 0x7f, 0x95, 0x00, 0xec, 0x77, 0x0a, 0x59, 0x48,
	0x5d, 0x7b, 0x55, 0xd7, 0x35, 0x9d, 0x74, 0x5b, 0xfe, 0x3f, 0x08, 0xd9, 0x28, 0x17, 0xd5, 0xe6,
	0xb7, 0xb2, 0x17, 0x03, 0x7c, 0x89, 0xd2, 0xe9, 0xd9, 0x57, 0xb5, 0x94, 0xa7, 0xc8, 0x38, 0xb1,
	0x49, 0x1a, 0x07, 0x78, 0xd0, 0x35, 0xfd, 0x28, 0x87, 0x18, 0x92, 0x7e, 0x58, 0xc3, 0x98, 0xb4,
	0x13, 0x32, 0x4f, 0x26, 0xdf, 0xdf, 0x28, 0x5b, 0xc7, 0x2b, 0xfa, 0x8a, 0x73, 0xba, 0x6d, 0xfc,
	0x65, 0x1a, 0xc8, 0x1f, 0xd5, 0x48, 0x3b, 0x87, 0x5f, 0x64, 0x85, 0xb5, 0xc3, 0xf7, 0x59, 0x7a,
	0x3c, 0x1d, 0x1b, 0x56, 0xd2, 0x3a, 0x53, 0xe8, 0xe7, 0x0c, 0x33, 0xcf, 0x32, 0x94, 0x4c, 0x69,
	0xdb, 0x73, 0x4a, 0x9b, 0x9b, 0x1f, 0x59, 0x68, 0x7e, 0x99, 0x53, 0xee, 0x2c, 0x77, 0xca, 0x6b,
	0x0b, 0x54, 0xd6, 0x25, 0x6d, 0xdc, 0x33, 0xea, 0xa3, 0x1e, 0x64, 0xda, 0x67, 0x19, 0xec, 0x9e,
	0x13, 0x82, 0x87, 0x21, 0x96, 0xe4, 0x79, 0xba, 0xec, 0xaa, 0x0b, 0x65, 0x67, 0xbc, 0x49, 0x3f,
	0x14, 0xed, 0x4d, 0x6f, 0x93, 0xb5, 0xe2, 0x4d, 0xa8, 0x44, 0x5f, 0x25, 0x0d, 0xf8, 0x9d, 0xa9,
	0xd0, 0xb5, 0x22, 0xe7, 0xca, 0xe9, 0xfa, 0x0d, 0x1f, 0x28, 0xdc, 0xef, 0x54, 0x49, 0xfb, 0x08,
	0x32, 0x31, 0x5c, 0x66, 0x76, 0xfc, 0x95, 0x45, 0x09, 0xfb, 0x71, 0xe0, 0x5d, 0x1c, 0xb3, 0x31,
	0x37, 0x34, 0xa7, 0x15, 0x29, 0x54, 0xf6, 0x41, 0x4a, 0xab, 0xac, 0xa7, 0x81, 0x1c, 0xc1, 0x02,
	0xa9, 0x3e, 0x57, 0x20, 0x81, 0x6a, 0x80, 0xd7, 0x2a, 0xf9, 0x57, 0x80, 0xe0, 0x8d, 0xdd, 0x28,
	0x18, 0xb3, 0xb0, 0xb7, 0x67, 0x76, 0xe4, 0x98, 0x42, 0x8d, 0xd2, 0x5a, 0xaf, 0xcb, 0x8a, 0xd2,
	0x3a, 0xef, 0x96, 0xec, 0x19, 0x15, 0x82, 0xea, 0x96, 0xec, 0x3d, 0xbb, 0x40, 0x73, 0xbf, 0x41,
	0x56, 0x73, 0xf1, 0xa0, 0x6c, 0xef, 0x98, 0xb2, 0xb5, 0x73, 0xd9, 0xe6, 0x64, 0x99, 0x68, 0xbf,
	0x5f, 0x25, 0xed, 0x0f, 0xe2, 0x28, 0x4e, 0x50, 0xb4, 0xe0, 0xb4, 0x39, 0x13, 0x25, 0xe1, 0x36,
	0x05, 0x62, 0x85, 0xbb, 0xaf, 0xcd, 0xd7, 0x9e, 0x85, 0xbb, 0xaf, 0x1b, 0x33, 0xa5, 0xbb, 0x07,
	0xd7, 0xdb, 0x8f, 0xa7, 0x91, 0x6f, 0x34, 0xa0, 0x9a, 0x63, 0xc4, 0x40, 0x00, 0x1f, 0x05, 0x61,
	0x08, 0x0a, 0xa6, 0xf7, 0xa0, 0xac, 0x0b, 0x09, 0x82, 0x00, 0x0e, 0x82, 0x44, 0xa4, 0xbb, 0x51,
	0x6a, 0x66, 0xf6, 0x43, 0x85, 0x22, 0x7f, 0xf6, 0x74, 0xff, 0xe9, 0xc4, 0x30, 0xbf, 0xe6, 0x18,
	0x31, 0x5d, 0xc0, 0x0b, 0xda, 0x51, 0x7b, 0xc6, 0x21, 0x1a, 0xf5, 0x6d, 0x7e, 0x88, 0x59, 0x38,
	0xea, 0x94, 0xc3, 0x11, 0x88, 0x3e, 0x17, 0xdf, 0x72, 0xd1, 0xe7, 0x64, 0x99, 0xe8, 0xbb, 0xa4,
	0xdd, 0x7d, 0xc2, 0x12, 0x1f, 0x7b, 0x4d, 0x37, 0x48, 0xb3, 0x97, 0xf2, 0xb1, 0xb2, 0xbf, 0x7c,
	0x07, 0x01, 0x62, 0xe0, 0xd7, 0xca, 0xe6, 0x57, 0x8b, 0xa6, 0x63, 0xf7, 0x4f, 0x2a, 0xa4, 0x05,
	0x8e, 0xd4, 0x68, 0x57, 0x55, 0x2e, 0x77, 0xa6, 0x95, 0x25, 0xe5, 0x72, 0xe5, 0xf2, 0xa6, 0x54,
	0x7d, 0xa1, 0xd3, 0x2b, 0x0a, 0xe7, 0x52, 0x0f, 0xd8, 0xfd, 0xd3, 0x2a, 0xe9, 0x1c, 0x24, 0xc1,
	0x11, 0x0b, 0xc2, 0x4c, 0xad, 0xe0, 0xb7, 0xda, 0x5c, 0xbb, 0x38, 0x1e, 0xc0, 0xd0, 0x26, 0xcb,
	0xe5, 0x50, 0x3d, 0x55, 0xf9, 0xc5, 0x69, 0x90, 0x86, 0xd2, 0x5c, 0xb3, 0x69, 0x8d, 0x14, 0x20,
	0xd8, 0xd7, 0x6e, 0x1c, 0xa5, 0x3c, 0x4a, 0x8d, 0x66, 0xb9, 0xe5, 0x49, 0xd0, 0xfe, 0x3a, 0x94,
	0xb0, 0xf1, 0x58, 0xb6, 0xf3, 0xd0, 0x74, 0x3b, 0x6f, 0x5d, 0xcd, 0x0f, 0x23, 0x13, 0x5a, 0x9f,
	0x0c, 0x73, 0x22, 0xfb, 0x36, 0xa9, 0x77, 0xd3, 0x34, 0x71, 0x9a, 0xa5, 0x93, 0xcb, 0x4f, 0xa9,
	0x5f, 0x67, 0x69, 0x9a, 0x40, 0xa8, 0xdf, 0x4d, 0x38, 0x4b, 0x39, 0xba, 0x12, 0x4b, 0xf3, 0x97,
	0xc4, 0xcb, 0xf1, 0x22, 0xa2, 0xb4, 0xe6, 0x22, 0x8a, 0xfb, 0xd3, 0x0a, 0xe9, 0x0c, 0x66, 0xe2,
	0x57, 0x2a, 0xa0, 0x6c, 0xb7, 0x8d, 0x4f, 0xb5, 0xdb, 0xe6, 0xb3, 0x76, 0x6b, 0xcd, 0xef, 0xf6,
	0x97, 0x15, 0x48, 0xae, 0x1f, 0x7d, 0xee, 0xdd, 0x9a, 0x47, 0x5a, 0x7b, 0x9e, 0x23, 0xcd, 0x97,
	0x55, 0x9f, 0x0f, 0xeb, 0x85, 0xc9, 0x35, 0x16, 0x98, 0x9c, 0x4b, 0xda, 0x7d, 0x2e, 0x26, 0xf3,
	0x49, 0x41, 0x3b, 0xc9, 0xe0, 0xe7, 0x53, 0x04, 0xf7, 0xfb, 0x75, 0xcc, 0xf9, 0xb2, 0xb2, 0x05,
	0xa6, 0x02, 0x77, 0x99, 0x78, 0x81, 0x59, 0xeb, 0x16, 0xdf, 0x1e, 0x66, 0xb0, 0x7d, 0x87, 0xac,
	0x48, 0x9a, 0xae, 0xef, 0x97, 0xad, 0x7f, 0x65, 0xa8, 0x8d, 0x60, 0x36, 0xcd, 0x22, 0x01, 0x44,
	0xba, 0x6b, 0xb6, 0x86, 0x12, 0xc4, 0xdc, 0x94, 0x45, 0x42, 0xf1, 0xd1, 0x45, 0x41, 0x86, 0x39,
	0x8e, 0x81, 0x1e, 0x42, 0xef, 0x7c, 0x92, 0xa4, 0x50, 0xfb, 0x36, 0xe9, 0x20, 0x85, 0x62, 0xa4,
	0x4b, 0xa5, 0x73, 0x56, 0x0c, 0xa0, 0xc3, 0x4d, 0x59, 0x02, 0x34, 0x96, 0x11, 0xd1, 0x24, 0x08,
	0xeb, 0x81, 0x71, 0xc5, 0x46, 0xb7, 0x0f, 0x22, 0x72, 0x1c, 0x64, 0x74, 0x24, 0x46, 0x8a, 0x48,
	0x77, 0xdc, 0xed, 0x71, 0x06, 0xc3, 0x9b, 0x76, 0xd4, 0xce, 0x75, 0xcf, 0x6d, 0x9d, 0x15, 0x3b,
	0xdf, 0x29, 0x76, 0xae, 0xbb, 0x6f, 0x72, 0x56, 0xec, 0x1c, 0x4e, 0x03, 0xdb, 0x5d, 0x40, 0xa4,
	0x97, 0x1c, 0xed, 0x61, 0x06, 0xdb, 0xdb, 0xa4, 0x39, 0x88, 0xc4, 0x91, 0x18, 0x61, 0xe5, 0xa1,
	0xf7, 0xe4, 0x06, 0x91, 0xd8, 0x9b, 0x45, 0x6c, 0x1c, 0x78, 0x47, 0x62, 0xd4, 0x6f, 0x0a, 0xa4,
	0x92, 0xc9, 0x19, 0x98, 0x92, 0x91, 0x7b, 0x35, 0x13, 0xc4, 0xec, 0xd7, 0xc9, 0xea, 0x31, 0x7f,
	0x72, 0x8f, 0x33, 0x9f, 0x27, 0x90, 0xb7, 0x1b, 0x9f, 0xab, 0x56, 0x23, 0x7d, 0xc8, 0xfd, 0x41,
	0x85, 0xac, 0x1a, 0xef, 0x80, 0x5d, 0xdf, 0x8b, 0x1f, 0x73, 0xa9, 0x3b, 0xda, 0xae, 0x43, 0x09,
	0x9a, 0xda, 0x55, 0x35, 0xf6, 0x93, 0x6b, 0xd7, 0x6d, 0xd2, 0xb9, 0xc7, 0xd9, 0x63, 0x7e, 0x24,
	0x46, 0x52, 0x6f, 0xb4, 0x86, 0x7e, 0x58, 0x0c, 0x80, 0x16, 0xc2, 0x59, 0x9d, 0x9c, 0xc7, 0x11,
	0x97, 0xda, 0x53, 0x10, 0xae, 0x08, 0x6d, 0x04, 0x38, 0x82, 0x00, 0xf8, 0x24, 0x9c, 0x49, 0x15,
	0xd2, 0x38, 0x8e, 0x8b, 0x01, 0xf7, 0x7b, 0x75, 0xfc, 0x96, 0xf3, 0x42, 0x0b, 0x00, 0x87, 0xd4,
	0x31, 0x2b, 0x6c, 0x18, 0x5f, 0x25, 0x99, 0xee, 0xb8, 0xf4, 0xd4, 0xa3, 0x48, 0xfc, 0x7b, 0x42,
	0x9e, 0x04, 0x26, 0x1e, 0x5a, 0xd9, 0x24, 0x51, 0x23, 0x4a, 0xb6, 0x2e, 0x6f, 0x11, 0xab, 0xef,
	0xbe, 0x6d, 0x93, 0x87, 0xfa, 0xee, 0xfb, 0xab, 0xee, 0x51, 0x69, 0xc5, 0xcb, 0xda, 0x25, 0xbd,
	0xa1, 0xdf, 0x65, 0xf1, 0x49, 0xc8, 0x66, 0x86, 0x2a, 0x5b, 0x33, 0x09, 0x1a, 0xb5, 0xb1, 0xbd,
	0xb0, 0x36, 0x56, 0x9d, 0xae, 0x6b, 0xe5, 0x4e, 0x97, 0xde, 0x3e, 0x5f, 0x2f, 0x7d, 0x14, 0x40,
	0xd4, 0x15, 0xa4, 0x83, 0x3d, 0xf1, 0x63, 0xce, 0x92, 0xb3, 0x99, 0x5e, 0xe2, 0x83, 0xce, 0x2c,
	0x29, 0xf1, 0xab, 0xda, 0x70, 0x56, 0xe2, 0xdf, 0x26, 0x0d, 0x64, 0xe6, 0xd4, 0x30, 0xe4, 0x51,
	0xbd, 0x68, 0xc5, 0x2a, 0xb5, 0x01, 0x80, 0x70, 0xff, 0xb9, 0x82, 0x2d, 0x79, 0xac, 0xbc, 0x65,
	0x3a, 0x0c, 0x67, 0x74, 0x3f, 0xf4, 0x17, 0xe4, 0xc6, 0xed, 0x38, 0x83, 0xf1, 0x53, 0x56, 0xe8,
	0xcb, 0x43, 0x30, 0x0a, 0xa5, 0x58, 0xa1, 0x19, 0x17, 0x79, 0x14, 0xb5, 0x32, 0x97, 0xfc, 0x53,
	0x1c, 0x7a, 0x06, 0xe0, 0xa2, 0xab, 0x71, 0x2b, 0x52, 0x28, 0x70, 0x39, 0xe6, 0x4f, 0x14, 0x17,
	0xdd, 0x51, 0xb7, 0xa3, 0x0c, 0xb6, 0x6f, 0x91, 0xfa, 0xfd, 0xb3, 0x87, 0x42, 0xa5, 0x32, 0xc5,
	0x4e, 0xef, 0x9f, 0x3d, 0x3c, 0x8e, 0x7d, 0xde, 0xaf, 0xc7, 0x67, 0x0f, 0x85, 0xfb, 0x4d, 0x42,
	0xa0, 0x5e, 0x67, 0x11, 0x66, 0xae, 0x9f, 0xb6, 0x55, 0xfc, 0x77, 0x55, 0x14, 0xd3, 0x0e, 0x8b,
	0x20, 0xec, 0xaa, 0xb6, 0x59, 0x1d, 0x22, 0xbc, 0xca, 0x7d, 0x5d, 0xa3, 0x2b, 0x50, 0x90, 0x6d,
	0xab, 0xdf, 0xe0, 0x2d, 0xea, 0x90, 0x0b, 0x6f, 0xfe, 0x41, 0x15, 0xfd, 0xb4, 0x02, 0x35, 0xaf,
	0xd0, 0xd6, 0xbc, 0x02, 0x24, 0x06, 0x71, 0xe9, 0x66, 0x45, 0x3d, 0x8d, 0x7b, 0x86, 0xbf, 0xa8,
	0x2d, 0xc9, 0x71, 0xeb, 0xe5, 0x1c, 0x37, 0xab, 0x06, 0x1b, 0xda, 0x55, 0x09, 0x59, 0x0d, 0x2e,
	0xf3, 0x0a, 0x99, 0xf7, 0xb1, 0xe6, 0xee, 0x3e, 0x3c, 0xdb, 0x1b, 0x14, 0x25, 0x7b, 0x67, 0xbe,
	0x64, 0x77, 0xdf, 0x53, 0x5f, 0xa0, 0xc3, 0xcf, 0x7a, 0x24, 0x3f, 0xac, 0x11, 0x5b, 0xf5, 0x27,
	0x8f, 0xa7, 0xe3, 0xe7, 0xfc, 0x58, 0x5a, 0xa2, 0xde, 0x86, 0xe7, 0x4f, 0xf5, 0xb1, 0xf4, 0x52,
	0x06, 0xc5, 0xc7, 0xd2, 0xbf, 0xac, 0x92, 0x56, 0x06, 0xe7, 0xa5, 0x76, 0x65, 0xae, 0xd4, 0x5e,
	0x7c, 0x75, 0xc6, 0x38, 0xde, 0x25, 0xe1, 0xa0, 0x7e, 0x59, 0x38, 0x68, 0x94, 0xc3, 0x81, 0x4b,
	0xda, 0xbd, 0xc8, 0x3b, 0x60, 0x51, 0x39, 0x8d, 0x69, 0x07, 0x19, 0x0c, 0x34, 0xdd, 0x30, 0x54,
	0x34, 0x7a, 0x1a, 0xd3, 0x66, 0x19, 0xfc, 0x1c, 0x07, 0x7e, 0x8b, 0x10, 0xd8, 0xeb, 0xee, 0x39,
	0x8b, 0xd4, 0xfd, 0x9a, 0x46, 0x96, 0x80, 0x24, 0x39, 0x6e, 0xf4, 0xe7, 0xc8, 0xc2, 0xaf, 0xa3,
	0xdf, 0xd3, 0x1a, 0x87, 0xbb, 0x71, 0x14, 0x71, 0x2f, 0x95, 0xae, 0x82, 0xfb, 0xf0, 0x88, 0xb2,
	0x6c, 0x15, 0xae, 0x42, 0xa2, 0xc5, 0x25, 0x8d, 0xea, 0xfc, 0x25, 0x8d, 0x4d, 0xd2, 0xd8, 0x57,
	0xbd, 0x10, 0x6d, 0x4c, 0x66, 0xf3, 0xc5, 0xa5, 0x90, 0xfa, 0x82, 0x4b, 0x21, 0x59, 0x3d, 0x1d,
	0x98, 0xe5, 0xbc, 0xac, 0xa7, 0x03, 0xdf, 0x7d, 0x15, 0xbf, 0xa8, 0x0d, 0xe0, 0xef, 0x69, 0x76,
	0xe3, 0xa8, 0x52, 0x3a, 0x02, 0xf7, 0x2d, 0x42, 0x31, 0x29, 0x16, 0x3c, 0xcd, 0x6e, 0x3d, 0x3d,
	0xeb, 0x66, 0x95, 0x7b, 0x22, 0x3f, 0x95, 0x9e, 0xb3, 0x84, 0xdf, 0x3f, 0x7b, 0x08, 0x22, 0xb8,
	0x41, 0x9a, 0x3e, 0x9b, 0x45, 0xa5, 0x44, 0x48, 0x61, 0x20, 0xa0, 0x34, 0x4e, 0x59, 0x18, 0x95,
	0xd2, 0xa0, 0x1c, 0x75, 0x7f, 0x8b, 0x58, 0xca, 0x25, 0x6a, 0x4e, 0x67, 0x55, 0xd3, 0xbd, 0xcb,
	0x2a, 0xef, 0x6f, 0xd7, 0xc8, 0x35, 0x58, 0x0b, 0xb8, 0x5b, 0xa5, 0xfb, 0x87, 0xc1, 0x30, 0xb5,
	0xdf, 0x2f, 0xb7, 0x46, 0x6f, 0x1b, 0xdf, 0x6e, 0x4b, 0xe4, 0xdb, 0x08, 0x98, 0x1d, 0xd2, 0x3f,
	0xaf, 0x92, 0x76, 0x0e, 0x7f, 0xc6, 0xa2, 0xbe, 0x48, 0x90, 0x96, 0xb9, 0xa8, 0x4b, 0xcb, 0x7a,
	0xb4, 0x4e, 0xa3, 0xac, 0x37, 0x1b, 0x61, 0xa6, 0x53, 0xcc, 0x1a, 0x61, 0xb9, 0x06, 0x5b, 0x8b,
	0x34, 0x18, 0xf8, 0x7e, 0x14, 0x44, 0xbe, 0xd1, 0xa1, 0xa9, 0x5f, 0x04, 0x11, 0xf6, 0x31, 0xa1,
	0xe8, 0x0a, 0xcc, 0xdb, 0x42, 0x0a, 0x83, 0xbd, 0xc2, 0xaf, 0xf2, 0x55, 0xa1, 0x0c, 0x74, 0xa7,
	0xe4, 0x7a, 0x9f, 0xa7, 0xc7, 0x71, 0x1a, 0x0c, 0x67, 0x47, 0x71, 0xc4, 0x67, 0x47, 0x5c, 0x08,
	0xc8, 0x2e, 0x0a, 0xb6, 0x95, 0xe5, 0x6c, 0xab, 0x0b, 0xd8, 0xc2, 0x78, 0xc8, 0x87, 0x78, 0x43,
	0xa9, 0x66, 0xe4, 0xd8, 0x12, 0x74, 0x5d, 0x8c, 0x9d, 0x5d, 0xdf, 0x47, 0xa1, 0xad, 0x93, 0x06,
	0x88, 0x57, 0x1e, 0xfa, 0x6a, 0x5f, 0x3e, 0xb8, 0xaf, 0xca, 0xfb, 0x62, 0x3c, 0x05, 0x1a, 0x71,
	0x09, 0x51, 0x82, 0x86, 0xf0, 0xdb, 0x53, 0x2e, 0xa0, 0x3a, 0x8c, 0x58, 0x90, 0x7c, 0xde, 0xa5,
	0x6f, 0x91, 0x96, 0x17, 0x8f, 0x27, 0x21, 0x4f, 0xa5, 0x71, 0xe7, 0x67, 0x91, 0xa1, 0xee, 0x5f,
	0x55, 0xf1, 0x4e, 0xcd, 0x49, 0xc2, 0x4f, 0x39, 0x1b, 0x1f, 0xf1, 0xb1, 0x0a, 0x13, 0x2d, 0xf5,
	0x28, 0x16, 0x45, 0x70, 0x93, 0x7a, 0x5b, 0xfd, 0xee, 0xb7, 0x52, 0x35, 0x67, 0xf3, 0x27, 0x15,
	0x62, 0x29, 0xf4, 0x8b, 0xf3, 0xf1, 0x4b, 0x66, 0x5a, 0xd6, 0xb2, 0xa4, 0xb9, 0x35, 0x9f, 0x34,
	0xbb, 0x7f, 0x5d, 0x25, 0xeb, 0x2a, 0x6d, 0x14, 0xbd, 0xe8, 0x71, 0x90, 0x72, 0x95, 0xa2, 0x76,
	0x89, 0xd5, 0x8b, 0x1e, 0x6b, 0x32, 0x7c, 0xad, 0x9c, 0x66, 0x1a, 0xf4, 0xdb, 0xf2, 0x01, 0x04,
	0x69, 0x05, 0x72, 0xde, 0xe6, 0x4f, 0x2b, 0x10, 0x9e, 0x14, 0xfc, 0xff, 0x5e, 0x92, 0x67, 0x98,
	0xb2, 0x9c, 0xc6, 0x3e, 0x9b, 0x9d, 0xe2, 0xed, 0x3f, 0x6c, 0x66, 0x3a, 0xa4, 0x3e, 0x4c, 0x38,
	0x47, 0xfd, 0x6f, 0xe5, 0x1d, 0xd7, 0x84, 0x63, 0xfa, 0xc5, 0x9f, 0x7a, 0xe7, 0xa8, 0xfa, 0xf9,
	0x08, 0x20, 0x38, 0x07, 0x6a, 0xe9, 0x9a, 0x31, 0x07, 0x4a, 0xe8, 0x1d, 0x42, 0xb0, 0x34, 0x15,
	0x59, 0xaf, 0x75, 0x87, 0x09, 0x1e, 0x94, 0x7a, 0xad, 0x67, 0x88, 0x5d, 0xea, 0xf1, 0xbf, 0x86,
	0xeb, 0xdc, 0x7f, 0xea, 0x61, 0xc8, 0x56, 0x97, 0xe1, 0xf4, 0x0c, 0xad, 0xa5, 0x65, 0x68, 0xee,
	0x57, 0x31, 0x95, 0xdb, 0x09, 0x22, 0x7f, 0x57, 0xde, 0x6f, 0x75, 0x48, 0xdd, 0x93, 0xb7, 0x17,
	0x35, 0xf7, 0x07, 0x88, 0x62, 0x8c, 0x91, 0x5d, 0xa3, 0xdf, 0x20, 0x35, 0xe6, 0x79, 0x48, 0x9e,
	0xdf, 0x87, 0x60, 0x9e, 0xe7, 0xde, 0x45, 0xcb, 0x45, 0xea, 0xae, 0xe7, 0x9d, 0x3c, 0x81, 0x29,
	0x4b, 0x98, 0xbf, 0x87, 0xe4, 0x47, 0x62, 0xa4, 0xfa, 0xb1, 0x68, 0xe8, 0xaf, 0x9b, 0x3d, 0xea,
	0xf5, 0x5c, 0x43, 0xb5, 0xa6, 0x6d, 0xd6, 0xa5, 0xce, 0x19, 0xa8, 0x7e, 0xe5, 0x72, 0x06, 0x5a,
	0x53, 0x73, 0x8e, 0x81, 0x6a, 0x01, 0x2e, 0x67, 0xa0, 0xf5, 0x09, 0x33, 0x06, 0x07, 0x18, 0xf5,
	0x91, 0x01, 0xf3, 0x61, 0xb0, 0x10, 0x7a, 0xd5, 0x4c, 0x8b, 0x55, 0x63, 0x31, 0xf0, 0x0d, 0x9b,
	0xc0, 0xc6, 0x62, 0xe0, 0xbb, 0xaf, 0xe1, 0x91, 0x1c, 0x89, 0xd1, 0x1e, 0x0f, 0x97, 0xb1, 0x01,
	0xd7, 0x2e, 0xfb, 0x93, 0xa5, 0x5b, 0xa0, 0x5a, 0x31, 0xe2, 0xfe, 0x4e, 0xb1, 0x28, 0xef, 0xf1,
	0xd2, 0x45, 0xdd, 0x25, 0x96, 0xe4, 0x26, 0x9c, 0x6a, 0xe9, 0x4b, 0x57, 0xf1, 0x96, 0xbe, 0x25,
	0xbb, 0x9f, 0xc2, 0xbd, 0x8b, 0x79, 0xc5, 0x91, 0x18, 0x3d, 0x98, 0xf8, 0x2c, 0xe5, 0x4a, 0x1e,
	0x97, 0xae, 0x75, 0x1f, 0x37, 0x05, 0xb9, 0xc4, 0x61, 0xf0, 0x38, 0x88, 0x46, 0x46, 0xe8, 0xa8,
	0xce, 0x85, 0x8e, 0x0d, 0x02, 0xb3, 0x4c, 0xe5, 0x06, 0x36, 0x52, 0x36, 0x5d, 0x71, 0x11, 0x44,
	0x23, 0xcc, 0x63, 0x2e, 0x21, 0x7c, 0xfd, 0x0f, 0x57, 0x89, 0x75, 0x24, 0x46, 0xd8, 0x18, 0x68,
	0x93, 0x06, 0x5e, 0x8a, 0xa7, 0x15, 0x7b, 0x85, 0xb4, 0xb2, 0x6b, 0xd1, 0xb4, 0x6a, 0x53, 0xbc,
	0xe4, 0x99, 0xdf, 0x6f, 0xa6, 0x35, 0x18, 0xcf, 0xae, 0xf2, 0xd2, 0xba, 0xbd, 0x46, 0x48, 0x71,
	0xcd, 0x96, 0x36, 0xe0, 0xb9, 0xb8, 0xd5, 0x46, 0x9b, 0xf6, 0x2a, 0x69, 0xe7, 0x17, 0xa0, 0xa8,
	0x05, 0x93, 0xb3, 0xfb, 0x4c, 0xb4, 0x05, 0xc4, 0xc5, 0x3d, 0x11, 0xda, 0x86, 0xd1, 0xec, 0x3e,
	0x06, 0x25, 0x30, 0x35, 0xff, 0xfe, 0x4c, 0x3b, 0x72, 0x25, 0x45, 0xdf, 0x95, 0xae, 0x00, 0xa2,
	0x7f, 0x52, 0xa7, 0xab, 0xc0, 0xb0, 0xeb, 0xfb, 0xaa, 0xe4, 0xa2, 0x6b, 0xf0, 0x7c, 0x98, 0x57,
	0xc5, 0xf4, 0x8a, 0x5c, 0x6d, 0x56, 0x92, 0x51, 0xaa, 0x56, 0x27, 0xcb, 0x38, 0x7a, 0xd5, 0xbe,
	0x42, 0x3a, 0x87, 0xe0, 0xbf, 0x26, 0xe8, 0xe3, 0xa8, 0x9d, 0xbf, 0x41, 0xa5, 0xe9, 0xf4, 0x1a,
	0x20, 0x1f, 0xc6, 0x81, 0xbc, 0x2a, 0x02, 0xf2, 0x58, 0xc7, 0x4d, 0xe4, 0x77, 0xf0, 0xe8, 0x75,
	0xfb, 0x2a, 0xc8, 0x5f, 0x4c, 0x60, 0xd7, 0x08, 0xd3, 0x0d, 0xdb, 0x26, 0x6b, 0xe6, 0xed, 0x33,
	0xfa, 0x92, 0xdd, 0xc1, 0x1b, 0xe7, 0x83, 0x94, 0x25, 0xd4, 0x81, 0x8d, 0x77, 0xa7, 0xe9, 0x39,
	0xb8, 0x21, 0xfa, 0x32, 0x0c, 0x81, 0x2b, 0x38, 0xe5, 0x21, 0xdd, 0xb4, 0xd7, 0x21, 0xa7, 0x78,
	0x64, 0x24, 0xd7, 0xf4, 0xcb, 0x52, 0xcc, 0xa9, 0x0a, 0x1b, 0xf4, 0x06, 0x6c, 0x64, 0xa0, 0x08,
	0x7c, 0xfa, 0x6b, 0xc0, 0x61, 0x20, 0x53, 0x15, 0x7a, 0x33, 0xdf, 0x44, 0xc6, 0xf3, 0x15, 0x9b,
	0x90, 0x26, 0xcc, 0x1e, 0x71, 0xba, 0xa5, 0x7e, 0x0f, 0xf8, 0x53, 0xfa, 0x15, 0x49, 0x09, 0x2e,
	0x51, 0x31, 0x72, 0x41, 0x22, 0x7d, 0xfe, 0x28, 0x5f, 0xdb, 0xab, 0xf6, 0x97, 0xc9, 0x4b, 0x92,
	0x44, 0x71, 0x1b, 0x4c, 0xcf, 0xc6, 0x01, 0xfa, 0x4f, 0x7a, 0xcb, 0x7e, 0x99, 0x5c, 0x5f, 0x30,
	0x78, 0xff, 0x82, 0xfe, 0x3a, 0x6c, 0x03, 0x17, 0x71, 0x3f, 0xf4, 0xf3, 0x6d, 0xdc, 0xc6, 0x65,
	0x43, 0x09, 0x00, 0x3e, 0x82, 0xbe, 0x06, 0x6f, 0xd3, 0x0a, 0x50, 0x7a, 0xc7, 0x7e, 0x09, 0x2c,
	0xe8, 0x51, 0x39, 0xd5, 0xa6, 0xbf, 0x61, 0x6f, 0x10, 0x7b, 0x3e, 0x4d, 0xa4, 0x5f, 0x53, 0x52,
	0xc5, 0x8d, 0xdf, 0x45, 0x4d, 0x56, 0x09, 0x1b, 0xdd, 0x06, 0xe6, 0x5a, 0x1b, 0x88, 0xbe, 0x01,
	0x07, 0x65, 0xa4, 0x6a, 0xf4, 0x4d, 0x38, 0x28, 0x33, 0x35, 0xa2, 0x5f, 0x07, 0xb2, 0x41, 0x24,
	0x34, 0x25, 0x7f, 0x1b, 0x58, 0x0d, 0x64, 0x02, 0x30, 0x08, 0x46, 0x11, 0xfd, 0x26, 0x00, 0x5d,
	0xdf, 0xef, 0x4e, 0xfd, 0x80, 0x47, 0x1e, 0xa7, 0xef, 0x80, 0x24, 0x0f, 0x79, 0x7a, 0x72, 0x1e,
	0xa7, 0xd8, 0x26, 0xa1, 0xef, 0xca, 0xad, 0xc6, 0x4f, 0x10, 0xa2, 0xef, 0x81, 0xd8, 0x4f, 0x12,
	0x16, 0x08, 0x4e, 0xdf, 0x87, 0xa1, 0x3d, 0x1e, 0xaa, 0xc7, 0x2e, 0x2c, 0x1b, 0x1e, 0x91, 0x70,
	0x27, 0x57, 0xd1, 0x49, 0x9c, 0xa4, 0x74, 0x17, 0x1e, 0xf1, 0xc3, 0x2f, 0x72, 0xdd, 0x83, 0x47,
	0xfc, 0x18, 0x89, 0x8f, 0xfb, 0xa8, 0xef, 0xf9, 0x75, 0x67, 0x7a, 0x60, 0x5f, 0x23, 0x57, 0x4a,
	0xd1, 0x98, 0x1e, 0x02, 0xff, 0x9e, 0x50, 0x0c, 0x3f, 0x50, 0x2b, 0x95, 0x8f, 0x60, 0xd2, 0x3d,
	0x98, 0x54, 0x0a, 0x8d, 0xf4, 0x43, 0x98, 0x94, 0x79, 0x7c, 0xfa, 0x2d, 0x78, 0xca, 0x3c, 0x38,
	0x65, 0x20, 0x74, 0xe5, 0x87, 0xe9, 0x99, 0x1c, 0x92, 0x7e, 0x94, 0x7a, 0x52, 0xc6, 0x81, 0x77,
	0x91, 0x43, 0x3e, 0x68, 0x42, 0x0e, 0xa9, 0x18, 0x43, 0x39, 0x10, 0xee, 0xf1, 0xb0, 0x1b, 0x86,
	0x19, 0x34, 0x04, 0xc8, 0x70, 0x9c, 0x74, 0x54, 0x50, 0x65, 0xd0, 0xb9, 0x5a, 0x3f, 0x3c, 0x60,
	0xca, 0x43, 0x83, 0xc2, 0x20, 0x91, 0x22, 0x42, 0x5b, 0x99, 0x89, 0x94, 0x8f, 0xf1, 0x39, 0x56,
	0x3a, 0x0d, 0x27, 0x8f, 0xc0, 0x04, 0x4f, 0x98, 0xa7, 0xdd, 0xc9, 0x24, 0x9c, 0x49, 0x1e, 0x8f,
	0xec, 0x2b, 0x84, 0x14, 0x8e, 0x98, 0x7e, 0x5c, 0x01, 0xa0, 0x70, 0xa9, 0xf4, 0x6f, 0x2a, 0x36,
	0x55, 0xea, 0xd4, 0xf3, 0x77, 0x59, 0xe2, 0xd3, 0xbf, 0x45, 0x92, 0x22, 0xe8, 0xd3, 0xff, 0x6c,
	0xd8, 0xeb, 0xe4, 0x4a, 0x29, 0x15, 0xa0, 0x3f, 0x6b, 0xd8, 0xd7, 0xc8, 0x9a, 0x19, 0xf2, 0xe9,
	0xcf, 0x11, 0x94, 0x7b, 0xcd, 0x6e, 0x18, 0xd3, 0x7f, 0xb1, 0x00, 0x3c, 0x54, 0x79, 0xa6, 0xcc,
	0x30, 0xe9, 0x4f, 0x2c, 0x60, 0x5a, 0x50, 0x86, 0x7b, 0x5c, 0x78, 0xf4, 0x5f, 0x2d, 0x58, 0xcd,
	0x21, 0x4f, 0x81, 0x0a, 0xbd, 0xd2, 0xbf, 0x21, 0x1d, 0x28, 0xbf, 0x96, 0x9f, 0xd2, 0x7f, 0xb7,
	0x6c, 0x87, 0x5c, 0xc3, 0xd3, 0xf6, 0x78, 0x94, 0x82, 0x9a, 0x2b, 0x17, 0xf5, 0x1f, 0x96, 0xbd,
	0x86, 0xa6, 0x78, 0xc1, 0xef, 0x4f, 0x78, 0x44, 0x7f, 0x66, 0xd9, 0x57, 0xc9, 0x0a, 0x3e, 0xab,
	0x15, 0xd0, 0x9f, 0x23, 0x4b, 0x84, 0xe4, 0xfb, 0x4f, 0x83, 0x31, 0xa7, 0xbf, 0xc0, 0x89, 0x7d,
	0xe6, 0xb3, 0x04, 0x27, 0xfe, 0x12, 0x27, 0xe2, 0x73, 0x36, 0xf1, 0xbf, 0x71, 0x75, 0x08, 0xed,
	0x86, 0xb1, 0xe0, 0x3e, 0xfd, 0x1f, 0x0b, 0x64, 0x75, 0x70, 0x00, 0x8e, 0xf4, 0x90, 0x8d, 0x39,
	0xfd, 0x5f, 0x6b, 0x87, 0x7e, 0xfc, 0xc9, 0xcd, 0xca, 0xdf, 0x7f, 0x72, 0xb3, 0xf2, 0x4f, 0x9f,
	0xdc, 0xac, 0xfc, 0xf1, 0x8f, 0x6e, 0x7e, 0xe9, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0x2d,
	0xc7, 0xed, 0xf2, 0x35, 0x00, 0x00,
}
