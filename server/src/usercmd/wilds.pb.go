// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wilds.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		wilds.proto

	It has these top-level messages:
		MsgChangeCubeHeight
		CubeReDst
		MsgDoNothing
		BanBarrageMsg
		MsgLogin
		RetErrorMsgCmd
		MsgLoginResult
		MsgTop
		MsgSceneTCP
		MsgSceneUDP
		MsgBindTCPSession
		MsgPlayer
		MsgAddPlayer
		MsgRefreshPlayer
		MsgAsyncPlayerAnimal
		MsgRemovePlayer
		MsgMove
		MsgRelife
		MsgS2CRelife
		MsgDeath
		EndPlayer
		Anchor
		MsgEndRoom
		ClientHeartBeat
		MsgCastSkill
		RetVoiceInfo
		ReqToSpeak
		RetToSpeak
		RetSpeakUser
		RetTeamRankList
		RetTeamMemPos
		ReqPlayerState
		RetPlayerState
		RetAddComment
		RetBeJoined
		MsgRun
		MsgSceneChat
		MsgS2CSceneChat
		MsgPlayerSnap
		MsgBall
		MsgPlayerBall
		BallMove
		BallEat
		HitMsg
		UpdateTeamInfoMsg
		TeamInfoMsg
		TeamNoticeMsg
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgTypeCmd int32

const (
	MsgTypeCmd_Login             MsgTypeCmd = 1
	MsgTypeCmd_Top               MsgTypeCmd = 2
	MsgTypeCmd_AddPlayer         MsgTypeCmd = 3
	MsgTypeCmd_RemovePlayer      MsgTypeCmd = 4
	MsgTypeCmd_Move              MsgTypeCmd = 6
	MsgTypeCmd_Run               MsgTypeCmd = 7
	MsgTypeCmd_ReLife            MsgTypeCmd = 9
	MsgTypeCmd_Death             MsgTypeCmd = 10
	MsgTypeCmd_EndRoom           MsgTypeCmd = 11
	MsgTypeCmd_RefreshPlayer     MsgTypeCmd = 13
	MsgTypeCmd_AsyncPlayerAnimal MsgTypeCmd = 14
	MsgTypeCmd_HeartBeat         MsgTypeCmd = 16
	MsgTypeCmd_SceneChat         MsgTypeCmd = 20
	MsgTypeCmd_ActCloseSocket    MsgTypeCmd = 21
	MsgTypeCmd_ErrorMsg          MsgTypeCmd = 25
	MsgTypeCmd_SceneTCP          MsgTypeCmd = 31
	MsgTypeCmd_SceneUDP          MsgTypeCmd = 32
	MsgTypeCmd_BindTCPSession    MsgTypeCmd = 33
	MsgTypeCmd_TeamRankList      MsgTypeCmd = 40
	MsgTypeCmd_TeamMemPos        MsgTypeCmd = 41
	MsgTypeCmd_TeamNotice        MsgTypeCmd = 42
	MsgTypeCmd_CastSkill         MsgTypeCmd = 50
	MsgTypeCmd_EndQRoom          MsgTypeCmd = 65
	// 以下暂为整理
	MsgTypeCmd_VoiceInfo        MsgTypeCmd = 36
	MsgTypeCmd_ToSpeak          MsgTypeCmd = 37
	MsgTypeCmd_SpeakUser        MsgTypeCmd = 38
	MsgTypeCmd_UpdateTeamInfo   MsgTypeCmd = 77
	MsgTypeCmd_PlayerAnchor     MsgTypeCmd = 504
	MsgTypeCmd_PlayerUnAnchor   MsgTypeCmd = 505
	MsgTypeCmd_GetPlayerList    MsgTypeCmd = 507
	MsgTypeCmd_DoNothing        MsgTypeCmd = 701
	MsgTypeCmd_ChangeCubeHeight MsgTypeCmd = 702
)

var MsgTypeCmd_name = map[int32]string{
	1:   "Login",
	2:   "Top",
	3:   "AddPlayer",
	4:   "RemovePlayer",
	6:   "Move",
	7:   "Run",
	9:   "ReLife",
	10:  "Death",
	11:  "EndRoom",
	13:  "RefreshPlayer",
	14:  "AsyncPlayerAnimal",
	16:  "HeartBeat",
	20:  "SceneChat",
	21:  "ActCloseSocket",
	25:  "ErrorMsg",
	31:  "SceneTCP",
	32:  "SceneUDP",
	33:  "BindTCPSession",
	40:  "TeamRankList",
	41:  "TeamMemPos",
	42:  "TeamNotice",
	50:  "CastSkill",
	65:  "EndQRoom",
	36:  "VoiceInfo",
	37:  "ToSpeak",
	38:  "SpeakUser",
	77:  "UpdateTeamInfo",
	504: "PlayerAnchor",
	505: "PlayerUnAnchor",
	507: "GetPlayerList",
	701: "DoNothing",
	702: "ChangeCubeHeight",
}
var MsgTypeCmd_value = map[string]int32{
	"Login":             1,
	"Top":               2,
	"AddPlayer":         3,
	"RemovePlayer":      4,
	"Move":              6,
	"Run":               7,
	"ReLife":            9,
	"Death":             10,
	"EndRoom":           11,
	"RefreshPlayer":     13,
	"AsyncPlayerAnimal": 14,
	"HeartBeat":         16,
	"SceneChat":         20,
	"ActCloseSocket":    21,
	"ErrorMsg":          25,
	"SceneTCP":          31,
	"SceneUDP":          32,
	"BindTCPSession":    33,
	"TeamRankList":      40,
	"TeamMemPos":        41,
	"TeamNotice":        42,
	"CastSkill":         50,
	"EndQRoom":          65,
	"VoiceInfo":         36,
	"ToSpeak":           37,
	"SpeakUser":         38,
	"UpdateTeamInfo":    77,
	"PlayerAnchor":      504,
	"PlayerUnAnchor":    505,
	"GetPlayerList":     507,
	"DoNothing":         701,
	"ChangeCubeHeight":  702,
}

func (x MsgTypeCmd) Enum() *MsgTypeCmd {
	p := new(MsgTypeCmd)
	*p = x
	return p
}
func (x MsgTypeCmd) String() string {
	return proto.EnumName(MsgTypeCmd_name, int32(x))
}
func (x *MsgTypeCmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgTypeCmd_value, data, "MsgTypeCmd")
	if err != nil {
		return err
	}
	*x = MsgTypeCmd(value)
	return nil
}
func (MsgTypeCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorWilds, []int{0} }

// 消息类型
type SystemMsgType int32

const (
	SystemMsgType_SMNone    SystemMsgType = 0
	SystemMsgType_SMKilled  SystemMsgType = 1
	SystemMsgType_SMEat     SystemMsgType = 2
	SystemMsgType_SMEat1    SystemMsgType = 3
	SystemMsgType_SMBreak   SystemMsgType = 4
	SystemMsgType_SMFirst   SystemMsgType = 5
	SystemMsgType_SMInTop   SystemMsgType = 6
	SystemMsgType_SMBeBreak SystemMsgType = 7
)

var SystemMsgType_name = map[int32]string{
	0: "SMNone",
	1: "SMKilled",
	2: "SMEat",
	3: "SMEat1",
	4: "SMBreak",
	5: "SMFirst",
	6: "SMInTop",
	7: "SMBeBreak",
}
var SystemMsgType_value = map[string]int32{
	"SMNone":    0,
	"SMKilled":  1,
	"SMEat":     2,
	"SMEat1":    3,
	"SMBreak":   4,
	"SMFirst":   5,
	"SMInTop":   6,
	"SMBeBreak": 7,
}

func (x SystemMsgType) Enum() *SystemMsgType {
	p := new(SystemMsgType)
	*p = x
	return p
}
func (x SystemMsgType) String() string {
	return proto.EnumName(SystemMsgType_name, int32(x))
}
func (x *SystemMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SystemMsgType_value, data, "SystemMsgType")
	if err != nil {
		return err
	}
	*x = SystemMsgType(value)
	return nil
}
func (SystemMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorWilds, []int{1} }

type MapObjectConfigType int32

const (
	MapObjectConfigType_Empty MapObjectConfigType = 0
	MapObjectConfigType_Block MapObjectConfigType = 1
)

var MapObjectConfigType_name = map[int32]string{
	0: "Empty",
	1: "Block",
}
var MapObjectConfigType_value = map[string]int32{
	"Empty": 0,
	"Block": 1,
}

func (x MapObjectConfigType) Enum() *MapObjectConfigType {
	p := new(MapObjectConfigType)
	*p = x
	return p
}
func (x MapObjectConfigType) String() string {
	return proto.EnumName(MapObjectConfigType_name, int32(x))
}
func (x *MapObjectConfigType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MapObjectConfigType_value, data, "MapObjectConfigType")
	if err != nil {
		return err
	}
	*x = MapObjectConfigType(value)
	return nil
}
func (MapObjectConfigType) EnumDescriptor() ([]byte, []int) { return fileDescriptorWilds, []int{2} }

type BallType int32

const (
	BallType_Player      BallType = 1
	BallType_FoodBegin   BallType = 10
	BallType_FoodNormal  BallType = 11
	BallType_FoodHammer  BallType = 12
	BallType_FoodBomb    BallType = 13
	BallType_FoodEnd     BallType = 19
	BallType_FeedBegin   BallType = 20
	BallType_FeedNormal  BallType = 21
	BallType_FeedEnd     BallType = 29
	BallType_SkillBegin  BallType = 30
	BallType_SkillHammer BallType = 31
	BallType_SkillBomb   BallType = 32
	BallType_SkillEnd    BallType = 39
)

var BallType_name = map[int32]string{
	1:  "Player",
	10: "FoodBegin",
	11: "FoodNormal",
	12: "FoodHammer",
	13: "FoodBomb",
	19: "FoodEnd",
	20: "FeedBegin",
	21: "FeedNormal",
	29: "FeedEnd",
	30: "SkillBegin",
	31: "SkillHammer",
	32: "SkillBomb",
	39: "SkillEnd",
}
var BallType_value = map[string]int32{
	"Player":      1,
	"FoodBegin":   10,
	"FoodNormal":  11,
	"FoodHammer":  12,
	"FoodBomb":    13,
	"FoodEnd":     19,
	"FeedBegin":   20,
	"FeedNormal":  21,
	"FeedEnd":     29,
	"SkillBegin":  30,
	"SkillHammer": 31,
	"SkillBomb":   32,
	"SkillEnd":    39,
}

func (x BallType) Enum() *BallType {
	p := new(BallType)
	*p = x
	return p
}
func (x BallType) String() string {
	return proto.EnumName(BallType_name, int32(x))
}
func (x *BallType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BallType_value, data, "BallType")
	if err != nil {
		return err
	}
	*x = BallType(value)
	return nil
}
func (BallType) EnumDescriptor() ([]byte, []int) { return fileDescriptorWilds, []int{3} }

// added: 玩家按键触发体态的改变，从而改变所在方块的上下位置
type MsgChangeCubeHeight struct {
	UporDown bool `protobuf:"varint,1,opt,name=UporDown,json=uporDown" json:"UporDown"`
}

func (m *MsgChangeCubeHeight) Reset()                    { *m = MsgChangeCubeHeight{} }
func (m *MsgChangeCubeHeight) String() string            { return proto.CompactTextString(m) }
func (*MsgChangeCubeHeight) ProtoMessage()               {}
func (*MsgChangeCubeHeight) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{0} }

func (m *MsgChangeCubeHeight) GetUporDown() bool {
	if m != nil {
		return m.UporDown
	}
	return false
}

// added: 服务器通过MsgSceneUDP这个包，包含该信息，在方块移动过程中实时地告诉客户端某方块仍然需要上/下移的距离
type CubeReDst struct {
	CubeIndex      uint32 `protobuf:"varint,1,opt,name=cubeIndex" json:"cubeIndex"`
	RemainDistance uint32 `protobuf:"varint,2,opt,name=remainDistance" json:"remainDistance"`
}

func (m *CubeReDst) Reset()                    { *m = CubeReDst{} }
func (m *CubeReDst) String() string            { return proto.CompactTextString(m) }
func (*CubeReDst) ProtoMessage()               {}
func (*CubeReDst) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{1} }

func (m *CubeReDst) GetCubeIndex() uint32 {
	if m != nil {
		return m.CubeIndex
	}
	return 0
}

func (m *CubeReDst) GetRemainDistance() uint32 {
	if m != nil {
		return m.RemainDistance
	}
	return 0
}

type MsgDoNothing struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Hello string `protobuf:"bytes,2,opt,name=hello" json:"hello"`
}

func (m *MsgDoNothing) Reset()                    { *m = MsgDoNothing{} }
func (m *MsgDoNothing) String() string            { return proto.CompactTextString(m) }
func (*MsgDoNothing) ProtoMessage()               {}
func (*MsgDoNothing) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{2} }

func (m *MsgDoNothing) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgDoNothing) GetHello() string {
	if m != nil {
		return m.Hello
	}
	return ""
}

// 返回统一错误码
type BanBarrageMsg struct {
	RetCode   uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
	Params    uint32 `protobuf:"varint,2,opt,name=Params,json=params" json:"Params"`
	JsonParam string `protobuf:"bytes,3,opt,name=JsonParam,json=jsonParam" json:"JsonParam"`
}

func (m *BanBarrageMsg) Reset()                    { *m = BanBarrageMsg{} }
func (m *BanBarrageMsg) String() string            { return proto.CompactTextString(m) }
func (*BanBarrageMsg) ProtoMessage()               {}
func (*BanBarrageMsg) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{3} }

func (m *BanBarrageMsg) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *BanBarrageMsg) GetParams() uint32 {
	if m != nil {
		return m.Params
	}
	return 0
}

func (m *BanBarrageMsg) GetJsonParam() string {
	if m != nil {
		return m.JsonParam
	}
	return ""
}

// 请求登录
type MsgLogin struct {
	Name string `protobuf:"bytes,1,req,name=name" json:"name"`
	Key  string `protobuf:"bytes,2,req,name=key" json:"key"`
}

func (m *MsgLogin) Reset()                    { *m = MsgLogin{} }
func (m *MsgLogin) String() string            { return proto.CompactTextString(m) }
func (*MsgLogin) ProtoMessage()               {}
func (*MsgLogin) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{4} }

func (m *MsgLogin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgLogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// 返回统一错误码
type RetErrorMsgCmd struct {
	RetCode   uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
	Params    uint32 `protobuf:"varint,2,opt,name=Params,json=params" json:"Params"`
	JsonParam string `protobuf:"bytes,3,opt,name=JsonParam,json=jsonParam" json:"JsonParam"`
}

func (m *RetErrorMsgCmd) Reset()                    { *m = RetErrorMsgCmd{} }
func (m *RetErrorMsgCmd) String() string            { return proto.CompactTextString(m) }
func (*RetErrorMsgCmd) ProtoMessage()               {}
func (*RetErrorMsgCmd) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{5} }

func (m *RetErrorMsgCmd) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RetErrorMsgCmd) GetParams() uint32 {
	if m != nil {
		return m.Params
	}
	return 0
}

func (m *RetErrorMsgCmd) GetJsonParam() string {
	if m != nil {
		return m.JsonParam
	}
	return ""
}

// 返回登录
type MsgLoginResult struct {
	Ok           bool             `protobuf:"varint,1,req,name=ok" json:"ok"`
	Id           uint64           `protobuf:"varint,2,req,name=id" json:"id"`
	Name         string           `protobuf:"bytes,3,opt,name=name" json:"name"`
	Others       []*MsgPlayer     `protobuf:"bytes,4,rep,name=others" json:"others,omitempty"`
	Frame        uint32           `protobuf:"varint,5,req,name=frame" json:"frame"`
	Local        uint32           `protobuf:"varint,6,req,name=Local,json=local" json:"Local"`
	RoomName     string           `protobuf:"bytes,7,opt,name=RoomName,json=roomName" json:"RoomName"`
	BallId       uint32           `protobuf:"varint,8,req,name=ballId" json:"ballId"`
	Balls        []*MsgBall       `protobuf:"bytes,9,rep,name=balls" json:"balls,omitempty"`
	Playerballs  []*MsgPlayerBall `protobuf:"bytes,10,rep,name=playerballs" json:"playerballs,omitempty"`
	TeamName     uint32           `protobuf:"varint,11,opt,name=TeamName,json=teamName" json:"TeamName"`
	TeamId       uint32           `protobuf:"varint,12,opt,name=TeamId,json=teamId" json:"TeamId"`
	TeamNoticeCD uint32           `protobuf:"varint,13,opt,name=TeamNoticeCD,json=teamNoticeCD" json:"TeamNoticeCD"`
	LeftTime     uint32           `protobuf:"varint,14,opt,name=leftTime" json:"leftTime"`
}

func (m *MsgLoginResult) Reset()                    { *m = MsgLoginResult{} }
func (m *MsgLoginResult) String() string            { return proto.CompactTextString(m) }
func (*MsgLoginResult) ProtoMessage()               {}
func (*MsgLoginResult) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{6} }

func (m *MsgLoginResult) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MsgLoginResult) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgLoginResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgLoginResult) GetOthers() []*MsgPlayer {
	if m != nil {
		return m.Others
	}
	return nil
}

func (m *MsgLoginResult) GetFrame() uint32 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *MsgLoginResult) GetLocal() uint32 {
	if m != nil {
		return m.Local
	}
	return 0
}

func (m *MsgLoginResult) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *MsgLoginResult) GetBallId() uint32 {
	if m != nil {
		return m.BallId
	}
	return 0
}

func (m *MsgLoginResult) GetBalls() []*MsgBall {
	if m != nil {
		return m.Balls
	}
	return nil
}

func (m *MsgLoginResult) GetPlayerballs() []*MsgPlayerBall {
	if m != nil {
		return m.Playerballs
	}
	return nil
}

func (m *MsgLoginResult) GetTeamName() uint32 {
	if m != nil {
		return m.TeamName
	}
	return 0
}

func (m *MsgLoginResult) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *MsgLoginResult) GetTeamNoticeCD() uint32 {
	if m != nil {
		return m.TeamNoticeCD
	}
	return 0
}

func (m *MsgLoginResult) GetLeftTime() uint32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

// 返回排行榜Top
type MsgTop struct {
	Players []*MsgPlayer `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EndTime uint32       `protobuf:"varint,3,opt,name=EndTime,json=endTime" json:"EndTime"`
	Rank    uint32       `protobuf:"varint,4,opt,name=Rank,json=rank" json:"Rank"`
	KillNum uint32       `protobuf:"varint,5,opt,name=KillNum,json=killNum" json:"KillNum"`
}

func (m *MsgTop) Reset()                    { *m = MsgTop{} }
func (m *MsgTop) String() string            { return proto.CompactTextString(m) }
func (*MsgTop) ProtoMessage()               {}
func (*MsgTop) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{7} }

func (m *MsgTop) GetPlayers() []*MsgPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *MsgTop) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MsgTop) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *MsgTop) GetKillNum() uint32 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

type MsgSceneTCP struct {
	Eats          []*BallEat       `protobuf:"bytes,1,rep,name=eats" json:"eats,omitempty"`
	Adds          []*MsgBall       `protobuf:"bytes,2,rep,name=adds" json:"adds,omitempty"`
	Removes       []uint32         `protobuf:"varint,3,rep,name=removes" json:"removes,omitempty"`
	Hits          []*HitMsg        `protobuf:"bytes,4,rep,name=hits" json:"hits,omitempty"`
	AddPlayers    []*MsgPlayerBall `protobuf:"bytes,5,rep,name=addPlayers" json:"addPlayers,omitempty"`
	RemovePlayers []uint32         `protobuf:"varint,6,rep,name=removePlayers" json:"removePlayers,omitempty"`
}

func (m *MsgSceneTCP) Reset()                    { *m = MsgSceneTCP{} }
func (m *MsgSceneTCP) String() string            { return proto.CompactTextString(m) }
func (*MsgSceneTCP) ProtoMessage()               {}
func (*MsgSceneTCP) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{8} }

func (m *MsgSceneTCP) GetEats() []*BallEat {
	if m != nil {
		return m.Eats
	}
	return nil
}

func (m *MsgSceneTCP) GetAdds() []*MsgBall {
	if m != nil {
		return m.Adds
	}
	return nil
}

func (m *MsgSceneTCP) GetRemoves() []uint32 {
	if m != nil {
		return m.Removes
	}
	return nil
}

func (m *MsgSceneTCP) GetHits() []*HitMsg {
	if m != nil {
		return m.Hits
	}
	return nil
}

func (m *MsgSceneTCP) GetAddPlayers() []*MsgPlayerBall {
	if m != nil {
		return m.AddPlayers
	}
	return nil
}

func (m *MsgSceneTCP) GetRemovePlayers() []uint32 {
	if m != nil {
		return m.RemovePlayers
	}
	return nil
}

type MsgSceneUDP struct {
	Moves       []*BallMove  `protobuf:"bytes,1,rep,name=moves" json:"moves,omitempty"`
	Frame       uint32       `protobuf:"varint,2,req,name=frame" json:"frame"`
	ChangingInf []*CubeReDst `protobuf:"bytes,3,rep,name=changingInf" json:"changingInf,omitempty"`
}

func (m *MsgSceneUDP) Reset()                    { *m = MsgSceneUDP{} }
func (m *MsgSceneUDP) String() string            { return proto.CompactTextString(m) }
func (*MsgSceneUDP) ProtoMessage()               {}
func (*MsgSceneUDP) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{9} }

func (m *MsgSceneUDP) GetMoves() []*BallMove {
	if m != nil {
		return m.Moves
	}
	return nil
}

func (m *MsgSceneUDP) GetFrame() uint32 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *MsgSceneUDP) GetChangingInf() []*CubeReDst {
	if m != nil {
		return m.ChangingInf
	}
	return nil
}

type MsgBindTCPSession struct {
	Id  uint64 `protobuf:"varint,1,req,name=id" json:"id"`
	Key string `protobuf:"bytes,2,req,name=key" json:"key"`
}

func (m *MsgBindTCPSession) Reset()                    { *m = MsgBindTCPSession{} }
func (m *MsgBindTCPSession) String() string            { return proto.CompactTextString(m) }
func (*MsgBindTCPSession) ProtoMessage()               {}
func (*MsgBindTCPSession) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{10} }

func (m *MsgBindTCPSession) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgBindTCPSession) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// 玩家数据
type MsgPlayer struct {
	Id        uint64         `protobuf:"varint,1,req,name=id" json:"id"`
	Name      string         `protobuf:"bytes,2,req,name=name" json:"name"`
	Local     uint32         `protobuf:"varint,3,opt,name=local" json:"local"`
	IsLive    bool           `protobuf:"varint,4,opt,name=IsLive,json=isLive" json:"IsLive"`
	SnapInfo  *MsgPlayerSnap `protobuf:"bytes,5,opt,name=SnapInfo,json=snapInfo" json:"SnapInfo,omitempty"`
	BallId    uint32         `protobuf:"varint,6,req,name=ballId" json:"ballId"`
	Curexp    uint32         `protobuf:"varint,7,opt,name=curexp" json:"curexp"`
	Curmp     uint32         `protobuf:"varint,8,opt,name=curmp" json:"curmp"`
	Animalid  uint32         `protobuf:"varint,9,opt,name=animalid" json:"animalid"`
	Curhp     uint32         `protobuf:"varint,10,opt,name=curhp" json:"curhp"`
	TeamName  uint32         `protobuf:"varint,11,opt,name=TeamName,json=teamName" json:"TeamName"`
	BombNum   int32          `protobuf:"varint,12,opt,name=bombNum" json:"bombNum"`
	HammerNum int32          `protobuf:"varint,13,opt,name=hammerNum" json:"hammerNum"`
}

func (m *MsgPlayer) Reset()                    { *m = MsgPlayer{} }
func (m *MsgPlayer) String() string            { return proto.CompactTextString(m) }
func (*MsgPlayer) ProtoMessage()               {}
func (*MsgPlayer) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{11} }

func (m *MsgPlayer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgPlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgPlayer) GetLocal() uint32 {
	if m != nil {
		return m.Local
	}
	return 0
}

func (m *MsgPlayer) GetIsLive() bool {
	if m != nil {
		return m.IsLive
	}
	return false
}

func (m *MsgPlayer) GetSnapInfo() *MsgPlayerSnap {
	if m != nil {
		return m.SnapInfo
	}
	return nil
}

func (m *MsgPlayer) GetBallId() uint32 {
	if m != nil {
		return m.BallId
	}
	return 0
}

func (m *MsgPlayer) GetCurexp() uint32 {
	if m != nil {
		return m.Curexp
	}
	return 0
}

func (m *MsgPlayer) GetCurmp() uint32 {
	if m != nil {
		return m.Curmp
	}
	return 0
}

func (m *MsgPlayer) GetAnimalid() uint32 {
	if m != nil {
		return m.Animalid
	}
	return 0
}

func (m *MsgPlayer) GetCurhp() uint32 {
	if m != nil {
		return m.Curhp
	}
	return 0
}

func (m *MsgPlayer) GetTeamName() uint32 {
	if m != nil {
		return m.TeamName
	}
	return 0
}

func (m *MsgPlayer) GetBombNum() int32 {
	if m != nil {
		return m.BombNum
	}
	return 0
}

func (m *MsgPlayer) GetHammerNum() int32 {
	if m != nil {
		return m.HammerNum
	}
	return 0
}

// 返回添加玩家 AddPlayer
type MsgAddPlayer struct {
	Player *MsgPlayer `protobuf:"bytes,1,req,name=player" json:"player,omitempty"`
}

func (m *MsgAddPlayer) Reset()                    { *m = MsgAddPlayer{} }
func (m *MsgAddPlayer) String() string            { return proto.CompactTextString(m) }
func (*MsgAddPlayer) ProtoMessage()               {}
func (*MsgAddPlayer) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{12} }

func (m *MsgAddPlayer) GetPlayer() *MsgPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

// 返回刷新玩家数据
type MsgRefreshPlayer struct {
	Player *MsgPlayer `protobuf:"bytes,1,req,name=player" json:"player,omitempty"`
}

func (m *MsgRefreshPlayer) Reset()                    { *m = MsgRefreshPlayer{} }
func (m *MsgRefreshPlayer) String() string            { return proto.CompactTextString(m) }
func (*MsgRefreshPlayer) ProtoMessage()               {}
func (*MsgRefreshPlayer) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{13} }

func (m *MsgRefreshPlayer) GetPlayer() *MsgPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

// 同步玩家形态
type MsgAsyncPlayerAnimal struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Animalid uint32 `protobuf:"varint,2,opt,name=animalid" json:"animalid"`
}

func (m *MsgAsyncPlayerAnimal) Reset()                    { *m = MsgAsyncPlayerAnimal{} }
func (m *MsgAsyncPlayerAnimal) String() string            { return proto.CompactTextString(m) }
func (*MsgAsyncPlayerAnimal) ProtoMessage()               {}
func (*MsgAsyncPlayerAnimal) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{14} }

func (m *MsgAsyncPlayerAnimal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgAsyncPlayerAnimal) GetAnimalid() uint32 {
	if m != nil {
		return m.Animalid
	}
	return 0
}

// 返回删除玩家 RemovePlayer
type MsgRemovePlayer struct {
	Id uint64 `protobuf:"varint,1,req,name=id" json:"id"`
}

func (m *MsgRemovePlayer) Reset()                    { *m = MsgRemovePlayer{} }
func (m *MsgRemovePlayer) String() string            { return proto.CompactTextString(m) }
func (*MsgRemovePlayer) ProtoMessage()               {}
func (*MsgRemovePlayer) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{15} }

func (m *MsgRemovePlayer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 请求移动 Move
type MsgMove struct {
	Angle int32  `protobuf:"varint,1,req,name=angle" json:"angle"`
	Power int32  `protobuf:"varint,2,req,name=power" json:"power"`
	Face  uint32 `protobuf:"varint,3,opt,name=face" json:"face"`
}

func (m *MsgMove) Reset()                    { *m = MsgMove{} }
func (m *MsgMove) String() string            { return proto.CompactTextString(m) }
func (*MsgMove) ProtoMessage()               {}
func (*MsgMove) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{16} }

func (m *MsgMove) GetAngle() int32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

func (m *MsgMove) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *MsgMove) GetFace() uint32 {
	if m != nil {
		return m.Face
	}
	return 0
}

// 请求复活 ReLife
type MsgRelife struct {
}

func (m *MsgRelife) Reset()                    { *m = MsgRelife{} }
func (m *MsgRelife) String() string            { return proto.CompactTextString(m) }
func (*MsgRelife) ProtoMessage()               {}
func (*MsgRelife) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{17} }

// 返回复活 ReLife
type MsgS2CRelife struct {
	Name     string         `protobuf:"bytes,1,opt,name=name" json:"name"`
	Frame    uint32         `protobuf:"varint,2,opt,name=frame" json:"frame"`
	SnapInfo *MsgPlayerSnap `protobuf:"bytes,3,req,name=SnapInfo,json=snapInfo" json:"SnapInfo,omitempty"`
	Curhp    uint32         `protobuf:"varint,4,opt,name=curhp" json:"curhp"`
	Curmp    uint32         `protobuf:"varint,5,opt,name=curmp" json:"curmp"`
	Animalid uint32         `protobuf:"varint,6,opt,name=animalid" json:"animalid"`
}

func (m *MsgS2CRelife) Reset()                    { *m = MsgS2CRelife{} }
func (m *MsgS2CRelife) String() string            { return proto.CompactTextString(m) }
func (*MsgS2CRelife) ProtoMessage()               {}
func (*MsgS2CRelife) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{18} }

func (m *MsgS2CRelife) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgS2CRelife) GetFrame() uint32 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *MsgS2CRelife) GetSnapInfo() *MsgPlayerSnap {
	if m != nil {
		return m.SnapInfo
	}
	return nil
}

func (m *MsgS2CRelife) GetCurhp() uint32 {
	if m != nil {
		return m.Curhp
	}
	return 0
}

func (m *MsgS2CRelife) GetCurmp() uint32 {
	if m != nil {
		return m.Curmp
	}
	return 0
}

func (m *MsgS2CRelife) GetAnimalid() uint32 {
	if m != nil {
		return m.Animalid
	}
	return 0
}

// 返回死亡 Death
type MsgDeath struct {
	MaxScore     uint32 `protobuf:"varint,1,req,name=maxScore" json:"maxScore"`
	KillId       uint64 `protobuf:"varint,2,req,name=killId" json:"killId"`
	KillName     string `protobuf:"bytes,3,req,name=killName" json:"killName"`
	Id           uint64 `protobuf:"varint,4,req,name=Id,json=id" json:"Id"`
	Animalid     uint32 `protobuf:"varint,5,opt,name=animalid" json:"animalid"`
	Killanimalid uint32 `protobuf:"varint,6,opt,name=killanimalid" json:"killanimalid"`
}

func (m *MsgDeath) Reset()                    { *m = MsgDeath{} }
func (m *MsgDeath) String() string            { return proto.CompactTextString(m) }
func (*MsgDeath) ProtoMessage()               {}
func (*MsgDeath) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{19} }

func (m *MsgDeath) GetMaxScore() uint32 {
	if m != nil {
		return m.MaxScore
	}
	return 0
}

func (m *MsgDeath) GetKillId() uint64 {
	if m != nil {
		return m.KillId
	}
	return 0
}

func (m *MsgDeath) GetKillName() string {
	if m != nil {
		return m.KillName
	}
	return ""
}

func (m *MsgDeath) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgDeath) GetAnimalid() uint32 {
	if m != nil {
		return m.Animalid
	}
	return 0
}

func (m *MsgDeath) GetKillanimalid() uint32 {
	if m != nil {
		return m.Killanimalid
	}
	return 0
}

type EndPlayer struct {
	Id        uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	UName     string `protobuf:"bytes,2,req,name=UName,json=uName" json:"UName"`
	Name      string `protobuf:"bytes,3,req,name=Name,json=name" json:"Name"`
	Score     uint64 `protobuf:"varint,4,req,name=Score,json=score" json:"Score"`
	KillNum   uint32 `protobuf:"varint,5,req,name=KillNum,json=killNum" json:"KillNum"`
	Sex       uint32 `protobuf:"varint,6,opt,name=Sex,json=sex" json:"Sex"`
	Icon      uint32 `protobuf:"varint,7,opt,name=Icon,json=icon" json:"Icon"`
	Location  uint32 `protobuf:"varint,8,opt,name=Location,json=location" json:"Location"`
	Money     uint32 `protobuf:"varint,9,opt,name=Money,json=money" json:"Money"`
	Rank      uint32 `protobuf:"varint,10,opt,name=Rank,json=rank" json:"Rank"`
	PassIcon  string `protobuf:"bytes,11,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	IsMvp     bool   `protobuf:"varint,12,opt,name=IsMvp,json=isMvp" json:"IsMvp"`
	IsFollow  bool   `protobuf:"varint,13,opt,name=IsFollow,json=isFollow" json:"IsFollow"`
	AddMoney  int32  `protobuf:"varint,14,opt,name=AddMoney,json=addMoney" json:"AddMoney"`
	AnimalId  uint32 `protobuf:"varint,15,opt,name=AnimalId,json=animalId" json:"AnimalId"`
	TeamScore uint32 `protobuf:"varint,16,opt,name=TeamScore,json=teamScore" json:"TeamScore"`
	TeamName  uint32 `protobuf:"varint,17,opt,name=TeamName,json=teamName" json:"TeamName"`
	LeaderId  uint64 `protobuf:"varint,18,opt,name=LeaderId,json=leaderId" json:"LeaderId"`
}

func (m *EndPlayer) Reset()                    { *m = EndPlayer{} }
func (m *EndPlayer) String() string            { return proto.CompactTextString(m) }
func (*EndPlayer) ProtoMessage()               {}
func (*EndPlayer) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{20} }

func (m *EndPlayer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EndPlayer) GetUName() string {
	if m != nil {
		return m.UName
	}
	return ""
}

func (m *EndPlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndPlayer) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *EndPlayer) GetKillNum() uint32 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

func (m *EndPlayer) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *EndPlayer) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *EndPlayer) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *EndPlayer) GetMoney() uint32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *EndPlayer) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *EndPlayer) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *EndPlayer) GetIsMvp() bool {
	if m != nil {
		return m.IsMvp
	}
	return false
}

func (m *EndPlayer) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

func (m *EndPlayer) GetAddMoney() int32 {
	if m != nil {
		return m.AddMoney
	}
	return 0
}

func (m *EndPlayer) GetAnimalId() uint32 {
	if m != nil {
		return m.AnimalId
	}
	return 0
}

func (m *EndPlayer) GetTeamScore() uint32 {
	if m != nil {
		return m.TeamScore
	}
	return 0
}

func (m *EndPlayer) GetTeamName() uint32 {
	if m != nil {
		return m.TeamName
	}
	return 0
}

func (m *EndPlayer) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type Anchor struct {
}

func (m *Anchor) Reset()                    { *m = Anchor{} }
func (m *Anchor) String() string            { return proto.CompactTextString(m) }
func (*Anchor) ProtoMessage()               {}
func (*Anchor) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{21} }

// 返回结束 EndRoom
type MsgEndRoom struct {
	Players   []*EndPlayer `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	UserSelf  *EndPlayer   `protobuf:"bytes,2,opt,name=UserSelf,json=userSelf" json:"UserSelf,omitempty"`
	LeaderId  uint64       `protobuf:"varint,3,opt,name=LeaderId,json=leaderId" json:"LeaderId"`
	OldLevel  uint32       `protobuf:"varint,4,opt,name=OldLevel,json=oldLevel" json:"OldLevel"`
	OldScores uint32       `protobuf:"varint,5,opt,name=OldScores,json=oldScores" json:"OldScores"`
	Level     uint32       `protobuf:"varint,6,opt,name=Level,json=level" json:"Level"`
	Scores    uint32       `protobuf:"varint,7,opt,name=Scores,json=scores" json:"Scores"`
	IsValid   bool         `protobuf:"varint,8,opt,name=IsValid,json=isValid" json:"IsValid"`
}

func (m *MsgEndRoom) Reset()                    { *m = MsgEndRoom{} }
func (m *MsgEndRoom) String() string            { return proto.CompactTextString(m) }
func (*MsgEndRoom) ProtoMessage()               {}
func (*MsgEndRoom) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{22} }

func (m *MsgEndRoom) GetPlayers() []*EndPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *MsgEndRoom) GetUserSelf() *EndPlayer {
	if m != nil {
		return m.UserSelf
	}
	return nil
}

func (m *MsgEndRoom) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *MsgEndRoom) GetOldLevel() uint32 {
	if m != nil {
		return m.OldLevel
	}
	return 0
}

func (m *MsgEndRoom) GetOldScores() uint32 {
	if m != nil {
		return m.OldScores
	}
	return 0
}

func (m *MsgEndRoom) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MsgEndRoom) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *MsgEndRoom) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

// 客户端心跳包
type ClientHeartBeat struct {
}

func (m *ClientHeartBeat) Reset()                    { *m = ClientHeartBeat{} }
func (m *ClientHeartBeat) String() string            { return proto.CompactTextString(m) }
func (*ClientHeartBeat) ProtoMessage()               {}
func (*ClientHeartBeat) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{23} }

// 释放技能 CastSkill
type MsgCastSkill struct {
	Skillid uint32 `protobuf:"varint,1,opt,name=skillid" json:"skillid"`
}

func (m *MsgCastSkill) Reset()                    { *m = MsgCastSkill{} }
func (m *MsgCastSkill) String() string            { return proto.CompactTextString(m) }
func (*MsgCastSkill) ProtoMessage()               {}
func (*MsgCastSkill) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{24} }

func (m *MsgCastSkill) GetSkillid() uint32 {
	if m != nil {
		return m.Skillid
	}
	return 0
}

// //////////////////////////////////////// 语音 ///////////////////////////////////////////////////
// 进入房间成功,返回语音服ip端口
type RetVoiceInfo struct {
	Address string `protobuf:"bytes,1,req,name=Address,json=address" json:"Address"`
	RoomId  uint32 `protobuf:"varint,2,req,name=RoomId,json=roomId" json:"RoomId"`
}

func (m *RetVoiceInfo) Reset()                    { *m = RetVoiceInfo{} }
func (m *RetVoiceInfo) String() string            { return proto.CompactTextString(m) }
func (*RetVoiceInfo) ProtoMessage()               {}
func (*RetVoiceInfo) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{25} }

func (m *RetVoiceInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RetVoiceInfo) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 请求抢麦ToSpeak
type ReqToSpeak struct {
}

func (m *ReqToSpeak) Reset()                    { *m = ReqToSpeak{} }
func (m *ReqToSpeak) String() string            { return proto.CompactTextString(m) }
func (*ReqToSpeak) ProtoMessage()               {}
func (*ReqToSpeak) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{26} }

// 返回抢麦结果
type RetToSpeak struct {
	RetCode uint32 `protobuf:"varint,1,req,name=RetCode,json=retCode" json:"RetCode"`
	Money   uint32 `protobuf:"varint,2,opt,name=Money,json=money" json:"Money"`
	Time    uint32 `protobuf:"varint,3,opt,name=Time,json=time" json:"Time"`
}

func (m *RetToSpeak) Reset()                    { *m = RetToSpeak{} }
func (m *RetToSpeak) String() string            { return proto.CompactTextString(m) }
func (*RetToSpeak) ProtoMessage()               {}
func (*RetToSpeak) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{27} }

func (m *RetToSpeak) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RetToSpeak) GetMoney() uint32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *RetToSpeak) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 广播麦上玩家
type RetSpeakUser struct {
	Id      uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Name    string `protobuf:"bytes,2,req,name=Name,json=name" json:"Name"`
	NeedTm  uint32 `protobuf:"varint,3,req,name=NeedTm,json=needTm" json:"NeedTm"`
	TotalTm uint32 `protobuf:"varint,4,req,name=TotalTm,json=totalTm" json:"TotalTm"`
	IsBaned uint32 `protobuf:"varint,5,opt,name=IsBaned,json=isBaned" json:"IsBaned"`
}

func (m *RetSpeakUser) Reset()                    { *m = RetSpeakUser{} }
func (m *RetSpeakUser) String() string            { return proto.CompactTextString(m) }
func (*RetSpeakUser) ProtoMessage()               {}
func (*RetSpeakUser) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{28} }

func (m *RetSpeakUser) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetSpeakUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetSpeakUser) GetNeedTm() uint32 {
	if m != nil {
		return m.NeedTm
	}
	return 0
}

func (m *RetSpeakUser) GetTotalTm() uint32 {
	if m != nil {
		return m.TotalTm
	}
	return 0
}

func (m *RetSpeakUser) GetIsBaned() uint32 {
	if m != nil {
		return m.IsBaned
	}
	return 0
}

// 队伍排行榜
type RetTeamRankList struct {
	Teams    []*RetTeamRankList_TeamRank `protobuf:"bytes,1,rep,name=Teams,json=teams" json:"Teams,omitempty"`
	WatchNum uint32                      `protobuf:"varint,2,opt,name=WatchNum,json=watchNum" json:"WatchNum"`
	EndTime  uint32                      `protobuf:"varint,3,opt,name=EndTime,json=endTime" json:"EndTime"`
	KillNum  uint32                      `protobuf:"varint,4,opt,name=killNum" json:"killNum"`
}

func (m *RetTeamRankList) Reset()                    { *m = RetTeamRankList{} }
func (m *RetTeamRankList) String() string            { return proto.CompactTextString(m) }
func (*RetTeamRankList) ProtoMessage()               {}
func (*RetTeamRankList) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{29} }

func (m *RetTeamRankList) GetTeams() []*RetTeamRankList_TeamRank {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *RetTeamRankList) GetWatchNum() uint32 {
	if m != nil {
		return m.WatchNum
	}
	return 0
}

func (m *RetTeamRankList) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RetTeamRankList) GetKillNum() uint32 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

type RetTeamRankList_TeamRank struct {
	Tname    uint32  `protobuf:"varint,1,opt,name=Tname,json=tname" json:"Tname"`
	Num      uint32  `protobuf:"varint,2,opt,name=Num,json=num" json:"Num"`
	Score    float64 `protobuf:"fixed64,3,opt,name=Score,json=score" json:"Score"`
	LastRank int32   `protobuf:"varint,4,opt,name=LastRank,json=lastRank" json:"LastRank"`
}

func (m *RetTeamRankList_TeamRank) Reset()         { *m = RetTeamRankList_TeamRank{} }
func (m *RetTeamRankList_TeamRank) String() string { return proto.CompactTextString(m) }
func (*RetTeamRankList_TeamRank) ProtoMessage()    {}
func (*RetTeamRankList_TeamRank) Descriptor() ([]byte, []int) {
	return fileDescriptorWilds, []int{29, 0}
}

func (m *RetTeamRankList_TeamRank) GetTname() uint32 {
	if m != nil {
		return m.Tname
	}
	return 0
}

func (m *RetTeamRankList_TeamRank) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *RetTeamRankList_TeamRank) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RetTeamRankList_TeamRank) GetLastRank() int32 {
	if m != nil {
		return m.LastRank
	}
	return 0
}

// 队员位置
type RetTeamMemPos struct {
	Mems []*RetTeamMemPos_MemPos `protobuf:"bytes,1,rep,name=Mems,json=mems" json:"Mems,omitempty"`
}

func (m *RetTeamMemPos) Reset()                    { *m = RetTeamMemPos{} }
func (m *RetTeamMemPos) String() string            { return proto.CompactTextString(m) }
func (*RetTeamMemPos) ProtoMessage()               {}
func (*RetTeamMemPos) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{30} }

func (m *RetTeamMemPos) GetMems() []*RetTeamMemPos_MemPos {
	if m != nil {
		return m.Mems
	}
	return nil
}

type RetTeamMemPos_MemPos struct {
	Id uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	X  int32  `protobuf:"varint,2,req,name=X,json=x" json:"X"`
	Y  int32  `protobuf:"varint,3,req,name=Y,json=y" json:"Y"`
}

func (m *RetTeamMemPos_MemPos) Reset()                    { *m = RetTeamMemPos_MemPos{} }
func (m *RetTeamMemPos_MemPos) String() string            { return proto.CompactTextString(m) }
func (*RetTeamMemPos_MemPos) ProtoMessage()               {}
func (*RetTeamMemPos_MemPos) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{30, 0} }

func (m *RetTeamMemPos_MemPos) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetTeamMemPos_MemPos) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *RetTeamMemPos_MemPos) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// 请求玩家状态
type ReqPlayerState struct {
	State uint32 `protobuf:"varint,1,req,name=State,json=state" json:"State"`
}

func (m *ReqPlayerState) Reset()                    { *m = ReqPlayerState{} }
func (m *ReqPlayerState) String() string            { return proto.CompactTextString(m) }
func (*ReqPlayerState) ProtoMessage()               {}
func (*ReqPlayerState) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{31} }

func (m *ReqPlayerState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 返回玩家状态
type RetPlayerState struct {
	Id    uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	State uint32 `protobuf:"varint,2,req,name=State,json=state" json:"State"`
	LTime uint32 `protobuf:"varint,3,req,name=LTime,json=lTime" json:"LTime"`
}

func (m *RetPlayerState) Reset()                    { *m = RetPlayerState{} }
func (m *RetPlayerState) String() string            { return proto.CompactTextString(m) }
func (*RetPlayerState) ProtoMessage()               {}
func (*RetPlayerState) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{32} }

func (m *RetPlayerState) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetPlayerState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetPlayerState) GetLTime() uint32 {
	if m != nil {
		return m.LTime
	}
	return 0
}

// 通知评价
type RetAddComment struct {
}

func (m *RetAddComment) Reset()                    { *m = RetAddComment{} }
func (m *RetAddComment) String() string            { return proto.CompactTextString(m) }
func (*RetAddComment) ProtoMessage()               {}
func (*RetAddComment) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{33} }

// 通知被加入
type RetBeJoined struct {
	Id      uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
}

func (m *RetBeJoined) Reset()                    { *m = RetBeJoined{} }
func (m *RetBeJoined) String() string            { return proto.CompactTextString(m) }
func (*RetBeJoined) ProtoMessage()               {}
func (*RetBeJoined) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{34} }

func (m *RetBeJoined) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetBeJoined) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// 奔跑
type MsgRun struct {
}

func (m *MsgRun) Reset()                    { *m = MsgRun{} }
func (m *MsgRun) String() string            { return proto.CompactTextString(m) }
func (*MsgRun) ProtoMessage()               {}
func (*MsgRun) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{35} }

// 聊天命令命令
type MsgSceneChat struct {
	Msg string `protobuf:"bytes,1,req,name=Msg,json=msg" json:"Msg"`
	Id  uint64 `protobuf:"varint,2,req,name=Id,json=id" json:"Id"`
}

func (m *MsgSceneChat) Reset()                    { *m = MsgSceneChat{} }
func (m *MsgSceneChat) String() string            { return proto.CompactTextString(m) }
func (*MsgSceneChat) ProtoMessage()               {}
func (*MsgSceneChat) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{36} }

func (m *MsgSceneChat) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgSceneChat) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 聊天，返回
type MsgS2CSceneChat struct {
	Msg string `protobuf:"bytes,1,req,name=Msg,json=msg" json:"Msg"`
	Id  uint64 `protobuf:"varint,2,req,name=Id,json=id" json:"Id"`
}

func (m *MsgS2CSceneChat) Reset()                    { *m = MsgS2CSceneChat{} }
func (m *MsgS2CSceneChat) String() string            { return proto.CompactTextString(m) }
func (*MsgS2CSceneChat) ProtoMessage()               {}
func (*MsgS2CSceneChat) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{37} }

func (m *MsgS2CSceneChat) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgS2CSceneChat) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 位置同步
type MsgPlayerSnap struct {
	Snapx float32 `protobuf:"fixed32,1,req,name=Snapx,json=snapx" json:"Snapx"`
	Snapy float32 `protobuf:"fixed32,2,req,name=Snapy,json=snapy" json:"Snapy"`
	Angle float32 `protobuf:"fixed32,3,req,name=Angle,json=angle" json:"Angle"`
	Id    uint64  `protobuf:"varint,4,req,name=Id,json=id" json:"Id"`
}

func (m *MsgPlayerSnap) Reset()                    { *m = MsgPlayerSnap{} }
func (m *MsgPlayerSnap) String() string            { return proto.CompactTextString(m) }
func (*MsgPlayerSnap) ProtoMessage()               {}
func (*MsgPlayerSnap) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{38} }

func (m *MsgPlayerSnap) GetSnapx() float32 {
	if m != nil {
		return m.Snapx
	}
	return 0
}

func (m *MsgPlayerSnap) GetSnapy() float32 {
	if m != nil {
		return m.Snapy
	}
	return 0
}

func (m *MsgPlayerSnap) GetAngle() float32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

func (m *MsgPlayerSnap) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgBall struct {
	Id   uint32 `protobuf:"varint,1,req,name=id" json:"id"`
	Type int32  `protobuf:"varint,2,req,name=type" json:"type"`
	X    int32  `protobuf:"varint,3,req,name=x" json:"x"`
	Y    int32  `protobuf:"varint,4,req,name=y" json:"y"`
}

func (m *MsgBall) Reset()                    { *m = MsgBall{} }
func (m *MsgBall) String() string            { return proto.CompactTextString(m) }
func (*MsgBall) ProtoMessage()               {}
func (*MsgBall) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{39} }

func (m *MsgBall) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgBall) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MsgBall) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MsgBall) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// 玩家球
type MsgPlayerBall struct {
	Id    uint32 `protobuf:"varint,1,req,name=id" json:"id"`
	Level uint32 `protobuf:"varint,2,req,name=level" json:"level"`
	Hp    uint32 `protobuf:"varint,3,opt,name=hp" json:"hp"`
	Mp    uint32 `protobuf:"varint,4,opt,name=mp" json:"mp"`
	X     int32  `protobuf:"varint,5,req,name=x" json:"x"`
	Y     int32  `protobuf:"varint,6,req,name=y" json:"y"`
	Angle int32  `protobuf:"varint,7,opt,name=angle" json:"angle"`
	Face  uint32 `protobuf:"varint,8,opt,name=face" json:"face"`
}

func (m *MsgPlayerBall) Reset()                    { *m = MsgPlayerBall{} }
func (m *MsgPlayerBall) String() string            { return proto.CompactTextString(m) }
func (*MsgPlayerBall) ProtoMessage()               {}
func (*MsgPlayerBall) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{40} }

func (m *MsgPlayerBall) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgPlayerBall) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MsgPlayerBall) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *MsgPlayerBall) GetMp() uint32 {
	if m != nil {
		return m.Mp
	}
	return 0
}

func (m *MsgPlayerBall) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MsgPlayerBall) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MsgPlayerBall) GetAngle() int32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

func (m *MsgPlayerBall) GetFace() uint32 {
	if m != nil {
		return m.Face
	}
	return 0
}

// 移动数据
type BallMove struct {
	Id    uint32 `protobuf:"varint,1,req,name=id" json:"id"`
	X     int32  `protobuf:"varint,2,req,name=x" json:"x"`
	Y     int32  `protobuf:"varint,3,req,name=y" json:"y"`
	State uint32 `protobuf:"varint,4,opt,name=state" json:"state"`
	Angle int32  `protobuf:"varint,5,opt,name=angle" json:"angle"`
	Face  uint32 `protobuf:"varint,6,opt,name=face" json:"face"`
}

func (m *BallMove) Reset()                    { *m = BallMove{} }
func (m *BallMove) String() string            { return proto.CompactTextString(m) }
func (*BallMove) ProtoMessage()               {}
func (*BallMove) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{41} }

func (m *BallMove) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BallMove) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *BallMove) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *BallMove) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *BallMove) GetAngle() int32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

func (m *BallMove) GetFace() uint32 {
	if m != nil {
		return m.Face
	}
	return 0
}

// 吃球
type BallEat struct {
	Source uint32 `protobuf:"varint,1,req,name=source" json:"source"`
	Target uint32 `protobuf:"varint,2,req,name=target" json:"target"`
}

func (m *BallEat) Reset()                    { *m = BallEat{} }
func (m *BallEat) String() string            { return proto.CompactTextString(m) }
func (*BallEat) ProtoMessage()               {}
func (*BallEat) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{42} }

func (m *BallEat) GetSource() uint32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *BallEat) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

// 攻击
type HitMsg struct {
	Source uint32 `protobuf:"varint,1,req,name=source" json:"source"`
	Target uint32 `protobuf:"varint,2,req,name=target" json:"target"`
	AddHp  int32  `protobuf:"varint,3,opt,name=addHp" json:"addHp"`
	CurHp  uint32 `protobuf:"varint,4,opt,name=curHp" json:"curHp"`
}

func (m *HitMsg) Reset()                    { *m = HitMsg{} }
func (m *HitMsg) String() string            { return proto.CompactTextString(m) }
func (*HitMsg) ProtoMessage()               {}
func (*HitMsg) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{43} }

func (m *HitMsg) GetSource() uint32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *HitMsg) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *HitMsg) GetAddHp() int32 {
	if m != nil {
		return m.AddHp
	}
	return 0
}

func (m *HitMsg) GetCurHp() uint32 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

// 更新队友位置
type UpdateTeamInfoMsg struct {
	Members    []*TeamInfoMsg `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	TopPlayers []*TeamInfoMsg `protobuf:"bytes,2,rep,name=topPlayers" json:"topPlayers,omitempty"`
}

func (m *UpdateTeamInfoMsg) Reset()                    { *m = UpdateTeamInfoMsg{} }
func (m *UpdateTeamInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*UpdateTeamInfoMsg) ProtoMessage()               {}
func (*UpdateTeamInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{44} }

func (m *UpdateTeamInfoMsg) GetMembers() []*TeamInfoMsg {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *UpdateTeamInfoMsg) GetTopPlayers() []*TeamInfoMsg {
	if m != nil {
		return m.TopPlayers
	}
	return nil
}

type TeamInfoMsg struct {
	Playerid uint64  `protobuf:"varint,1,opt,name=playerid" json:"playerid"`
	X        float32 `protobuf:"fixed32,2,opt,name=x" json:"x"`
	Y        float32 `protobuf:"fixed32,3,opt,name=y" json:"y"`
}

func (m *TeamInfoMsg) Reset()                    { *m = TeamInfoMsg{} }
func (m *TeamInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*TeamInfoMsg) ProtoMessage()               {}
func (*TeamInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{45} }

func (m *TeamInfoMsg) GetPlayerid() uint64 {
	if m != nil {
		return m.Playerid
	}
	return 0
}

func (m *TeamInfoMsg) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *TeamInfoMsg) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// 队伍通知
type TeamNoticeMsg struct {
	Playerid uint64  `protobuf:"varint,1,opt,name=playerid" json:"playerid"`
	X        float32 `protobuf:"fixed32,2,opt,name=x" json:"x"`
	Y        float32 `protobuf:"fixed32,3,opt,name=y" json:"y"`
	Info     string  `protobuf:"bytes,4,opt,name=info" json:"info"`
}

func (m *TeamNoticeMsg) Reset()                    { *m = TeamNoticeMsg{} }
func (m *TeamNoticeMsg) String() string            { return proto.CompactTextString(m) }
func (*TeamNoticeMsg) ProtoMessage()               {}
func (*TeamNoticeMsg) Descriptor() ([]byte, []int) { return fileDescriptorWilds, []int{46} }

func (m *TeamNoticeMsg) GetPlayerid() uint64 {
	if m != nil {
		return m.Playerid
	}
	return 0
}

func (m *TeamNoticeMsg) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *TeamNoticeMsg) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *TeamNoticeMsg) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgChangeCubeHeight)(nil), "usercmd.MsgChangeCubeHeight")
	proto.RegisterType((*CubeReDst)(nil), "usercmd.CubeReDst")
	proto.RegisterType((*MsgDoNothing)(nil), "usercmd.MsgDoNothing")
	proto.RegisterType((*BanBarrageMsg)(nil), "usercmd.BanBarrageMsg")
	proto.RegisterType((*MsgLogin)(nil), "usercmd.MsgLogin")
	proto.RegisterType((*RetErrorMsgCmd)(nil), "usercmd.RetErrorMsgCmd")
	proto.RegisterType((*MsgLoginResult)(nil), "usercmd.MsgLoginResult")
	proto.RegisterType((*MsgTop)(nil), "usercmd.MsgTop")
	proto.RegisterType((*MsgSceneTCP)(nil), "usercmd.MsgSceneTCP")
	proto.RegisterType((*MsgSceneUDP)(nil), "usercmd.MsgSceneUDP")
	proto.RegisterType((*MsgBindTCPSession)(nil), "usercmd.MsgBindTCPSession")
	proto.RegisterType((*MsgPlayer)(nil), "usercmd.MsgPlayer")
	proto.RegisterType((*MsgAddPlayer)(nil), "usercmd.MsgAddPlayer")
	proto.RegisterType((*MsgRefreshPlayer)(nil), "usercmd.MsgRefreshPlayer")
	proto.RegisterType((*MsgAsyncPlayerAnimal)(nil), "usercmd.MsgAsyncPlayerAnimal")
	proto.RegisterType((*MsgRemovePlayer)(nil), "usercmd.MsgRemovePlayer")
	proto.RegisterType((*MsgMove)(nil), "usercmd.MsgMove")
	proto.RegisterType((*MsgRelife)(nil), "usercmd.MsgRelife")
	proto.RegisterType((*MsgS2CRelife)(nil), "usercmd.MsgS2CRelife")
	proto.RegisterType((*MsgDeath)(nil), "usercmd.MsgDeath")
	proto.RegisterType((*EndPlayer)(nil), "usercmd.EndPlayer")
	proto.RegisterType((*Anchor)(nil), "usercmd.Anchor")
	proto.RegisterType((*MsgEndRoom)(nil), "usercmd.MsgEndRoom")
	proto.RegisterType((*ClientHeartBeat)(nil), "usercmd.ClientHeartBeat")
	proto.RegisterType((*MsgCastSkill)(nil), "usercmd.MsgCastSkill")
	proto.RegisterType((*RetVoiceInfo)(nil), "usercmd.RetVoiceInfo")
	proto.RegisterType((*ReqToSpeak)(nil), "usercmd.ReqToSpeak")
	proto.RegisterType((*RetToSpeak)(nil), "usercmd.RetToSpeak")
	proto.RegisterType((*RetSpeakUser)(nil), "usercmd.RetSpeakUser")
	proto.RegisterType((*RetTeamRankList)(nil), "usercmd.RetTeamRankList")
	proto.RegisterType((*RetTeamRankList_TeamRank)(nil), "usercmd.RetTeamRankList.TeamRank")
	proto.RegisterType((*RetTeamMemPos)(nil), "usercmd.RetTeamMemPos")
	proto.RegisterType((*RetTeamMemPos_MemPos)(nil), "usercmd.RetTeamMemPos.MemPos")
	proto.RegisterType((*ReqPlayerState)(nil), "usercmd.ReqPlayerState")
	proto.RegisterType((*RetPlayerState)(nil), "usercmd.RetPlayerState")
	proto.RegisterType((*RetAddComment)(nil), "usercmd.RetAddComment")
	proto.RegisterType((*RetBeJoined)(nil), "usercmd.RetBeJoined")
	proto.RegisterType((*MsgRun)(nil), "usercmd.MsgRun")
	proto.RegisterType((*MsgSceneChat)(nil), "usercmd.MsgSceneChat")
	proto.RegisterType((*MsgS2CSceneChat)(nil), "usercmd.MsgS2CSceneChat")
	proto.RegisterType((*MsgPlayerSnap)(nil), "usercmd.MsgPlayerSnap")
	proto.RegisterType((*MsgBall)(nil), "usercmd.MsgBall")
	proto.RegisterType((*MsgPlayerBall)(nil), "usercmd.MsgPlayerBall")
	proto.RegisterType((*BallMove)(nil), "usercmd.BallMove")
	proto.RegisterType((*BallEat)(nil), "usercmd.BallEat")
	proto.RegisterType((*HitMsg)(nil), "usercmd.HitMsg")
	proto.RegisterType((*UpdateTeamInfoMsg)(nil), "usercmd.UpdateTeamInfoMsg")
	proto.RegisterType((*TeamInfoMsg)(nil), "usercmd.TeamInfoMsg")
	proto.RegisterType((*TeamNoticeMsg)(nil), "usercmd.TeamNoticeMsg")
	proto.RegisterEnum("usercmd.MsgTypeCmd", MsgTypeCmd_name, MsgTypeCmd_value)
	proto.RegisterEnum("usercmd.SystemMsgType", SystemMsgType_name, SystemMsgType_value)
	proto.RegisterEnum("usercmd.MapObjectConfigType", MapObjectConfigType_name, MapObjectConfigType_value)
	proto.RegisterEnum("usercmd.BallType", BallType_name, BallType_value)
}
func (m *MsgChangeCubeHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeCubeHeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.UporDown {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CubeReDst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CubeReDst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.CubeIndex))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.RemainDistance))
	return i, nil
}

func (m *MsgDoNothing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDoNothing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Hello)))
	i += copy(dAtA[i:], m.Hello)
	return i, nil
}

func (m *BanBarrageMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BanBarrageMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.RetCode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Params))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.JsonParam)))
	i += copy(dAtA[i:], m.JsonParam)
	return i, nil
}

func (m *MsgLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	return i, nil
}

func (m *RetErrorMsgCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetErrorMsgCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.RetCode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Params))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.JsonParam)))
	i += copy(dAtA[i:], m.JsonParam)
	return i, nil
}

func (m *MsgLoginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLoginResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	if len(m.Others) > 0 {
		for _, msg := range m.Others {
			dAtA[i] = 0x22
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Frame))
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Local))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.RoomName)))
	i += copy(dAtA[i:], m.RoomName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.BallId))
	if len(m.Balls) > 0 {
		for _, msg := range m.Balls {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Playerballs) > 0 {
		for _, msg := range m.Playerballs {
			dAtA[i] = 0x52
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x58
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.TeamName))
	dAtA[i] = 0x60
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x68
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.TeamNoticeCD))
	dAtA[i] = 0x70
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.LeftTime))
	return i, nil
}

func (m *MsgTop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.KillNum))
	return i, nil
}

func (m *MsgSceneTCP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSceneTCP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Eats) > 0 {
		for _, msg := range m.Eats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Adds) > 0 {
		for _, msg := range m.Adds {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Removes) > 0 {
		for _, num := range m.Removes {
			dAtA[i] = 0x18
			i++
			i = encodeVarintWilds(dAtA, i, uint64(num))
		}
	}
	if len(m.Hits) > 0 {
		for _, msg := range m.Hits {
			dAtA[i] = 0x22
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AddPlayers) > 0 {
		for _, msg := range m.AddPlayers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemovePlayers) > 0 {
		for _, num := range m.RemovePlayers {
			dAtA[i] = 0x30
			i++
			i = encodeVarintWilds(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *MsgSceneUDP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSceneUDP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Moves) > 0 {
		for _, msg := range m.Moves {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Frame))
	if len(m.ChangingInf) > 0 {
		for _, msg := range m.ChangingInf {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MsgBindTCPSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindTCPSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	return i, nil
}

func (m *MsgPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Local))
	dAtA[i] = 0x20
	i++
	if m.IsLive {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.SnapInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWilds(dAtA, i, uint64(m.SnapInfo.Size()))
		n1, err := m.SnapInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.BallId))
	dAtA[i] = 0x38
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Curexp))
	dAtA[i] = 0x40
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Curmp))
	dAtA[i] = 0x48
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Animalid))
	dAtA[i] = 0x50
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Curhp))
	dAtA[i] = 0x58
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.TeamName))
	dAtA[i] = 0x60
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.BombNum))
	dAtA[i] = 0x68
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.HammerNum))
	return i, nil
}

func (m *MsgAddPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("player")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWilds(dAtA, i, uint64(m.Player.Size()))
		n2, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *MsgRefreshPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefreshPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("player")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWilds(dAtA, i, uint64(m.Player.Size()))
		n3, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *MsgAsyncPlayerAnimal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAsyncPlayerAnimal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Animalid))
	return i, nil
}

func (m *MsgRemovePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemovePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *MsgMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Angle))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Power))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Face))
	return i, nil
}

func (m *MsgRelife) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelife) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MsgS2CRelife) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgS2CRelife) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Frame))
	if m.SnapInfo == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("SnapInfo")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWilds(dAtA, i, uint64(m.SnapInfo.Size()))
		n4, err := m.SnapInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Curhp))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Curmp))
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Animalid))
	return i, nil
}

func (m *MsgDeath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeath) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.MaxScore))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.KillId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.KillName)))
	i += copy(dAtA[i:], m.KillName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Animalid))
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Killanimalid))
	return i, nil
}

func (m *EndPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.UName)))
	i += copy(dAtA[i:], m.UName)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Score))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.KillNum))
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x38
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x40
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Location))
	dAtA[i] = 0x48
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Money))
	dAtA[i] = 0x50
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x60
	i++
	if m.IsMvp {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x68
	i++
	if m.IsFollow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x70
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.AddMoney))
	dAtA[i] = 0x78
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.AnimalId))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.TeamScore))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.TeamName))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.LeaderId))
	return i, nil
}

func (m *Anchor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Anchor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MsgEndRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEndRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UserSelf != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWilds(dAtA, i, uint64(m.UserSelf.Size()))
		n5, err := m.UserSelf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.LeaderId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.OldLevel))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.OldScores))
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x38
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x40
	i++
	if m.IsValid {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ClientHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MsgCastSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCastSkill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Skillid))
	return i, nil
}

func (m *RetVoiceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetVoiceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.RoomId))
	return i, nil
}

func (m *ReqToSpeak) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqToSpeak) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetToSpeak) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetToSpeak) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.RetCode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Money))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Time))
	return i, nil
}

func (m *RetSpeakUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSpeakUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.NeedTm))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.TotalTm))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.IsBaned))
	return i, nil
}

func (m *RetTeamRankList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamRankList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.WatchNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.KillNum))
	return i, nil
}

func (m *RetTeamRankList_TeamRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamRankList_TeamRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Tname))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x19
	i++
	i = encodeFixed64Wilds(dAtA, i, uint64(math.Float64bits(float64(m.Score))))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.LastRank))
	return i, nil
}

func (m *RetTeamMemPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamMemPos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mems) > 0 {
		for _, msg := range m.Mems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetTeamMemPos_MemPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetTeamMemPos_MemPos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.X))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Y))
	return i, nil
}

func (m *ReqPlayerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPlayerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *RetPlayerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetPlayerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.State))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.LTime))
	return i, nil
}

func (m *RetAddComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetAddComment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetBeJoined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetBeJoined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	return i, nil
}

func (m *MsgRun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRun) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MsgSceneChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSceneChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *MsgS2CSceneChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgS2CSceneChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *MsgPlayerSnap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayerSnap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xd
	i++
	i = encodeFixed32Wilds(dAtA, i, uint32(math.Float32bits(float32(m.Snapx))))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Wilds(dAtA, i, uint32(math.Float32bits(float32(m.Snapy))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Wilds(dAtA, i, uint32(math.Float32bits(float32(m.Angle))))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *MsgBall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.X))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Y))
	return i, nil
}

func (m *MsgPlayerBall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayerBall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Hp))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Mp))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.X))
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Y))
	dAtA[i] = 0x38
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Angle))
	dAtA[i] = 0x40
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Face))
	return i, nil
}

func (m *BallMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BallMove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.X))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Y))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.State))
	dAtA[i] = 0x28
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Angle))
	dAtA[i] = 0x30
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Face))
	return i, nil
}

func (m *BallEat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BallEat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Source))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Target))
	return i, nil
}

func (m *HitMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HitMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Source))
	dAtA[i] = 0x10
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Target))
	dAtA[i] = 0x18
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.AddHp))
	dAtA[i] = 0x20
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.CurHp))
	return i, nil
}

func (m *UpdateTeamInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTeamInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TopPlayers) > 0 {
		for _, msg := range m.TopPlayers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWilds(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TeamInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Playerid))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Wilds(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Wilds(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	return i, nil
}

func (m *TeamNoticeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamNoticeMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintWilds(dAtA, i, uint64(m.Playerid))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Wilds(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Wilds(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	dAtA[i] = 0x22
	i++
	i = encodeVarintWilds(dAtA, i, uint64(len(m.Info)))
	i += copy(dAtA[i:], m.Info)
	return i, nil
}

func encodeFixed64Wilds(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Wilds(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintWilds(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgChangeCubeHeight) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *CubeReDst) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.CubeIndex))
	n += 1 + sovWilds(uint64(m.RemainDistance))
	return n
}

func (m *MsgDoNothing) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	l = len(m.Hello)
	n += 1 + l + sovWilds(uint64(l))
	return n
}

func (m *BanBarrageMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.RetCode))
	n += 1 + sovWilds(uint64(m.Params))
	l = len(m.JsonParam)
	n += 1 + l + sovWilds(uint64(l))
	return n
}

func (m *MsgLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovWilds(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovWilds(uint64(l))
	return n
}

func (m *RetErrorMsgCmd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.RetCode))
	n += 1 + sovWilds(uint64(m.Params))
	l = len(m.JsonParam)
	n += 1 + l + sovWilds(uint64(l))
	return n
}

func (m *MsgLoginResult) Size() (n int) {
	var l int
	_ = l
	n += 2
	n += 1 + sovWilds(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovWilds(uint64(l))
	if len(m.Others) > 0 {
		for _, e := range m.Others {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	n += 1 + sovWilds(uint64(m.Frame))
	n += 1 + sovWilds(uint64(m.Local))
	l = len(m.RoomName)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.BallId))
	if len(m.Balls) > 0 {
		for _, e := range m.Balls {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	if len(m.Playerballs) > 0 {
		for _, e := range m.Playerballs {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	n += 1 + sovWilds(uint64(m.TeamName))
	n += 1 + sovWilds(uint64(m.TeamId))
	n += 1 + sovWilds(uint64(m.TeamNoticeCD))
	n += 1 + sovWilds(uint64(m.LeftTime))
	return n
}

func (m *MsgTop) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	n += 1 + sovWilds(uint64(m.EndTime))
	n += 1 + sovWilds(uint64(m.Rank))
	n += 1 + sovWilds(uint64(m.KillNum))
	return n
}

func (m *MsgSceneTCP) Size() (n int) {
	var l int
	_ = l
	if len(m.Eats) > 0 {
		for _, e := range m.Eats {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	if len(m.Adds) > 0 {
		for _, e := range m.Adds {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	if len(m.Removes) > 0 {
		for _, e := range m.Removes {
			n += 1 + sovWilds(uint64(e))
		}
	}
	if len(m.Hits) > 0 {
		for _, e := range m.Hits {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	if len(m.AddPlayers) > 0 {
		for _, e := range m.AddPlayers {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	if len(m.RemovePlayers) > 0 {
		for _, e := range m.RemovePlayers {
			n += 1 + sovWilds(uint64(e))
		}
	}
	return n
}

func (m *MsgSceneUDP) Size() (n int) {
	var l int
	_ = l
	if len(m.Moves) > 0 {
		for _, e := range m.Moves {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	n += 1 + sovWilds(uint64(m.Frame))
	if len(m.ChangingInf) > 0 {
		for _, e := range m.ChangingInf {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	return n
}

func (m *MsgBindTCPSession) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	l = len(m.Key)
	n += 1 + l + sovWilds(uint64(l))
	return n
}

func (m *MsgPlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.Local))
	n += 2
	if m.SnapInfo != nil {
		l = m.SnapInfo.Size()
		n += 1 + l + sovWilds(uint64(l))
	}
	n += 1 + sovWilds(uint64(m.BallId))
	n += 1 + sovWilds(uint64(m.Curexp))
	n += 1 + sovWilds(uint64(m.Curmp))
	n += 1 + sovWilds(uint64(m.Animalid))
	n += 1 + sovWilds(uint64(m.Curhp))
	n += 1 + sovWilds(uint64(m.TeamName))
	n += 1 + sovWilds(uint64(m.BombNum))
	n += 1 + sovWilds(uint64(m.HammerNum))
	return n
}

func (m *MsgAddPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovWilds(uint64(l))
	}
	return n
}

func (m *MsgRefreshPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovWilds(uint64(l))
	}
	return n
}

func (m *MsgAsyncPlayerAnimal) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	n += 1 + sovWilds(uint64(m.Animalid))
	return n
}

func (m *MsgRemovePlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	return n
}

func (m *MsgMove) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Angle))
	n += 1 + sovWilds(uint64(m.Power))
	n += 1 + sovWilds(uint64(m.Face))
	return n
}

func (m *MsgRelife) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MsgS2CRelife) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.Frame))
	if m.SnapInfo != nil {
		l = m.SnapInfo.Size()
		n += 1 + l + sovWilds(uint64(l))
	}
	n += 1 + sovWilds(uint64(m.Curhp))
	n += 1 + sovWilds(uint64(m.Curmp))
	n += 1 + sovWilds(uint64(m.Animalid))
	return n
}

func (m *MsgDeath) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.MaxScore))
	n += 1 + sovWilds(uint64(m.KillId))
	l = len(m.KillName)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.Id))
	n += 1 + sovWilds(uint64(m.Animalid))
	n += 1 + sovWilds(uint64(m.Killanimalid))
	return n
}

func (m *EndPlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	l = len(m.UName)
	n += 1 + l + sovWilds(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.Score))
	n += 1 + sovWilds(uint64(m.KillNum))
	n += 1 + sovWilds(uint64(m.Sex))
	n += 1 + sovWilds(uint64(m.Icon))
	n += 1 + sovWilds(uint64(m.Location))
	n += 1 + sovWilds(uint64(m.Money))
	n += 1 + sovWilds(uint64(m.Rank))
	l = len(m.PassIcon)
	n += 1 + l + sovWilds(uint64(l))
	n += 2
	n += 2
	n += 1 + sovWilds(uint64(m.AddMoney))
	n += 1 + sovWilds(uint64(m.AnimalId))
	n += 2 + sovWilds(uint64(m.TeamScore))
	n += 2 + sovWilds(uint64(m.TeamName))
	n += 2 + sovWilds(uint64(m.LeaderId))
	return n
}

func (m *Anchor) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MsgEndRoom) Size() (n int) {
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	if m.UserSelf != nil {
		l = m.UserSelf.Size()
		n += 1 + l + sovWilds(uint64(l))
	}
	n += 1 + sovWilds(uint64(m.LeaderId))
	n += 1 + sovWilds(uint64(m.OldLevel))
	n += 1 + sovWilds(uint64(m.OldScores))
	n += 1 + sovWilds(uint64(m.Level))
	n += 1 + sovWilds(uint64(m.Scores))
	n += 2
	return n
}

func (m *ClientHeartBeat) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MsgCastSkill) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Skillid))
	return n
}

func (m *RetVoiceInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.RoomId))
	return n
}

func (m *ReqToSpeak) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetToSpeak) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.RetCode))
	n += 1 + sovWilds(uint64(m.Money))
	n += 1 + sovWilds(uint64(m.Time))
	return n
}

func (m *RetSpeakUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.NeedTm))
	n += 1 + sovWilds(uint64(m.TotalTm))
	n += 1 + sovWilds(uint64(m.IsBaned))
	return n
}

func (m *RetTeamRankList) Size() (n int) {
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	n += 1 + sovWilds(uint64(m.WatchNum))
	n += 1 + sovWilds(uint64(m.EndTime))
	n += 1 + sovWilds(uint64(m.KillNum))
	return n
}

func (m *RetTeamRankList_TeamRank) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Tname))
	n += 1 + sovWilds(uint64(m.Num))
	n += 9
	n += 1 + sovWilds(uint64(m.LastRank))
	return n
}

func (m *RetTeamMemPos) Size() (n int) {
	var l int
	_ = l
	if len(m.Mems) > 0 {
		for _, e := range m.Mems {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	return n
}

func (m *RetTeamMemPos_MemPos) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	n += 1 + sovWilds(uint64(m.X))
	n += 1 + sovWilds(uint64(m.Y))
	return n
}

func (m *ReqPlayerState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.State))
	return n
}

func (m *RetPlayerState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	n += 1 + sovWilds(uint64(m.State))
	n += 1 + sovWilds(uint64(m.LTime))
	return n
}

func (m *RetAddComment) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetBeJoined) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovWilds(uint64(l))
	return n
}

func (m *MsgRun) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MsgSceneChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.Id))
	return n
}

func (m *MsgS2CSceneChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	n += 1 + l + sovWilds(uint64(l))
	n += 1 + sovWilds(uint64(m.Id))
	return n
}

func (m *MsgPlayerSnap) Size() (n int) {
	var l int
	_ = l
	n += 5
	n += 5
	n += 5
	n += 1 + sovWilds(uint64(m.Id))
	return n
}

func (m *MsgBall) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	n += 1 + sovWilds(uint64(m.Type))
	n += 1 + sovWilds(uint64(m.X))
	n += 1 + sovWilds(uint64(m.Y))
	return n
}

func (m *MsgPlayerBall) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	n += 1 + sovWilds(uint64(m.Level))
	n += 1 + sovWilds(uint64(m.Hp))
	n += 1 + sovWilds(uint64(m.Mp))
	n += 1 + sovWilds(uint64(m.X))
	n += 1 + sovWilds(uint64(m.Y))
	n += 1 + sovWilds(uint64(m.Angle))
	n += 1 + sovWilds(uint64(m.Face))
	return n
}

func (m *BallMove) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Id))
	n += 1 + sovWilds(uint64(m.X))
	n += 1 + sovWilds(uint64(m.Y))
	n += 1 + sovWilds(uint64(m.State))
	n += 1 + sovWilds(uint64(m.Angle))
	n += 1 + sovWilds(uint64(m.Face))
	return n
}

func (m *BallEat) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Source))
	n += 1 + sovWilds(uint64(m.Target))
	return n
}

func (m *HitMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Source))
	n += 1 + sovWilds(uint64(m.Target))
	n += 1 + sovWilds(uint64(m.AddHp))
	n += 1 + sovWilds(uint64(m.CurHp))
	return n
}

func (m *UpdateTeamInfoMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	if len(m.TopPlayers) > 0 {
		for _, e := range m.TopPlayers {
			l = e.Size()
			n += 1 + l + sovWilds(uint64(l))
		}
	}
	return n
}

func (m *TeamInfoMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Playerid))
	n += 5
	n += 5
	return n
}

func (m *TeamNoticeMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWilds(uint64(m.Playerid))
	n += 5
	n += 5
	l = len(m.Info)
	n += 1 + l + sovWilds(uint64(l))
	return n
}

func sovWilds(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWilds(x uint64) (n int) {
	return sovWilds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgChangeCubeHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeCubeHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeCubeHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UporDown", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UporDown = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CubeReDst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CubeReDst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CubeReDst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CubeIndex", wireType)
			}
			m.CubeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CubeIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainDistance", wireType)
			}
			m.RemainDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainDistance |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDoNothing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDoNothing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDoNothing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hello = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BanBarrageMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BanBarrageMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BanBarrageMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			m.Params = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Params |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetErrorMsgCmd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetErrorMsgCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetErrorMsgCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			m.Params = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Params |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLoginResult) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLoginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLoginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Others", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Others = append(m.Others, &MsgPlayer{})
			if err := m.Others[len(m.Others)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			m.Local = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Local |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallId", wireType)
			}
			m.BallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balls = append(m.Balls, &MsgBall{})
			if err := m.Balls[len(m.Balls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerballs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playerballs = append(m.Playerballs, &MsgPlayerBall{})
			if err := m.Playerballs[len(m.Playerballs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			m.TeamName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamName |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamNoticeCD", wireType)
			}
			m.TeamNoticeCD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamNoticeCD |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTime", wireType)
			}
			m.LeftTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ok")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("frame")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Local")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ballId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &MsgPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSceneTCP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSceneTCP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSceneTCP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eats = append(m.Eats, &BallEat{})
			if err := m.Eats[len(m.Eats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adds = append(m.Adds, &MsgBall{})
			if err := m.Adds[len(m.Adds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWilds
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Removes = append(m.Removes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWilds
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWilds
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWilds
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Removes = append(m.Removes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Removes", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hits = append(m.Hits, &HitMsg{})
			if err := m.Hits[len(m.Hits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddPlayers = append(m.AddPlayers, &MsgPlayerBall{})
			if err := m.AddPlayers[len(m.AddPlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWilds
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RemovePlayers = append(m.RemovePlayers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWilds
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWilds
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWilds
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RemovePlayers = append(m.RemovePlayers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovePlayers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSceneUDP) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSceneUDP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSceneUDP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moves = append(m.Moves, &BallMove{})
			if err := m.Moves[len(m.Moves)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangingInf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangingInf = append(m.ChangingInf, &CubeReDst{})
			if err := m.ChangingInf[len(m.ChangingInf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("frame")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindTCPSession) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindTCPSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindTCPSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			m.Local = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Local |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLive = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnapInfo == nil {
				m.SnapInfo = &MsgPlayerSnap{}
			}
			if err := m.SnapInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallId", wireType)
			}
			m.BallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curexp", wireType)
			}
			m.Curexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curexp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curmp", wireType)
			}
			m.Curmp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curmp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animalid", wireType)
			}
			m.Animalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Animalid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curhp", wireType)
			}
			m.Curhp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curhp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			m.TeamName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamName |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BombNum", wireType)
			}
			m.BombNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BombNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HammerNum", wireType)
			}
			m.HammerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HammerNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ballId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &MsgPlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("player")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefreshPlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefreshPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefreshPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &MsgPlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("player")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAsyncPlayerAnimal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAsyncPlayerAnimal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAsyncPlayerAnimal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animalid", wireType)
			}
			m.Animalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Animalid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemovePlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemovePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemovePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMove) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			m.Angle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Angle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			m.Face = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Face |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("angle")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("power")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelife) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelife: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelife: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgS2CRelife) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgS2CRelife: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgS2CRelife: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnapInfo == nil {
				m.SnapInfo = &MsgPlayerSnap{}
			}
			if err := m.SnapInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curhp", wireType)
			}
			m.Curhp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curhp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curmp", wireType)
			}
			m.Curmp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curmp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animalid", wireType)
			}
			m.Animalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Animalid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SnapInfo")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeath) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxScore", wireType)
			}
			m.MaxScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxScore |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillId", wireType)
			}
			m.KillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animalid", wireType)
			}
			m.Animalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Animalid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killanimalid", wireType)
			}
			m.Killanimalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killanimalid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("maxScore")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("killId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("killName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndPlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMvp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMvp = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMoney", wireType)
			}
			m.AddMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddMoney |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimalId", wireType)
			}
			m.AnimalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnimalId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamScore", wireType)
			}
			m.TeamScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamScore |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			m.TeamName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamName |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Score")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("KillNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Anchor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Anchor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Anchor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEndRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEndRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEndRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &EndPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSelf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserSelf == nil {
				m.UserSelf = &EndPlayer{}
			}
			if err := m.UserSelf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLevel", wireType)
			}
			m.OldLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldScores", wireType)
			}
			m.OldScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldScores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientHeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCastSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCastSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCastSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skillid", wireType)
			}
			m.Skillid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skillid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetVoiceInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetVoiceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetVoiceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Address")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RoomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqToSpeak) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqToSpeak: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqToSpeak: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetToSpeak) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetToSpeak: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetToSpeak: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RetCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSpeakUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSpeakUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSpeakUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedTm", wireType)
			}
			m.NeedTm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedTm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTm", wireType)
			}
			m.TotalTm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBaned", wireType)
			}
			m.IsBaned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBaned |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NeedTm")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TotalTm")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamRankList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTeamRankList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTeamRankList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &RetTeamRankList_TeamRank{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchNum", wireType)
			}
			m.WatchNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamRankList_TeamRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			m.Tname = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tname |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Score = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRank", wireType)
			}
			m.LastRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamMemPos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetTeamMemPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetTeamMemPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mems = append(m.Mems, &RetTeamMemPos_MemPos{})
			if err := m.Mems[len(m.Mems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetTeamMemPos_MemPos) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("X")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Y")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPlayerState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPlayerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPlayerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetPlayerState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetPlayerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetPlayerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LTime", wireType)
			}
			m.LTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetAddComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetAddComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetAddComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetBeJoined) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetBeJoined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetBeJoined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSceneChat) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSceneChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSceneChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Msg")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgS2CSceneChat) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgS2CSceneChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgS2CSceneChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Msg")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayerSnap) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayerSnap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayerSnap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapx", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Snapx = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Snapy = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Angle = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Snapx")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Snapy")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Angle")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("x")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("y")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayerBall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayerBall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayerBall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mp", wireType)
			}
			m.Mp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			m.Angle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Angle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			m.Face = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Face |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("level")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("x")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("y")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BallMove) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BallMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BallMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			m.Angle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Angle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			m.Face = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Face |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("x")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("y")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BallEat) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BallEat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BallEat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("source")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("target")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HitMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HitMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HitMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHp", wireType)
			}
			m.AddHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddHp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurHp", wireType)
			}
			m.CurHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurHp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("source")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("target")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTeamInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTeamInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTeamInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &TeamInfoMsg{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopPlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopPlayers = append(m.TopPlayers, &TeamInfoMsg{})
			if err := m.TopPlayers[len(m.TopPlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerid", wireType)
			}
			m.Playerid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Playerid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamNoticeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamNoticeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamNoticeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerid", wireType)
			}
			m.Playerid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Playerid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWilds
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWilds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWilds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWilds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWilds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWilds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWilds
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWilds
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWilds(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWilds = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWilds   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("wilds.proto", fileDescriptorWilds) }

var fileDescriptorWilds = []byte{
	// 2612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4f, 0x6f, 0x24, 0x47,
	0x15, 0xdf, 0xf9, 0x3f, 0xf3, 0xc6, 0x63, 0xb7, 0x7b, 0x77, 0xa3, 0x66, 0xb5, 0x71, 0x9c, 0x26,
	0x24, 0xcb, 0x12, 0x59, 0xca, 0x2a, 0x22, 0x08, 0x45, 0x80, 0x3d, 0xf6, 0xe2, 0x09, 0x1e, 0xc7,
	0xf4, 0xd8, 0x09, 0x08, 0x81, 0x54, 0x9e, 0x2e, 0xcf, 0x74, 0xdc, 0xdd, 0xd5, 0xe9, 0xaa, 0xf1,
	0x7a, 0xa4, 0xdc, 0xb8, 0x20, 0x4e, 0x39, 0x23, 0xae, 0x1c, 0x40, 0x7c, 0x05, 0x38, 0x47, 0x20,
	0x21, 0xc4, 0x07, 0x40, 0x28, 0x5c, 0xf8, 0x04, 0x08, 0xc4, 0x05, 0xbd, 0x57, 0xdd, 0x3d, 0xd5,
	0x9e, 0xf1, 0x06, 0x05, 0xc4, 0xc9, 0x53, 0xbf, 0x7a, 0x55, 0xf5, 0xea, 0xfd, 0xf9, 0xd5, 0x7b,
	0x6d, 0xe8, 0x3e, 0x0b, 0x42, 0x5f, 0xee, 0x24, 0xa9, 0x50, 0xc2, 0x6e, 0xcd, 0x24, 0x4f, 0xc7,
	0x91, 0xef, 0xbe, 0x05, 0x77, 0x87, 0x72, 0xd2, 0x9f, 0xb2, 0x78, 0xc2, 0xfb, 0xb3, 0x73, 0x7e,
	0xc8, 0x83, 0xc9, 0x54, 0xd9, 0xdb, 0xd0, 0x3e, 0x4b, 0x44, 0xba, 0x2f, 0x9e, 0xc5, 0x4e, 0x65,
	0xbb, 0xf2, 0xa8, 0xbd, 0x57, 0xff, 0xe4, 0xcf, 0x2f, 0xdd, 0xf1, 0xda, 0xb3, 0x0c, 0x75, 0x7f,
	0x08, 0x1d, 0x94, 0xf7, 0xf8, 0xbe, 0x54, 0xb6, 0x0b, 0x9d, 0xf1, 0xec, 0x9c, 0x0f, 0x62, 0x9f,
	0x5f, 0x93, 0x7c, 0x2f, 0x93, 0x5f, 0xc0, 0xf6, 0xeb, 0xb0, 0x9e, 0xf2, 0x88, 0x05, 0xf1, 0x7e,
	0x20, 0x15, 0x8b, 0xc7, 0xdc, 0xa9, 0x1a, 0x82, 0x37, 0xe6, 0xdc, 0x6f, 0xc1, 0xda, 0x50, 0x4e,
	0xf6, 0xc5, 0xb1, 0x50, 0xd3, 0x20, 0x9e, 0xd8, 0xf7, 0xa0, 0x1a, 0xf8, 0xb4, 0x75, 0x3d, 0x5b,
	0x51, 0x0d, 0x7c, 0xfb, 0x01, 0x34, 0xa6, 0x3c, 0x0c, 0x05, 0x6d, 0xd5, 0xc9, 0x26, 0x34, 0xe4,
	0x7e, 0x08, 0xbd, 0x3d, 0x16, 0xef, 0xb1, 0x34, 0x65, 0x13, 0x3e, 0x94, 0x13, 0x7b, 0x0b, 0x5a,
	0x1e, 0x57, 0x7d, 0xe1, 0x73, 0xa7, 0xb2, 0x5d, 0x2d, 0x4e, 0x6e, 0xa5, 0x1a, 0xb4, 0x1f, 0x42,
	0xf3, 0x84, 0xa5, 0x2c, 0x92, 0x25, 0xc5, 0x9a, 0x09, 0x61, 0x78, 0xc5, 0x77, 0xa4, 0x88, 0x49,
	0xc2, 0xa9, 0x19, 0xc7, 0x75, 0x3e, 0xc8, 0x61, 0xf7, 0x6d, 0x68, 0x0f, 0xe5, 0xe4, 0x48, 0x4c,
	0x82, 0xd8, 0x76, 0xa0, 0x1e, 0xb3, 0x48, 0x1f, 0x95, 0x8b, 0x12, 0x62, 0xbf, 0x00, 0xb5, 0x4b,
	0x3e, 0x77, 0xaa, 0xc6, 0x04, 0x02, 0x6e, 0x0a, 0xeb, 0x1e, 0x57, 0x07, 0x69, 0x2a, 0x52, 0x74,
	0x49, 0xe4, 0xff, 0x1f, 0x34, 0xfe, 0x5b, 0x0d, 0xd6, 0x73, 0x95, 0x3d, 0x2e, 0x67, 0xa1, 0x42,
	0x4b, 0x8b, 0x4b, 0x3a, 0x2f, 0x77, 0x7a, 0x55, 0x5c, 0x66, 0xf6, 0x47, 0x9d, 0x4d, 0xfb, 0xe7,
	0x97, 0x34, 0x77, 0xd7, 0x97, 0x7c, 0x0c, 0x4d, 0xa1, 0xa6, 0x3c, 0x95, 0x4e, 0x7d, 0xbb, 0xf6,
	0xa8, 0xfb, 0xc4, 0xde, 0xc9, 0x22, 0x6e, 0x67, 0x28, 0x27, 0x27, 0x21, 0x9b, 0xf3, 0xd4, 0xcb,
	0x24, 0xd0, 0x8b, 0x17, 0x29, 0x6e, 0xd3, 0x30, 0x2e, 0xa9, 0x21, 0x9c, 0x3b, 0x12, 0x63, 0x16,
	0x3a, 0x4d, 0x73, 0x2e, 0x44, 0x08, 0x83, 0xd4, 0x13, 0x22, 0x3a, 0xc6, 0xa5, 0x2d, 0x43, 0x83,
	0x76, 0x9a, 0xa1, 0x68, 0xa0, 0x73, 0x16, 0x86, 0x03, 0xdf, 0x69, 0x1b, 0xcb, 0x33, 0xcc, 0x7e,
	0x15, 0x1a, 0xf8, 0x4b, 0x3a, 0x1d, 0x52, 0xd1, 0x32, 0x55, 0xdc, 0x63, 0x61, 0xe8, 0xe9, 0x69,
	0xfb, 0x6b, 0xd0, 0x4d, 0x48, 0x63, 0x2d, 0x0d, 0x24, 0xfd, 0xc2, 0xf2, 0x85, 0x68, 0x8d, 0x29,
	0x8a, 0x1a, 0x9e, 0x72, 0xa6, 0x35, 0xec, 0x1a, 0x2e, 0x6a, 0xab, 0x0c, 0x45, 0x0d, 0x51, 0x62,
	0xe0, 0x3b, 0x6b, 0xa6, 0x0b, 0x15, 0x61, 0xf6, 0x23, 0x58, 0xa3, 0xf5, 0x42, 0x05, 0x63, 0xde,
	0xdf, 0x77, 0x7a, 0x86, 0xcc, 0x9a, 0x32, 0x66, 0xf0, 0xa4, 0x90, 0x5f, 0xa8, 0xd3, 0x20, 0xe2,
	0xce, 0xba, 0x79, 0x52, 0x8e, 0xba, 0x1f, 0x57, 0xa0, 0x39, 0x94, 0x93, 0x53, 0x91, 0xd8, 0xaf,
	0x43, 0x4b, 0x6b, 0x29, 0x9d, 0xca, 0xad, 0xde, 0xc9, 0x45, 0x30, 0x0a, 0x0f, 0x62, 0x9f, 0x76,
	0xae, 0x19, 0x3b, 0xb7, 0xb8, 0x06, 0x31, 0x08, 0x3c, 0x16, 0x5f, 0x3a, 0x75, 0x63, 0xb2, 0x9e,
	0xb2, 0xf8, 0x12, 0x57, 0x7e, 0x27, 0x08, 0xc3, 0xe3, 0x59, 0xe4, 0x34, 0xcc, 0x95, 0x97, 0x1a,
	0x74, 0xff, 0x5e, 0x81, 0xee, 0x50, 0x4e, 0x46, 0x63, 0x1e, 0xf3, 0xd3, 0xfe, 0x89, 0xfd, 0x0a,
	0xd4, 0x39, 0x53, 0xb9, 0x52, 0x0b, 0x7f, 0xa0, 0x61, 0x0f, 0x98, 0xf2, 0x68, 0x16, 0xa5, 0x98,
	0xef, 0x63, 0xcc, 0xaf, 0xf6, 0x1a, 0xcd, 0xda, 0x0e, 0xb4, 0x52, 0x1e, 0x89, 0x2b, 0x2e, 0x9d,
	0xda, 0x76, 0xed, 0x51, 0xcf, 0xcb, 0x87, 0xf6, 0x17, 0xa1, 0x3e, 0x0d, 0x54, 0x1e, 0x98, 0x1b,
	0xc5, 0xfa, 0xc3, 0x40, 0x0d, 0xe5, 0xc4, 0xa3, 0x49, 0xfb, 0xab, 0x00, 0xcc, 0xf7, 0x4f, 0x32,
	0x2b, 0x35, 0x9e, 0xeb, 0x72, 0x43, 0xd2, 0x7e, 0x05, 0x7a, 0xfa, 0x9c, 0x7c, 0x69, 0x93, 0x0e,
	0x2f, 0x83, 0xee, 0x4f, 0x8c, 0x8b, 0x9f, 0xed, 0x9f, 0xd8, 0xaf, 0x41, 0x43, 0xab, 0xaa, 0x6f,
	0xbe, 0x59, 0xba, 0xf9, 0x50, 0x5c, 0x71, 0x4f, 0xcf, 0x2f, 0x52, 0xa5, 0xba, 0x9c, 0x2a, 0x6f,
	0x42, 0x77, 0x8c, 0x3c, 0x1e, 0xc4, 0x93, 0x41, 0x7c, 0x41, 0xb7, 0x36, 0x3d, 0x5b, 0xb0, 0xb5,
	0x67, 0x8a, 0xb9, 0xbb, 0xb0, 0x89, 0x86, 0x0b, 0x62, 0xff, 0xb4, 0x7f, 0x32, 0xe2, 0x52, 0x06,
	0x22, 0x2e, 0xd8, 0xb6, 0x9c, 0xed, 0xb7, 0x11, 0xd7, 0x2f, 0x6a, 0xd0, 0x29, 0x2c, 0x72, 0xcb,
	0xda, 0x9c, 0x29, 0xaa, 0x4b, 0x74, 0xf8, 0x00, 0x74, 0x3a, 0x97, 0x82, 0x2b, 0xcb, 0xf0, 0x87,
	0xd0, 0x1c, 0xc8, 0xa3, 0xe0, 0x8a, 0x53, 0x70, 0xe5, 0x7c, 0xd4, 0x0c, 0x08, 0xb3, 0x9f, 0x40,
	0x7b, 0x14, 0xb3, 0x64, 0x10, 0x5f, 0x08, 0x8a, 0xaf, 0x95, 0x1e, 0x42, 0x09, 0xaf, 0x2d, 0x33,
	0x39, 0x83, 0x11, 0x9a, 0x2b, 0x18, 0xe1, 0x21, 0x34, 0xc7, 0xb3, 0x94, 0x5f, 0x27, 0xc4, 0x27,
	0xc5, 0xac, 0xc6, 0x50, 0xd3, 0xf1, 0x2c, 0x8d, 0x12, 0xa7, 0x6d, 0x6a, 0x4a, 0x10, 0xe6, 0x1f,
	0x8b, 0x83, 0x88, 0x85, 0x81, 0xef, 0x74, 0xcc, 0xfc, 0xcb, 0xd1, 0x6c, 0xf5, 0x34, 0x71, 0xe0,
	0xc6, 0xea, 0x69, 0xf2, 0x1f, 0xf0, 0xc4, 0x16, 0xb4, 0xce, 0x45, 0x74, 0x8e, 0xa9, 0x84, 0x44,
	0xd1, 0xc8, 0x53, 0x29, 0x03, 0x91, 0xec, 0xa7, 0x2c, 0x8a, 0x78, 0x8a, 0x12, 0x3d, 0x43, 0x62,
	0x01, 0xbb, 0x5f, 0xa7, 0x37, 0x75, 0x37, 0x0f, 0x56, 0xe4, 0x68, 0x9d, 0xe3, 0xe4, 0xad, 0x5b,
	0x38, 0x5a, 0x4b, 0xb8, 0xdf, 0x00, 0x0b, 0x93, 0x83, 0x5f, 0xa4, 0x5c, 0x4e, 0x3f, 0xc7, 0xfa,
	0x63, 0xb8, 0x87, 0x67, 0xcb, 0x79, 0x3c, 0xd6, 0x33, 0xbb, 0x64, 0x97, 0x5b, 0xde, 0x75, 0xd3,
	0x9a, 0xd5, 0x55, 0xd6, 0x74, 0x5f, 0x83, 0x0d, 0xd2, 0x67, 0x91, 0x55, 0xab, 0x03, 0xcf, 0xfd,
	0x01, 0xb4, 0x86, 0x72, 0x82, 0x39, 0x84, 0x1e, 0x60, 0xf1, 0x24, 0xd4, 0x8f, 0x69, 0x6e, 0x1f,
	0x0d, 0xe1, 0x5c, 0x22, 0x9e, 0xf1, 0x94, 0x02, 0xb4, 0x98, 0x23, 0x08, 0x63, 0xf7, 0x82, 0x8d,
	0xcb, 0xec, 0x47, 0x88, 0xdb, 0xa5, 0xc0, 0xf7, 0x78, 0x18, 0x5c, 0x70, 0xf7, 0x4f, 0x15, 0xb2,
	0xef, 0xe8, 0x49, 0x5f, 0x03, 0x46, 0x09, 0x50, 0x59, 0x8e, 0xf9, 0x3c, 0x8d, 0x2b, 0x37, 0xd3,
	0xd8, 0x8c, 0xea, 0x1a, 0xd9, 0xf5, 0xb3, 0xa3, 0xba, 0x88, 0xad, 0xfa, 0x72, 0x6c, 0x15, 0x51,
	0xdb, 0x78, 0x7e, 0xd4, 0x36, 0x57, 0xda, 0xf9, 0x0f, 0x15, 0xaa, 0x69, 0xf6, 0x39, 0x53, 0x53,
	0x14, 0x8f, 0xd8, 0xf5, 0x68, 0x2c, 0xd2, 0x72, 0x41, 0x52, 0xa0, 0x98, 0x40, 0x48, 0xee, 0x83,
	0x72, 0xa9, 0x90, 0x61, 0xb8, 0x9e, 0xa8, 0x5f, 0x97, 0x0c, 0x0b, 0x22, 0x28, 0x50, 0xf4, 0xe1,
	0xc0, 0x77, 0xea, 0x37, 0xc8, 0xc3, 0x54, 0xb3, 0xb1, 0x32, 0xb9, 0x1e, 0xc1, 0x1a, 0xee, 0xb1,
	0xf2, 0x32, 0xa5, 0x19, 0xf7, 0x97, 0x75, 0xe8, 0x1c, 0xc4, 0xfe, 0x22, 0x66, 0x06, 0xcb, 0x64,
	0xf5, 0x00, 0x1a, 0x67, 0xc7, 0x37, 0xd9, 0xaa, 0x31, 0x23, 0x0d, 0x1d, 0xa8, 0x2f, 0xe9, 0x5f,
	0x38, 0x55, 0x9b, 0xc6, 0x54, 0xbf, 0x21, 0xc9, 0x2e, 0xa5, 0x97, 0xb0, 0xba, 0xf4, 0x12, 0x22,
	0xb5, 0x8e, 0xf8, 0x75, 0x49, 0xed, 0x9a, 0xe4, 0xd7, 0x78, 0xda, 0x60, 0x2c, 0xe2, 0x12, 0x1d,
	0xd5, 0x83, 0xb1, 0x88, 0xd1, 0x26, 0x58, 0x18, 0xa9, 0x40, 0xc4, 0x25, 0x3e, 0x6a, 0x87, 0x19,
	0x8a, 0xfa, 0x0c, 0x45, 0xcc, 0xe7, 0x25, 0x3e, 0x6a, 0x44, 0x08, 0x15, 0x6f, 0x36, 0x2c, 0xbd,
	0xd9, 0xdb, 0xd0, 0x3e, 0x61, 0x52, 0xd2, 0xa9, 0x5d, 0xb3, 0xa8, 0x4a, 0x32, 0x14, 0xf7, 0x1d,
	0xc8, 0xe1, 0x55, 0x42, 0x44, 0x94, 0x73, 0x72, 0x23, 0x40, 0x08, 0x57, 0x0f, 0xe4, 0x53, 0x11,
	0x86, 0xe2, 0x19, 0xb1, 0x50, 0xd1, 0x37, 0x04, 0x19, 0x8a, 0x12, 0xbb, 0xbe, 0xaf, 0x15, 0x5b,
	0x37, 0x78, 0xaa, 0xcd, 0x32, 0x94, 0x24, 0xc8, 0x5b, 0x03, 0xdf, 0xd9, 0x58, 0xf6, 0xf6, 0xc0,
	0x47, 0xb2, 0x43, 0xba, 0xd4, 0xd6, 0xb6, 0xcc, 0x76, 0x43, 0xe5, 0x70, 0x89, 0x52, 0x37, 0x57,
	0x52, 0x2a, 0x5a, 0x90, 0x33, 0x9f, 0xa7, 0x03, 0xdf, 0xb1, 0x0d, 0x02, 0x6a, 0x87, 0x19, 0xea,
	0xb6, 0xa1, 0xb9, 0x1b, 0x8f, 0xa7, 0x22, 0x75, 0x7f, 0x5d, 0x05, 0x18, 0xca, 0xc9, 0x41, 0xec,
	0x63, 0xc5, 0xf9, 0xbc, 0x02, 0xaa, 0x88, 0xad, 0x45, 0x01, 0xb5, 0x03, 0xed, 0x33, 0xc9, 0xd3,
	0x11, 0x0f, 0x2f, 0x28, 0xe1, 0x57, 0x8b, 0xb7, 0x67, 0x99, 0x4c, 0x49, 0xb1, 0xda, 0x2a, 0xc5,
	0x50, 0xe2, 0xdd, 0xd0, 0x3f, 0xe2, 0x57, 0x3c, 0x2c, 0xa5, 0x7c, 0x5b, 0x64, 0x28, 0x9a, 0xe8,
	0xdd, 0xd0, 0x27, 0x53, 0xc8, 0x52, 0xce, 0x74, 0x44, 0x0e, 0x53, 0x6d, 0x4d, 0x5b, 0x34, 0x4b,
	0x2f, 0x2f, 0xad, 0x7f, 0x08, 0xcd, 0x6c, 0x71, 0xe9, 0x25, 0x94, 0x7a, 0xe5, 0x16, 0xb4, 0x06,
	0xf2, 0x3d, 0xca, 0xb4, 0xb6, 0xe1, 0xe5, 0x56, 0xa0, 0x41, 0x77, 0x13, 0x36, 0xfa, 0x61, 0xc0,
	0x63, 0x75, 0xc8, 0x59, 0xaa, 0xf6, 0x38, 0x53, 0xee, 0x0e, 0x91, 0x63, 0x9f, 0x49, 0x35, 0xc2,
	0xa0, 0xc7, 0x2d, 0x24, 0xfe, 0xc8, 0xd8, 0xbf, 0xc8, 0x88, 0x0c, 0x74, 0x8f, 0x60, 0xcd, 0xe3,
	0xea, 0x3d, 0x11, 0x8c, 0x39, 0x51, 0xdc, 0x16, 0xb4, 0x76, 0x7d, 0x3f, 0xe5, 0x52, 0x96, 0x5a,
	0xaa, 0x16, 0xd3, 0x20, 0x2a, 0x8c, 0xae, 0xc9, 0x98, 0xa7, 0x50, 0x38, 0x25, 0xcc, 0x5d, 0x03,
	0xf0, 0xf8, 0x87, 0xa7, 0x62, 0x94, 0x70, 0x76, 0xe9, 0x9e, 0xe3, 0x48, 0x65, 0xa3, 0xcf, 0xec,
	0xb2, 0x8a, 0x3c, 0xaa, 0xae, 0xcc, 0xa3, 0xa5, 0xc2, 0xb8, 0xae, 0xb0, 0xdc, 0xfe, 0x79, 0x85,
	0x2e, 0x40, 0x47, 0xa0, 0xf7, 0x6f, 0xa1, 0x9a, 0x9c, 0x4e, 0x96, 0xeb, 0xa2, 0x87, 0xd0, 0x3c,
	0xe6, 0xdc, 0x3f, 0x8d, 0x88, 0x6a, 0x8a, 0x0b, 0xc5, 0x84, 0xa1, 0xd2, 0xa7, 0x42, 0xb1, 0xf0,
	0x34, 0x22, 0xba, 0x29, 0x94, 0x56, 0x1a, 0xd4, 0x1e, 0xda, 0x63, 0x31, 0x2f, 0x33, 0x66, 0x2b,
	0xd0, 0xa0, 0xfb, 0xab, 0x2a, 0x6c, 0xa0, 0x0d, 0x38, 0x8b, 0x90, 0x08, 0x8e, 0x02, 0xa9, 0xec,
	0xb7, 0xa0, 0x81, 0xe3, 0x3c, 0xa6, 0x5f, 0x2e, 0x82, 0xf4, 0x86, 0xe0, 0x4e, 0x3e, 0xf0, 0x1a,
	0x98, 0x4c, 0xd4, 0xe6, 0xbc, 0xcf, 0xd4, 0x78, 0x8a, 0xf4, 0x56, 0x7a, 0xae, 0x9f, 0x65, 0xe8,
	0x67, 0xf6, 0x10, 0x5b, 0x90, 0x53, 0x61, 0x29, 0x9e, 0x73, 0xf0, 0xc1, 0x47, 0x3a, 0x9b, 0xf1,
	0x50, 0xf4, 0xc7, 0x69, 0xf1, 0xae, 0x16, 0xfe, 0x50, 0x79, 0x6f, 0x7d, 0x53, 0x89, 0x5a, 0x3c,
	0x8b, 0x16, 0xdc, 0x8c, 0xa7, 0x57, 0xca, 0xdc, 0x8c, 0xe9, 0xc6, 0xa4, 0x2a, 0x7a, 0x98, 0x82,
	0x91, 0xc2, 0x0c, 0x75, 0x7f, 0x5a, 0x81, 0x5e, 0x66, 0x83, 0x21, 0x8f, 0x4e, 0x84, 0xb4, 0xdf,
	0x80, 0xfa, 0x90, 0x17, 0x96, 0x7a, 0xf1, 0xa6, 0xa5, 0xb4, 0xd4, 0x8e, 0xfe, 0xe3, 0xd5, 0x23,
	0x1e, 0xc9, 0x07, 0x4f, 0xa1, 0x99, 0x2d, 0x5e, 0x1d, 0x09, 0x36, 0x54, 0xbe, 0x57, 0xaa, 0x3e,
	0x2a, 0xd7, 0x88, 0x7d, 0x9f, 0xdc, 0x5f, 0x60, 0x73, 0xf7, 0x75, 0x58, 0xf7, 0xf8, 0x87, 0x59,
	0x19, 0xa0, 0x98, 0xd2, 0x0f, 0x0f, 0xfe, 0x28, 0x85, 0x6f, 0x43, 0x22, 0xe4, 0xfe, 0x88, 0x3e,
	0x2a, 0x98, 0xd2, 0xb7, 0x3e, 0x79, 0x7a, 0x8f, 0xea, 0xd2, 0x1e, 0xc4, 0x13, 0x99, 0xeb, 0xcc,
	0x1e, 0x9c, 0xba, 0xca, 0x0d, 0xb2, 0xcc, 0xae, 0xef, 0xf7, 0x45, 0x14, 0xf1, 0x58, 0xb9, 0x7d,
	0xe8, 0x7a, 0x5c, 0xed, 0xf1, 0x77, 0x44, 0x10, 0x73, 0xff, 0x96, 0xd3, 0x30, 0x99, 0xc7, 0x63,
	0x31, 0x8b, 0x55, 0x29, 0xf0, 0x5b, 0x4c, 0x83, 0x48, 0xbc, 0x58, 0x57, 0xcd, 0x62, 0xf7, 0x6d,
	0x5d, 0x53, 0x61, 0xa3, 0xd4, 0x9f, 0x32, 0x85, 0x0e, 0x1e, 0xca, 0x49, 0x89, 0x02, 0x6a, 0x91,
	0x9c, 0x64, 0xe7, 0xdc, 0xf8, 0x3e, 0xe1, 0x7e, 0x93, 0xaa, 0xc4, 0xd1, 0x93, 0xfe, 0xe7, 0xdd,
	0x60, 0x0e, 0xbd, 0x52, 0xcd, 0x45, 0x76, 0x8a, 0x59, 0x72, 0x4d, 0x1b, 0x54, 0x0b, 0x3b, 0x21,
	0x94, 0xcf, 0xe9, 0x0e, 0xa9, 0x34, 0x37, 0xc7, 0xb9, 0x5d, 0xaa, 0x3d, 0x6b, 0xe6, 0x9c, 0xae,
	0x3d, 0x57, 0x16, 0x3d, 0x2e, 0xa3, 0xc2, 0x15, 0x1b, 0x40, 0xa3, 0xb2, 0xed, 0x95, 0xa9, 0x43,
	0xcd, 0x13, 0x5e, 0x8a, 0x19, 0x42, 0x30, 0x6c, 0xae, 0xcb, 0x61, 0x43, 0xa1, 0x34, 0xa7, 0x33,
	0x8c, 0x50, 0xfa, 0x7d, 0xc5, 0xb8, 0xde, 0x73, 0x4e, 0xc2, 0x16, 0x8d, 0x1e, 0x8a, 0x52, 0x70,
	0xe8, 0x87, 0xe2, 0x1e, 0x54, 0xa7, 0x49, 0x29, 0xa9, 0xab, 0xd3, 0x04, 0xd1, 0xa8, 0x5c, 0x8d,
	0x56, 0xa3, 0x44, 0xeb, 0xd5, 0x58, 0xa1, 0x57, 0xb3, 0xa4, 0xd7, 0xa2, 0x50, 0x6f, 0x19, 0xe9,
	0x98, 0x19, 0x2b, 0x2f, 0xc6, 0xdb, 0x4b, 0xc5, 0xf8, 0xcf, 0x2a, 0xd0, 0xce, 0xfb, 0xe5, 0x5b,
	0x2e, 0x42, 0x0a, 0x54, 0x57, 0x28, 0x50, 0x5b, 0x52, 0x80, 0x42, 0xbf, 0x5c, 0x4f, 0x17, 0xd9,
	0xa0, 0x95, 0x6b, 0xdc, 0xae, 0x5c, 0x73, 0x49, 0xb9, 0x03, 0x68, 0x65, 0x5f, 0x31, 0x90, 0xd8,
	0xa5, 0x98, 0xa5, 0xe3, 0x72, 0xbe, 0x66, 0x18, 0xce, 0x2a, 0x96, 0x4e, 0xb8, 0x2a, 0xbf, 0x63,
	0x1a, 0x73, 0x3f, 0x82, 0xa6, 0xfe, 0x4c, 0xf1, 0xdf, 0xec, 0x42, 0x57, 0xf0, 0xfd, 0x43, 0xed,
	0xb6, 0xc5, 0x15, 0x10, 0xca, 0xda, 0x85, 0xc3, 0xe5, 0x56, 0xe2, 0x30, 0x71, 0xe7, 0xb0, 0x79,
	0x96, 0xf8, 0x4c, 0x71, 0xfa, 0x64, 0x15, 0x5f, 0x08, 0x54, 0x64, 0x07, 0x5a, 0x11, 0x8f, 0xce,
	0x17, 0xb5, 0xd0, 0xbd, 0x82, 0x0d, 0x0d, 0x31, 0x2f, 0x17, 0xb2, 0xdf, 0x04, 0x50, 0x22, 0xc9,
	0x3f, 0x8f, 0x54, 0x9f, 0xb3, 0xc4, 0x90, 0x73, 0xdf, 0x87, 0xae, 0x79, 0xe8, 0x36, 0xb4, 0x75,
	0x75, 0x75, 0xa3, 0x79, 0x2c, 0xd0, 0xdc, 0xd5, 0x95, 0x22, 0xd9, 0x16, 0xae, 0x36, 0xb0, 0xb9,
	0x2b, 0xa1, 0xb7, 0xf8, 0xc4, 0xf6, 0x3f, 0xdd, 0x1a, 0xa3, 0x21, 0xc0, 0x2e, 0xae, 0x6e, 0xf6,
	0x7f, 0x88, 0x3c, 0xfe, 0x71, 0x9d, 0xca, 0xc9, 0xd3, 0x79, 0xc2, 0xfb, 0x91, 0x6f, 0x77, 0xa0,
	0x41, 0x5f, 0x60, 0xad, 0x8a, 0xdd, 0x82, 0xda, 0xa9, 0x48, 0xac, 0xaa, 0xdd, 0x83, 0x4e, 0xd1,
	0xa9, 0x5b, 0x35, 0xdb, 0xc2, 0x6a, 0x62, 0xd1, 0xec, 0x5a, 0x75, 0xbb, 0x0d, 0x75, 0x8c, 0x74,
	0xab, 0x89, 0x6b, 0xbc, 0x59, 0x6c, 0xb5, 0x6c, 0x80, 0xa6, 0xc7, 0x8f, 0x82, 0x0b, 0x6e, 0x75,
	0x70, 0x4f, 0x6a, 0xda, 0x2c, 0xb0, 0xbb, 0xf4, 0xf8, 0x62, 0x75, 0x64, 0x75, 0xed, 0x4d, 0x24,
	0x6c, 0xa3, 0x8b, 0xb7, 0x7a, 0xf6, 0x7d, 0xd8, 0x5c, 0x6a, 0xcc, 0xad, 0x75, 0xd4, 0xa0, 0x28,
	0xdf, 0x2c, 0x0b, 0x87, 0x05, 0x8b, 0x5a, 0xf7, 0x6c, 0x1b, 0xd6, 0x77, 0xc7, 0xaa, 0x1f, 0x0a,
	0xc9, 0x47, 0x62, 0x7c, 0xc9, 0x95, 0x75, 0xdf, 0x5e, 0x83, 0x76, 0xfe, 0xf9, 0xda, 0xfa, 0x02,
	0x8e, 0xf2, 0x2f, 0x7b, 0xd6, 0x4b, 0xc5, 0xe8, 0x6c, 0xff, 0xc4, 0xda, 0xc6, 0xd5, 0xe5, 0x4f,
	0x4e, 0xd6, 0xcb, 0x78, 0x45, 0xb3, 0xca, 0xb0, 0x1e, 0xd9, 0xeb, 0x00, 0x8b, 0xd7, 0xd4, 0xfa,
	0x72, 0x3e, 0xd6, 0xbe, 0xb2, 0x1e, 0xa3, 0x4a, 0x45, 0x41, 0x69, 0x3d, 0xa1, 0xe3, 0x63, 0xff,
	0xbb, 0x74, 0xd1, 0x5d, 0x9c, 0x2c, 0xaa, 0x47, 0xeb, 0x15, 0x34, 0x42, 0x56, 0xf0, 0x59, 0x5f,
	0xa2, 0xbb, 0xe4, 0x85, 0x99, 0xf5, 0x2a, 0x6a, 0x53, 0x8e, 0x6b, 0x6b, 0x68, 0x6f, 0xc2, 0x5a,
	0x6e, 0x0f, 0xec, 0x00, 0xac, 0x7f, 0xd4, 0xec, 0xbb, 0xb0, 0xae, 0xa1, 0xb3, 0x38, 0x03, 0xff,
	0x59, 0xb3, 0x6d, 0xe8, 0x7d, 0x3b, 0x7f, 0x60, 0x49, 0xed, 0x7f, 0xd5, 0xec, 0x75, 0xe8, 0x14,
	0xff, 0xb9, 0xb0, 0x7e, 0xd3, 0xb0, 0xef, 0x83, 0x75, 0xf3, 0x3f, 0x2c, 0xd6, 0x6f, 0x1b, 0x8f,
	0xaf, 0xa0, 0x37, 0x9a, 0x4b, 0xc5, 0xa3, 0x2c, 0x14, 0xd0, 0x7f, 0xa3, 0xe1, 0xb1, 0x88, 0xb9,
	0x75, 0x87, 0xec, 0x35, 0xc4, 0x9e, 0x91, 0xfb, 0x56, 0x05, 0xbd, 0x39, 0x1a, 0x1e, 0x30, 0x65,
	0x55, 0xb5, 0xd0, 0x01, 0x53, 0x6f, 0x58, 0x35, 0xbc, 0xd4, 0x68, 0xb8, 0x97, 0xe2, 0xa5, 0xea,
	0x7a, 0xf0, 0x34, 0x48, 0xa5, 0xb2, 0x1a, 0x7a, 0x30, 0x88, 0x31, 0x96, 0x9a, 0x74, 0xdd, 0xe1,
	0x1e, 0xd7, 0x82, 0xad, 0xc7, 0x5f, 0x81, 0xbb, 0x43, 0x96, 0xbc, 0x7b, 0xfe, 0x01, 0x1f, 0xab,
	0xbe, 0x88, 0x2f, 0x02, 0x7d, 0x7a, 0x07, 0x1a, 0x07, 0x51, 0xa2, 0xe6, 0xd6, 0x1d, 0xfc, 0xb9,
	0x17, 0x8a, 0xf1, 0xa5, 0x55, 0x79, 0xfc, 0xbb, 0x8c, 0x55, 0x73, 0x05, 0xb3, 0xa8, 0xa9, 0xe0,
	0xa6, 0x4f, 0x85, 0xf0, 0xf7, 0x38, 0x06, 0x2e, 0xa0, 0x6f, 0x70, 0x78, 0x2c, 0x52, 0x8c, 0x9e,
	0x6e, 0x3e, 0x3e, 0xa4, 0xaf, 0x4f, 0xd6, 0x1a, 0xde, 0x87, 0xc4, 0x45, 0x74, 0x6e, 0xf5, 0x50,
	0x3d, 0x1c, 0x1d, 0xc4, 0xbe, 0x75, 0x97, 0x76, 0xe2, 0x3c, 0xdb, 0xe9, 0x1e, 0xad, 0xe4, 0x3c,
	0xdf, 0xe9, 0x3e, 0xc9, 0x72, 0x4e, 0xb2, 0x2f, 0xe2, 0x24, 0xb9, 0x5b, 0x0b, 0x6f, 0xd9, 0x1b,
	0xd0, 0xa5, 0x71, 0x76, 0xce, 0x4b, 0x74, 0x57, 0x12, 0xc0, 0x83, 0xb6, 0xc9, 0x8c, 0x38, 0xc4,
	0xd5, 0xaf, 0xed, 0x59, 0x9f, 0x7c, 0xba, 0x55, 0xf9, 0xe3, 0xa7, 0x5b, 0x95, 0xbf, 0x7c, 0xba,
	0x55, 0xf9, 0xf8, 0xaf, 0x5b, 0x77, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x20, 0x1c, 0x7d,
	0x16, 0x1b, 0x00, 0x00,
}
