// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sns.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		sns.proto

	It has these top-level messages:
		RetPhotoList
		RetSnsDetailInfo
		RetMatchList
		RetHonorList
		RetUserBaseInfo
		IsReportMsg
		RetReportMsgList
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 获取玩家照片列表 msg?c=MsgType_GetPhotoList&t=查看玩家id
type RetPhotoList struct {
	Data []*RetPhotoList_PhotoInfo `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *RetPhotoList) Reset()                    { *m = RetPhotoList{} }
func (m *RetPhotoList) String() string            { return proto.CompactTextString(m) }
func (*RetPhotoList) ProtoMessage()               {}
func (*RetPhotoList) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{0} }

func (m *RetPhotoList) GetData() []*RetPhotoList_PhotoInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type RetPhotoList_PhotoInfo struct {
	Id        string `protobuf:"bytes,1,req,name=Id,json=id" json:"Id"`
	Uid       uint64 `protobuf:"varint,2,req,name=Uid,json=uid" json:"Uid"`
	FileSize  uint32 `protobuf:"varint,3,req,name=FileSize,json=fileSize" json:"FileSize"`
	UploadUrl string `protobuf:"bytes,4,req,name=UploadUrl,json=uploadUrl" json:"UploadUrl"`
	ShowNum   uint32 `protobuf:"varint,5,req,name=ShowNum,json=showNum" json:"ShowNum"`
	LaudNum   uint32 `protobuf:"varint,6,req,name=LaudNum,json=laudNum" json:"LaudNum"`
	Thumb198  string `protobuf:"bytes,7,req,name=Thumb198,json=thumb198" json:"Thumb198"`
	Time      uint64 `protobuf:"varint,8,req,name=Time,json=time" json:"Time"`
	State     uint32 `protobuf:"varint,9,req,name=State,json=state" json:"State"`
	IsPraise  bool   `protobuf:"varint,10,opt,name=IsPraise,json=isPraise" json:"IsPraise"`
	IsShow    bool   `protobuf:"varint,11,opt,name=IsShow,json=isShow" json:"IsShow"`
}

func (m *RetPhotoList_PhotoInfo) Reset()                    { *m = RetPhotoList_PhotoInfo{} }
func (m *RetPhotoList_PhotoInfo) String() string            { return proto.CompactTextString(m) }
func (*RetPhotoList_PhotoInfo) ProtoMessage()               {}
func (*RetPhotoList_PhotoInfo) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{0, 0} }

func (m *RetPhotoList_PhotoInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RetPhotoList_PhotoInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RetPhotoList_PhotoInfo) GetFileSize() uint32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *RetPhotoList_PhotoInfo) GetUploadUrl() string {
	if m != nil {
		return m.UploadUrl
	}
	return ""
}

func (m *RetPhotoList_PhotoInfo) GetShowNum() uint32 {
	if m != nil {
		return m.ShowNum
	}
	return 0
}

func (m *RetPhotoList_PhotoInfo) GetLaudNum() uint32 {
	if m != nil {
		return m.LaudNum
	}
	return 0
}

func (m *RetPhotoList_PhotoInfo) GetThumb198() string {
	if m != nil {
		return m.Thumb198
	}
	return ""
}

func (m *RetPhotoList_PhotoInfo) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RetPhotoList_PhotoInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetPhotoList_PhotoInfo) GetIsPraise() bool {
	if m != nil {
		return m.IsPraise
	}
	return false
}

func (m *RetPhotoList_PhotoInfo) GetIsShow() bool {
	if m != nil {
		return m.IsShow
	}
	return false
}

// 返回社区玩家详细数据 /msg?c=SnsDetailInfo&u=玩家id
type RetSnsDetailInfo struct {
	Id           uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account      string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	NickName     string `protobuf:"bytes,3,req,name=NickName,json=nickName" json:"NickName"`
	Icon         uint32 `protobuf:"varint,4,req,name=Icon,json=icon" json:"Icon"`
	Location     uint32 `protobuf:"varint,5,req,name=Location,json=location" json:"Location"`
	Sign         string `protobuf:"bytes,6,req,name=Sign,json=sign" json:"Sign"`
	Sex          uint32 `protobuf:"varint,7,req,name=Sex,json=sex" json:"Sex"`
	Level        uint32 `protobuf:"varint,8,req,name=Level,json=level" json:"Level"`
	Scores       uint32 `protobuf:"varint,9,req,name=Scores,json=scores" json:"Scores"`
	FollowNum    uint32 `protobuf:"varint,10,opt,name=FollowNum,json=followNum" json:"FollowNum"`
	FansNum      uint32 `protobuf:"varint,11,opt,name=FansNum,json=fansNum" json:"FansNum"`
	FriendNum    uint32 `protobuf:"varint,12,opt,name=FriendNum,json=friendNum" json:"FriendNum"`
	ShowPos      bool   `protobuf:"varint,13,opt,name=ShowPos,json=showPos" json:"ShowPos"`
	Age          uint32 `protobuf:"varint,14,opt,name=Age,json=age" json:"Age"`
	PassIcon     string `protobuf:"bytes,15,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	AudienceNum  uint32 `protobuf:"varint,16,opt,name=AudienceNum,json=audienceNum" json:"AudienceNum"`
	AudienceUrl  string `protobuf:"bytes,17,opt,name=AudienceUrl,json=audienceUrl" json:"AudienceUrl"`
	AudienceTime uint32 `protobuf:"varint,18,opt,name=AudienceTime,json=audienceTime" json:"AudienceTime"`
	IsFollow     bool   `protobuf:"varint,19,opt,name=IsFollow,json=isFollow" json:"IsFollow"`
	IsBanList    bool   `protobuf:"varint,20,opt,name=IsBanList,json=isBanList" json:"IsBanList"`
	State        uint32 `protobuf:"varint,21,opt,name=State,json=state" json:"State"`
	Position     string `protobuf:"bytes,22,opt,name=Position,json=position" json:"Position"`
}

func (m *RetSnsDetailInfo) Reset()                    { *m = RetSnsDetailInfo{} }
func (m *RetSnsDetailInfo) String() string            { return proto.CompactTextString(m) }
func (*RetSnsDetailInfo) ProtoMessage()               {}
func (*RetSnsDetailInfo) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{1} }

func (m *RetSnsDetailInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetSnsDetailInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetSnsDetailInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *RetSnsDetailInfo) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetSnsDetailInfo) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *RetSnsDetailInfo) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *RetSnsDetailInfo) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetSnsDetailInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetSnsDetailInfo) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

func (m *RetSnsDetailInfo) GetFollowNum() uint32 {
	if m != nil {
		return m.FollowNum
	}
	return 0
}

func (m *RetSnsDetailInfo) GetFansNum() uint32 {
	if m != nil {
		return m.FansNum
	}
	return 0
}

func (m *RetSnsDetailInfo) GetFriendNum() uint32 {
	if m != nil {
		return m.FriendNum
	}
	return 0
}

func (m *RetSnsDetailInfo) GetShowPos() bool {
	if m != nil {
		return m.ShowPos
	}
	return false
}

func (m *RetSnsDetailInfo) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RetSnsDetailInfo) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetSnsDetailInfo) GetAudienceNum() uint32 {
	if m != nil {
		return m.AudienceNum
	}
	return 0
}

func (m *RetSnsDetailInfo) GetAudienceUrl() string {
	if m != nil {
		return m.AudienceUrl
	}
	return ""
}

func (m *RetSnsDetailInfo) GetAudienceTime() uint32 {
	if m != nil {
		return m.AudienceTime
	}
	return 0
}

func (m *RetSnsDetailInfo) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

func (m *RetSnsDetailInfo) GetIsBanList() bool {
	if m != nil {
		return m.IsBanList
	}
	return false
}

func (m *RetSnsDetailInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RetSnsDetailInfo) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

// 返回近期比赛记录 /msg?c=MatchList&u=玩家id
type RetMatchList struct {
	Datas []*RetMatchList_MatchData `protobuf:"bytes,1,rep,name=Datas,json=datas" json:"Datas,omitempty"`
}

func (m *RetMatchList) Reset()                    { *m = RetMatchList{} }
func (m *RetMatchList) String() string            { return proto.CompactTextString(m) }
func (*RetMatchList) ProtoMessage()               {}
func (*RetMatchList) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{2} }

func (m *RetMatchList) GetDatas() []*RetMatchList_MatchData {
	if m != nil {
		return m.Datas
	}
	return nil
}

type RetMatchList_MatchData struct {
	Icon     uint32 `protobuf:"varint,1,req,name=Icon,json=icon" json:"Icon"`
	NickName string `protobuf:"bytes,2,req,name=NickName,json=nickName" json:"NickName"`
	Time     uint32 `protobuf:"varint,3,req,name=Time,json=time" json:"Time"`
	Rank     uint32 `protobuf:"varint,4,req,name=Rank,json=rank" json:"Rank"`
	SceneID  uint32 `protobuf:"varint,5,req,name=SceneID,json=sceneID" json:"SceneID"`
	Score    uint32 `protobuf:"varint,6,req,name=Score,json=score" json:"Score"`
	AnimalID uint32 `protobuf:"varint,7,req,name=AnimalID,json=animalID" json:"AnimalID"`
	JiangGuo uint32 `protobuf:"varint,8,req,name=JiangGuo,json=jiangGuo" json:"JiangGuo"`
	PassIcon string `protobuf:"bytes,9,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
}

func (m *RetMatchList_MatchData) Reset()                    { *m = RetMatchList_MatchData{} }
func (m *RetMatchList_MatchData) String() string            { return proto.CompactTextString(m) }
func (*RetMatchList_MatchData) ProtoMessage()               {}
func (*RetMatchList_MatchData) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{2, 0} }

func (m *RetMatchList_MatchData) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetMatchList_MatchData) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *RetMatchList_MatchData) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RetMatchList_MatchData) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RetMatchList_MatchData) GetSceneID() uint32 {
	if m != nil {
		return m.SceneID
	}
	return 0
}

func (m *RetMatchList_MatchData) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RetMatchList_MatchData) GetAnimalID() uint32 {
	if m != nil {
		return m.AnimalID
	}
	return 0
}

func (m *RetMatchList_MatchData) GetJiangGuo() uint32 {
	if m != nil {
		return m.JiangGuo
	}
	return 0
}

func (m *RetMatchList_MatchData) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

// 请求荣誉列表 /msg?c=HonorList&u=玩家id
type RetHonorList struct {
	Honors []*RetHonorList_HonorUser `protobuf:"bytes,1,rep,name=Honors,json=honors" json:"Honors,omitempty"`
}

func (m *RetHonorList) Reset()                    { *m = RetHonorList{} }
func (m *RetHonorList) String() string            { return proto.CompactTextString(m) }
func (*RetHonorList) ProtoMessage()               {}
func (*RetHonorList) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{3} }

func (m *RetHonorList) GetHonors() []*RetHonorList_HonorUser {
	if m != nil {
		return m.Honors
	}
	return nil
}

type RetHonorList_HonorUser struct {
	Season uint32 `protobuf:"varint,1,req,name=Season,json=season" json:"Season"`
	Level  uint32 `protobuf:"varint,2,req,name=Level,json=level" json:"Level"`
	Scores uint32 `protobuf:"varint,3,req,name=Scores,json=scores" json:"Scores"`
}

func (m *RetHonorList_HonorUser) Reset()                    { *m = RetHonorList_HonorUser{} }
func (m *RetHonorList_HonorUser) String() string            { return proto.CompactTextString(m) }
func (*RetHonorList_HonorUser) ProtoMessage()               {}
func (*RetHonorList_HonorUser) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{3, 0} }

func (m *RetHonorList_HonorUser) GetSeason() uint32 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *RetHonorList_HonorUser) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetHonorList_HonorUser) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

// 玩家基本信息 /msg?c=UserBaseInfo?a=账号&u=玩家id (账号,id任选一个)
type RetUserBaseInfo struct {
	Id       uint64 `protobuf:"varint,1,req,name=Id,json=id" json:"Id"`
	Account  string `protobuf:"bytes,2,req,name=Account,json=account" json:"Account"`
	Icon     uint32 `protobuf:"varint,3,opt,name=Icon,json=icon" json:"Icon"`
	PassIcon string `protobuf:"bytes,4,opt,name=PassIcon,json=passIcon" json:"PassIcon"`
	Sex      uint32 `protobuf:"varint,5,opt,name=Sex,json=sex" json:"Sex"`
	Age      uint32 `protobuf:"varint,6,opt,name=Age,json=age" json:"Age"`
	Location uint32 `protobuf:"varint,7,opt,name=Location,json=location" json:"Location"`
	Position string `protobuf:"bytes,8,opt,name=Position,json=position" json:"Position"`
	RelType  uint32 `protobuf:"varint,9,opt,name=RelType,json=relType" json:"RelType"`
	Level    uint32 `protobuf:"varint,10,opt,name=Level,json=level" json:"Level"`
	Scores   uint32 `protobuf:"varint,11,opt,name=Scores,json=scores" json:"Scores"`
}

func (m *RetUserBaseInfo) Reset()                    { *m = RetUserBaseInfo{} }
func (m *RetUserBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*RetUserBaseInfo) ProtoMessage()               {}
func (*RetUserBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{4} }

func (m *RetUserBaseInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetUserBaseInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RetUserBaseInfo) GetIcon() uint32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RetUserBaseInfo) GetPassIcon() string {
	if m != nil {
		return m.PassIcon
	}
	return ""
}

func (m *RetUserBaseInfo) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RetUserBaseInfo) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RetUserBaseInfo) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *RetUserBaseInfo) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *RetUserBaseInfo) GetRelType() uint32 {
	if m != nil {
		return m.RelType
	}
	return 0
}

func (m *RetUserBaseInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RetUserBaseInfo) GetScores() uint32 {
	if m != nil {
		return m.Scores
	}
	return 0
}

// 是否举报 /msg?c=IsReport&class=举报大类(1照片、2留言、3语音)&rid=举报资源ID
type IsReportMsg struct {
	Ret bool `protobuf:"varint,1,req,name=Ret,json=ret" json:"Ret"`
}

func (m *IsReportMsg) Reset()                    { *m = IsReportMsg{} }
func (m *IsReportMsg) String() string            { return proto.CompactTextString(m) }
func (*IsReportMsg) ProtoMessage()               {}
func (*IsReportMsg) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{5} }

func (m *IsReportMsg) GetRet() bool {
	if m != nil {
		return m.Ret
	}
	return false
}

// 获取被举报消息 /msg?c=GetReportMsg
type RetReportMsgList struct {
	Data []*RetReportMsgList_ReportMsg `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *RetReportMsgList) Reset()                    { *m = RetReportMsgList{} }
func (m *RetReportMsgList) String() string            { return proto.CompactTextString(m) }
func (*RetReportMsgList) ProtoMessage()               {}
func (*RetReportMsgList) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{6} }

func (m *RetReportMsgList) GetData() []*RetReportMsgList_ReportMsg {
	if m != nil {
		return m.Data
	}
	return nil
}

type RetReportMsgList_ReportMsg struct {
	RClass uint32 `protobuf:"varint,1,req,name=RClass,json=rClass" json:"RClass"`
	Rtype  uint32 `protobuf:"varint,2,req,name=Rtype,json=rtype" json:"Rtype"`
	RId    string `protobuf:"bytes,3,req,name=RId,json=rId" json:"RId"`
	Reason string `protobuf:"bytes,4,opt,name=Reason,json=reason" json:"Reason"`
	Time   int64  `protobuf:"varint,5,opt,name=Time,json=time" json:"Time"`
}

func (m *RetReportMsgList_ReportMsg) Reset()                    { *m = RetReportMsgList_ReportMsg{} }
func (m *RetReportMsgList_ReportMsg) String() string            { return proto.CompactTextString(m) }
func (*RetReportMsgList_ReportMsg) ProtoMessage()               {}
func (*RetReportMsgList_ReportMsg) Descriptor() ([]byte, []int) { return fileDescriptorSns, []int{6, 0} }

func (m *RetReportMsgList_ReportMsg) GetRClass() uint32 {
	if m != nil {
		return m.RClass
	}
	return 0
}

func (m *RetReportMsgList_ReportMsg) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *RetReportMsgList_ReportMsg) GetRId() string {
	if m != nil {
		return m.RId
	}
	return ""
}

func (m *RetReportMsgList_ReportMsg) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RetReportMsgList_ReportMsg) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*RetPhotoList)(nil), "usercmd.RetPhotoList")
	proto.RegisterType((*RetPhotoList_PhotoInfo)(nil), "usercmd.RetPhotoList.PhotoInfo")
	proto.RegisterType((*RetSnsDetailInfo)(nil), "usercmd.RetSnsDetailInfo")
	proto.RegisterType((*RetMatchList)(nil), "usercmd.RetMatchList")
	proto.RegisterType((*RetMatchList_MatchData)(nil), "usercmd.RetMatchList.MatchData")
	proto.RegisterType((*RetHonorList)(nil), "usercmd.RetHonorList")
	proto.RegisterType((*RetHonorList_HonorUser)(nil), "usercmd.RetHonorList.HonorUser")
	proto.RegisterType((*RetUserBaseInfo)(nil), "usercmd.RetUserBaseInfo")
	proto.RegisterType((*IsReportMsg)(nil), "usercmd.IsReportMsg")
	proto.RegisterType((*RetReportMsgList)(nil), "usercmd.RetReportMsgList")
	proto.RegisterType((*RetReportMsgList_ReportMsg)(nil), "usercmd.RetReportMsgList.ReportMsg")
}
func (m *RetPhotoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetPhotoList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSns(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetPhotoList_PhotoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetPhotoList_PhotoInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x10
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.FileSize))
	dAtA[i] = 0x22
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.UploadUrl)))
	i += copy(dAtA[i:], m.UploadUrl)
	dAtA[i] = 0x28
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.ShowNum))
	dAtA[i] = 0x30
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.LaudNum))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Thumb198)))
	i += copy(dAtA[i:], m.Thumb198)
	dAtA[i] = 0x40
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x48
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.State))
	dAtA[i] = 0x50
	i++
	if m.IsPraise {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x58
	i++
	if m.IsShow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetSnsDetailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetSnsDetailInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x28
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Location))
	dAtA[i] = 0x32
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x38
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x40
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x48
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Scores))
	dAtA[i] = 0x50
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.FollowNum))
	dAtA[i] = 0x58
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.FansNum))
	dAtA[i] = 0x60
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.FriendNum))
	dAtA[i] = 0x68
	i++
	if m.ShowPos {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x70
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x7a
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.AudienceNum))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.AudienceUrl)))
	i += copy(dAtA[i:], m.AudienceUrl)
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.AudienceTime))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	if m.IsFollow {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	if m.IsBanList {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.State))
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Position)))
	i += copy(dAtA[i:], m.Position)
	return i, nil
}

func (m *RetMatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMatchList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSns(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetMatchList_MatchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMatchList_MatchData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x12
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	dAtA[i] = 0x18
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x20
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x28
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.SceneID))
	dAtA[i] = 0x30
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Score))
	dAtA[i] = 0x38
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.AnimalID))
	dAtA[i] = 0x40
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.JiangGuo))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	return i, nil
}

func (m *RetHonorList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetHonorList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Honors) > 0 {
		for _, msg := range m.Honors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSns(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetHonorList_HonorUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetHonorList_HonorUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Season))
	dAtA[i] = 0x10
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x18
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Scores))
	return i, nil
}

func (m *RetUserBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUserBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x18
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Icon))
	dAtA[i] = 0x22
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.PassIcon)))
	i += copy(dAtA[i:], m.PassIcon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x30
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Age))
	dAtA[i] = 0x38
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Location))
	dAtA[i] = 0x42
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Position)))
	i += copy(dAtA[i:], m.Position)
	dAtA[i] = 0x48
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.RelType))
	dAtA[i] = 0x50
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x58
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Scores))
	return i, nil
}

func (m *IsReportMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReportMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Ret {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *RetReportMsgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetReportMsgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSns(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetReportMsgList_ReportMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetReportMsgList_ReportMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.RClass))
	dAtA[i] = 0x10
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Rtype))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.RId)))
	i += copy(dAtA[i:], m.RId)
	dAtA[i] = 0x22
	i++
	i = encodeVarintSns(dAtA, i, uint64(len(m.Reason)))
	i += copy(dAtA[i:], m.Reason)
	dAtA[i] = 0x28
	i++
	i = encodeVarintSns(dAtA, i, uint64(m.Time))
	return i, nil
}

func encodeFixed64Sns(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Sns(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSns(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RetPhotoList) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovSns(uint64(l))
		}
	}
	return n
}

func (m *RetPhotoList_PhotoInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Uid))
	n += 1 + sovSns(uint64(m.FileSize))
	l = len(m.UploadUrl)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.ShowNum))
	n += 1 + sovSns(uint64(m.LaudNum))
	l = len(m.Thumb198)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Time))
	n += 1 + sovSns(uint64(m.State))
	n += 2
	n += 2
	return n
}

func (m *RetSnsDetailInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSns(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovSns(uint64(l))
	l = len(m.NickName)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Icon))
	n += 1 + sovSns(uint64(m.Location))
	l = len(m.Sign)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Sex))
	n += 1 + sovSns(uint64(m.Level))
	n += 1 + sovSns(uint64(m.Scores))
	n += 1 + sovSns(uint64(m.FollowNum))
	n += 1 + sovSns(uint64(m.FansNum))
	n += 1 + sovSns(uint64(m.FriendNum))
	n += 2
	n += 1 + sovSns(uint64(m.Age))
	l = len(m.PassIcon)
	n += 1 + l + sovSns(uint64(l))
	n += 2 + sovSns(uint64(m.AudienceNum))
	l = len(m.AudienceUrl)
	n += 2 + l + sovSns(uint64(l))
	n += 2 + sovSns(uint64(m.AudienceTime))
	n += 3
	n += 3
	n += 2 + sovSns(uint64(m.State))
	l = len(m.Position)
	n += 2 + l + sovSns(uint64(l))
	return n
}

func (m *RetMatchList) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSns(uint64(l))
		}
	}
	return n
}

func (m *RetMatchList_MatchData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSns(uint64(m.Icon))
	l = len(m.NickName)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Time))
	n += 1 + sovSns(uint64(m.Rank))
	n += 1 + sovSns(uint64(m.SceneID))
	n += 1 + sovSns(uint64(m.Score))
	n += 1 + sovSns(uint64(m.AnimalID))
	n += 1 + sovSns(uint64(m.JiangGuo))
	l = len(m.PassIcon)
	n += 1 + l + sovSns(uint64(l))
	return n
}

func (m *RetHonorList) Size() (n int) {
	var l int
	_ = l
	if len(m.Honors) > 0 {
		for _, e := range m.Honors {
			l = e.Size()
			n += 1 + l + sovSns(uint64(l))
		}
	}
	return n
}

func (m *RetHonorList_HonorUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSns(uint64(m.Season))
	n += 1 + sovSns(uint64(m.Level))
	n += 1 + sovSns(uint64(m.Scores))
	return n
}

func (m *RetUserBaseInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSns(uint64(m.Id))
	l = len(m.Account)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Icon))
	l = len(m.PassIcon)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Sex))
	n += 1 + sovSns(uint64(m.Age))
	n += 1 + sovSns(uint64(m.Location))
	l = len(m.Position)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.RelType))
	n += 1 + sovSns(uint64(m.Level))
	n += 1 + sovSns(uint64(m.Scores))
	return n
}

func (m *IsReportMsg) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *RetReportMsgList) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovSns(uint64(l))
		}
	}
	return n
}

func (m *RetReportMsgList_ReportMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSns(uint64(m.RClass))
	n += 1 + sovSns(uint64(m.Rtype))
	l = len(m.RId)
	n += 1 + l + sovSns(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovSns(uint64(l))
	n += 1 + sovSns(uint64(m.Time))
	return n
}

func sovSns(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSns(x uint64) (n int) {
	return sovSns(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RetPhotoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetPhotoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetPhotoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RetPhotoList_PhotoInfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetPhotoList_PhotoInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowNum", wireType)
			}
			m.ShowNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaudNum", wireType)
			}
			m.LaudNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaudNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb198", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumb198 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPraise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPraise = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Uid")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FileSize")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UploadUrl")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ShowNum")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LaudNum")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Thumb198")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("State")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetSnsDetailInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetSnsDetailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetSnsDetailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowNum", wireType)
			}
			m.FollowNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansNum", wireType)
			}
			m.FansNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendNum", wireType)
			}
			m.FriendNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPos", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPos = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudienceNum", wireType)
			}
			m.AudienceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AudienceNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudienceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AudienceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudienceTime", wireType)
			}
			m.AudienceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AudienceTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBanList = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NickName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Location")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sign")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sex")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Level")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Scores")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &RetMatchList_MatchData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMatchList_MatchData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneID", wireType)
			}
			m.SceneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimalID", wireType)
			}
			m.AnimalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnimalID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiangGuo", wireType)
			}
			m.JiangGuo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JiangGuo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Icon")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NickName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rank")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SceneID")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Score")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AnimalID")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("JiangGuo")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetHonorList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetHonorList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetHonorList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Honors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Honors = append(m.Honors, &RetHonorList_HonorUser{})
			if err := m.Honors[len(m.Honors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetHonorList_HonorUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HonorUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HonorUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Season")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Level")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Scores")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUserBaseInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetUserBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetUserBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelType", wireType)
			}
			m.RelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			m.Scores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scores |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Account")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsReportMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReportMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReportMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Ret")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetReportMsgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetReportMsgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetReportMsgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RetReportMsgList_ReportMsg{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetReportMsgList_ReportMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RClass", wireType)
			}
			m.RClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RClass |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RClass")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rtype")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSns(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSns
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSns
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSns
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSns(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSns = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSns   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sns.proto", fileDescriptorSns) }

var fileDescriptorSns = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcb, 0x8e, 0xe3, 0x44,
	0x14, 0x1d, 0x3f, 0xe2, 0xd8, 0x95, 0x1e, 0xa6, 0x31, 0xc3, 0xa8, 0xd4, 0x1a, 0x65, 0xa2, 0x20,
	0x50, 0x56, 0x91, 0x00, 0x21, 0x60, 0xd9, 0x4d, 0xab, 0xc1, 0xa8, 0xa7, 0x15, 0x39, 0xdd, 0x1f,
	0x50, 0xd8, 0x95, 0xa4, 0x68, 0xa7, 0x2a, 0x72, 0x95, 0x61, 0xe0, 0x2b, 0xd8, 0xb0, 0x9c, 0x3f,
	0xe0, 0x43, 0x66, 0x09, 0x6c, 0xd8, 0x21, 0xd4, 0x23, 0xfe, 0x03, 0xdd, 0xeb, 0x47, 0xca, 0x3d,
	0x81, 0x0d, 0x3b, 0xe7, 0xd4, 0xf1, 0xad, 0xba, 0xa7, 0xce, 0xb9, 0x31, 0x89, 0xb4, 0xd4, 0xf3,
	0x5d, 0xa9, 0x8c, 0x8a, 0x87, 0x95, 0xe6, 0x65, 0xb6, 0xcd, 0xa7, 0x2f, 0x3d, 0x72, 0x94, 0x72,
	0xb3, 0xd8, 0x28, 0xa3, 0x2e, 0x85, 0x36, 0xf1, 0xc7, 0xc4, 0x3f, 0x67, 0x86, 0x51, 0x67, 0xe2,
	0xcd, 0x46, 0x1f, 0x3d, 0x9b, 0x37, 0xc4, 0xb9, 0x4d, 0x9a, 0xe3, 0x53, 0x22, 0x57, 0x2a, 0xf5,
	0x73, 0x66, 0xd8, 0xc9, 0x1f, 0x2e, 0x89, 0x3a, 0x2c, 0x7e, 0x4c, 0xdc, 0x24, 0xa7, 0xce, 0xc4,
	0x9d, 0x45, 0x67, 0xfe, 0xab, 0x3f, 0x9f, 0x3d, 0x48, 0x5d, 0x91, 0xc7, 0x4f, 0x88, 0x77, 0x23,
	0x72, 0xea, 0x4e, 0xdc, 0x99, 0xdf, 0xc0, 0x5e, 0x25, 0xf2, 0x78, 0x42, 0xc2, 0x0b, 0x51, 0xf0,
	0xa5, 0xf8, 0x91, 0x53, 0x6f, 0xe2, 0xce, 0x1e, 0x36, 0x8b, 0xe1, 0xaa, 0x41, 0xe3, 0x29, 0x89,
	0x6e, 0x76, 0x85, 0x62, 0xf9, 0x4d, 0x59, 0x50, 0xdf, 0x2a, 0x1b, 0x55, 0x2d, 0x1c, 0x8f, 0xc9,
	0x70, 0xb9, 0x51, 0xdf, 0x5f, 0x55, 0x5b, 0x3a, 0xb0, 0x8a, 0x0c, 0x75, 0x0d, 0xc2, 0xfa, 0x25,
	0xab, 0x72, 0x58, 0x0f, 0xec, 0xf5, 0xa2, 0x06, 0xe1, 0x14, 0xd7, 0x9b, 0x6a, 0xfb, 0xcd, 0x87,
	0x9f, 0x7f, 0x46, 0x87, 0xd6, 0x16, 0xa1, 0x69, 0xd0, 0x98, 0x12, 0xff, 0x5a, 0x6c, 0x39, 0x0d,
	0xad, 0x06, 0x7c, 0x23, 0xb6, 0x3c, 0x3e, 0x21, 0x83, 0xa5, 0x61, 0x86, 0xd3, 0xc8, 0xaa, 0x3c,
	0xd0, 0x00, 0x41, 0xdd, 0x44, 0x2f, 0x4a, 0x26, 0x34, 0xa7, 0x64, 0xe2, 0xcc, 0xc2, 0xb6, 0xae,
	0x68, 0xd0, 0xf8, 0x29, 0x09, 0x12, 0x0d, 0x67, 0xa7, 0x23, 0x6b, 0x3d, 0x10, 0x88, 0x4d, 0x7f,
	0x1f, 0x90, 0xe3, 0x94, 0x9b, 0xa5, 0xd4, 0xe7, 0xdc, 0x30, 0x51, 0xdc, 0x13, 0xd8, 0xb7, 0x04,
	0x1e, 0x93, 0xe1, 0x69, 0x96, 0xa9, 0x4a, 0x1a, 0x14, 0xb9, 0xed, 0x60, 0xc8, 0x6a, 0x10, 0x8e,
	0x72, 0x25, 0xb2, 0xdb, 0x2b, 0xb6, 0xad, 0x85, 0xee, 0x5a, 0x94, 0x0d, 0x0a, 0x2d, 0x26, 0x99,
	0x92, 0xa8, 0x71, 0xdb, 0x87, 0x2f, 0x32, 0x25, 0xe1, 0xdd, 0x4b, 0x95, 0x31, 0x23, 0x94, 0xec,
	0xe9, 0x1b, 0x16, 0x0d, 0x0a, 0xef, 0x2e, 0xc5, 0x5a, 0xa2, 0xba, 0x6d, 0x65, 0x5f, 0x8b, 0xb5,
	0x84, 0x8b, 0x5f, 0xf2, 0x17, 0xa8, 0x6a, 0xfb, 0x9a, 0xa7, 0xf9, 0x0b, 0x90, 0xed, 0x92, 0x7f,
	0xc7, 0x0b, 0x54, 0xb4, 0x93, 0xad, 0x00, 0x08, 0x44, 0x59, 0x66, 0xaa, 0xe4, 0xba, 0xa7, 0x69,
	0xa0, 0x11, 0x03, 0x43, 0x5c, 0xa8, 0xa2, 0xa8, 0xaf, 0x1b, 0x54, 0x6d, 0x09, 0xd1, 0xaa, 0x85,
	0x41, 0x8d, 0x0b, 0x26, 0x35, 0x30, 0x46, 0x16, 0x63, 0xb8, 0xaa, 0x41, 0xac, 0x51, 0x0a, 0x2e,
	0xd1, 0x12, 0x47, 0xbd, 0x1a, 0x2d, 0xdc, 0x9a, 0x6a, 0xa1, 0x34, 0x7d, 0x68, 0xdd, 0x0d, 0x9a,
	0x6a, 0xa1, 0x34, 0x74, 0x76, 0xba, 0xe6, 0xf4, 0x2d, 0xeb, 0x6d, 0x8f, 0xad, 0xf1, 0xd2, 0x17,
	0x4c, 0x6b, 0xd4, 0xf2, 0xd1, 0xc4, 0xd9, 0x2b, 0xbd, 0x6b, 0xd0, 0xf8, 0x03, 0x32, 0x3a, 0xad,
	0x72, 0xc1, 0x65, 0xc6, 0x61, 0xff, 0x63, 0xab, 0xc2, 0x88, 0xed, 0x17, 0x6c, 0x1e, 0x98, 0xff,
	0x6d, 0xab, 0x58, 0xc7, 0x03, 0xfb, 0xcf, 0xc8, 0x51, 0xcb, 0x43, 0x93, 0xc6, 0x56, 0xc1, 0x23,
	0x66, 0xad, 0xd4, 0x86, 0xac, 0xd5, 0xa3, 0xef, 0xf4, 0x0d, 0x59, 0xa3, 0xa0, 0x4c, 0xa2, 0xcf,
	0x98, 0x84, 0xa4, 0xd3, 0xc7, 0x16, 0x25, 0x12, 0x2d, 0xbc, 0xb7, 0xfc, 0xbb, 0xd6, 0x46, 0x7b,
	0xcb, 0x2f, 0x94, 0x16, 0xe8, 0x95, 0x27, 0xbd, 0xee, 0x1b, 0x74, 0xfa, 0xb7, 0x8b, 0x43, 0xe7,
	0x39, 0x33, 0xd9, 0x06, 0xcb, 0x7d, 0x42, 0x06, 0x30, 0x74, 0xf4, 0xa1, 0xa9, 0xd3, 0xb1, 0xe6,
	0xf8, 0x04, 0xbc, 0x74, 0x00, 0x53, 0x47, 0x9f, 0xbc, 0x74, 0x49, 0xd4, 0x81, 0x9d, 0x7b, 0x9d,
	0x43, 0xee, 0xed, 0x9c, 0xef, 0xfe, 0x9b, 0xf3, 0x51, 0x37, 0x7b, 0x00, 0xd5, 0xe1, 0xa6, 0xc4,
	0x4f, 0x99, 0xbc, 0xed, 0x67, 0xa2, 0x64, 0xf2, 0x16, 0xdd, 0x91, 0x71, 0xc9, 0x93, 0xf3, 0x7b,
	0x23, 0xa7, 0x06, 0x51, 0x23, 0xf0, 0x6b, 0x6f, 0xe0, 0x0c, 0xd0, 0xc2, 0x70, 0xa2, 0x53, 0x29,
	0xb6, 0xac, 0x48, 0xce, 0x7b, 0xc1, 0x08, 0x59, 0x83, 0x02, 0xe3, 0x6b, 0xc1, 0xe4, 0xfa, 0xcb,
	0x4a, 0xf5, 0x02, 0x12, 0x7e, 0xdb, 0xa0, 0x3d, 0x97, 0x45, 0x87, 0x5c, 0x36, 0xfd, 0xc5, 0x41,
	0x9d, 0xbf, 0x52, 0x52, 0x95, 0xa8, 0xf3, 0xa7, 0x24, 0xc0, 0x1f, 0x07, 0x85, 0xee, 0x68, 0x73,
	0x7c, 0xba, 0xd1, 0xbc, 0x4c, 0x83, 0x0d, 0xd2, 0x4f, 0x32, 0x12, 0x75, 0x20, 0x86, 0x93, 0x33,
	0x7d, 0x4f, 0xea, 0x40, 0x23, 0xb6, 0x8f, 0xb5, 0xfb, 0x5f, 0xb1, 0xf6, 0xde, 0x8c, 0xf5, 0xf4,
	0x37, 0x97, 0x3c, 0x4a, 0xb9, 0x81, 0x3d, 0xce, 0x98, 0xe6, 0xff, 0x63, 0xd4, 0xb5, 0x56, 0xf0,
	0x2c, 0x77, 0x76, 0x56, 0xe8, 0x44, 0xf3, 0x0f, 0x46, 0xb3, 0x19, 0x57, 0x03, 0x3b, 0xd4, 0x30,
	0xae, 0x9a, 0xb0, 0x07, 0x07, 0xc2, 0xde, 0x8d, 0xc6, 0xa1, 0xb5, 0xb8, 0x1f, 0x8d, 0x76, 0x20,
	0xc2, 0x43, 0x81, 0x80, 0x7e, 0x52, 0x5e, 0x5c, 0xff, 0xb0, 0xe3, 0x78, 0x93, 0x9d, 0x95, 0xca,
	0x1a, 0xdc, 0x6b, 0x6a, 0x0f, 0xbb, 0x37, 0x34, 0xb5, 0xe7, 0x5c, 0xab, 0xe9, 0xfb, 0x64, 0x94,
	0xe8, 0x94, 0xef, 0x54, 0x69, 0x9e, 0xeb, 0x35, 0x34, 0x91, 0x72, 0x83, 0x7a, 0xb6, 0xa9, 0xf6,
	0x4a, 0x6e, 0xa6, 0xaf, 0x1d, 0xfc, 0x9b, 0xe9, 0x88, 0x8d, 0x5b, 0xec, 0x4f, 0x81, 0xf7, 0x6c,
	0xaf, 0xf4, 0x88, 0xf3, 0xee, 0x57, 0xf3, 0x39, 0xf0, 0xb3, 0x43, 0xa2, 0xfd, 0x9e, 0x4f, 0x49,
	0x90, 0x7e, 0x51, 0x30, 0xad, 0xfb, 0x76, 0x29, 0x11, 0x83, 0xd6, 0x52, 0x03, 0x8d, 0xf7, 0xec,
	0x52, 0x02, 0x84, 0xa7, 0x4d, 0xf2, 0xde, 0x9f, 0x95, 0x57, 0x26, 0x39, 0x56, 0xac, 0x0d, 0x68,
	0x5f, 0x61, 0x50, 0xd6, 0x06, 0x6c, 0xb3, 0x0c, 0x37, 0xe8, 0xd9, 0x59, 0x3e, 0x3b, 0x7e, 0x75,
	0x37, 0x76, 0x7e, 0xbd, 0x1b, 0x3b, 0x7f, 0xdd, 0x8d, 0x9d, 0x9f, 0x5e, 0x8f, 0x1f, 0xfc, 0x13,
	0x00, 0x00, 0xff, 0xff, 0x09, 0x46, 0xd8, 0x81, 0x13, 0x09, 0x00, 0x00,
}
